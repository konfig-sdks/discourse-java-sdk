/*
 * Discourse API Documentation
 * This page contains the documentation on how to use Discourse through API calls.  > Note: For any endpoints not listed you can follow the [reverse engineer the Discourse API](https://meta.discourse.org/t/-/20576) guide to figure out how to use an API endpoint.  ### Request Content-Type  The Content-Type for POST and PUT requests can be set to `application/x-www-form-urlencoded`, `multipart/form-data`, or `application/json`.  ### Endpoint Names and Response Content-Type  Most API endpoints provide the same content as their HTML counterparts. For example the URL `/categories` serves a list of categories, the `/categories.json` API provides the same information in JSON format.  Instead of sending API requests to `/categories.json` you may also send them to `/categories` and add an `Accept: application/json` header to the request to get the JSON response. Sending requests with the `Accept` header is necessary if you want to use URLs for related endpoints returned by the API, such as pagination URLs. These URLs are returned without the `.json` prefix so you need to add the header in order to get the correct response format.  ### Authentication  Some endpoints do not require any authentication, pretty much anything else will require you to be authenticated.  To become authenticated you will need to create an API Key from the admin panel.  Once you have your API Key you can pass it in along with your API Username as an HTTP header like this:  ``` curl -X GET \"http://127.0.0.1:3000/admin/users/list/active.json\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" ```  and this is how POST requests will look:  ``` curl -X POST \"http://127.0.0.1:3000/categories\" \\ -H \"Content-Type: multipart/form-data;\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" \\ -F \"name=89853c20-4409-e91a-a8ea-f6cdff96aaaa\" \\ -F \"color=49d9e9\" \\ -F \"text_color=f0fcfd\" ```  ### Boolean values  If an endpoint accepts a boolean be sure to specify it as a lowercase `true` or `false` value unless noted otherwise. 
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.GroupsAddMembersToGroupRequest;
import com.konfigthis.client.model.GroupsAddMembersToGroupResponse;
import com.konfigthis.client.model.GroupsCreateNewGroupRequest;
import com.konfigthis.client.model.GroupsCreateNewGroupRequestGroup;
import com.konfigthis.client.model.GroupsCreateNewGroupResponse;
import com.konfigthis.client.model.GroupsDeleteGroupByIdJsonResponse;
import com.konfigthis.client.model.GroupsGetGroupByIdResponse;
import com.konfigthis.client.model.GroupsListMembersJsonResponse;
import com.konfigthis.client.model.GroupsListResponse;
import com.konfigthis.client.model.GroupsRemoveMembersRequest;
import com.konfigthis.client.model.GroupsRemoveMembersResponse;
import com.konfigthis.client.model.GroupsUpdateGroupByIdJsonRequest;
import com.konfigthis.client.model.GroupsUpdateGroupByIdJsonResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class GroupsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public GroupsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public GroupsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addMembersToGroupCall(Integer id, GroupsAddMembersToGroupRequest groupsAddMembersToGroupRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = groupsAddMembersToGroupRequest;

        // create path and map variables
        String localVarPath = "/groups/{id}/members.json"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addMembersToGroupValidateBeforeCall(Integer id, GroupsAddMembersToGroupRequest groupsAddMembersToGroupRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling addMembersToGroup(Async)");
        }

        return addMembersToGroupCall(id, groupsAddMembersToGroupRequest, _callback);

    }


    private ApiResponse<GroupsAddMembersToGroupResponse> addMembersToGroupWithHttpInfo(Integer id, GroupsAddMembersToGroupRequest groupsAddMembersToGroupRequest) throws ApiException {
        okhttp3.Call localVarCall = addMembersToGroupValidateBeforeCall(id, groupsAddMembersToGroupRequest, null);
        Type localVarReturnType = new TypeToken<GroupsAddMembersToGroupResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addMembersToGroupAsync(Integer id, GroupsAddMembersToGroupRequest groupsAddMembersToGroupRequest, final ApiCallback<GroupsAddMembersToGroupResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addMembersToGroupValidateBeforeCall(id, groupsAddMembersToGroupRequest, _callback);
        Type localVarReturnType = new TypeToken<GroupsAddMembersToGroupResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddMembersToGroupRequestBuilder {
        private final Integer id;
        private String usernames;

        private AddMembersToGroupRequestBuilder(Integer id) {
            this.id = id;
        }

        /**
         * Set usernames
         * @param usernames comma separated list (optional)
         * @return AddMembersToGroupRequestBuilder
         */
        public AddMembersToGroupRequestBuilder usernames(String usernames) {
            this.usernames = usernames;
            return this;
        }
        
        /**
         * Build call for addMembersToGroup
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> success response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            GroupsAddMembersToGroupRequest groupsAddMembersToGroupRequest = buildBodyParams();
            return addMembersToGroupCall(id, groupsAddMembersToGroupRequest, _callback);
        }

        private GroupsAddMembersToGroupRequest buildBodyParams() {
            GroupsAddMembersToGroupRequest groupsAddMembersToGroupRequest = new GroupsAddMembersToGroupRequest();
            groupsAddMembersToGroupRequest.usernames(this.usernames);
            return groupsAddMembersToGroupRequest;
        }

        /**
         * Execute addMembersToGroup request
         * @return GroupsAddMembersToGroupResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> success response </td><td>  -  </td></tr>
         </table>
         */
        public GroupsAddMembersToGroupResponse execute() throws ApiException {
            GroupsAddMembersToGroupRequest groupsAddMembersToGroupRequest = buildBodyParams();
            ApiResponse<GroupsAddMembersToGroupResponse> localVarResp = addMembersToGroupWithHttpInfo(id, groupsAddMembersToGroupRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addMembersToGroup request with HTTP info returned
         * @return ApiResponse&lt;GroupsAddMembersToGroupResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> success response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GroupsAddMembersToGroupResponse> executeWithHttpInfo() throws ApiException {
            GroupsAddMembersToGroupRequest groupsAddMembersToGroupRequest = buildBodyParams();
            return addMembersToGroupWithHttpInfo(id, groupsAddMembersToGroupRequest);
        }

        /**
         * Execute addMembersToGroup request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> success response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GroupsAddMembersToGroupResponse> _callback) throws ApiException {
            GroupsAddMembersToGroupRequest groupsAddMembersToGroupRequest = buildBodyParams();
            return addMembersToGroupAsync(id, groupsAddMembersToGroupRequest, _callback);
        }
    }

    /**
     * Add group members
     * 
     * @param id  (required)
     * @return AddMembersToGroupRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success response </td><td>  -  </td></tr>
     </table>
     */
    public AddMembersToGroupRequestBuilder addMembersToGroup(Integer id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        return new AddMembersToGroupRequestBuilder(id);
    }
    private okhttp3.Call createNewGroupCall(GroupsCreateNewGroupRequest groupsCreateNewGroupRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = groupsCreateNewGroupRequest;

        // create path and map variables
        String localVarPath = "/admin/groups.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewGroupValidateBeforeCall(GroupsCreateNewGroupRequest groupsCreateNewGroupRequest, final ApiCallback _callback) throws ApiException {
        return createNewGroupCall(groupsCreateNewGroupRequest, _callback);

    }


    private ApiResponse<GroupsCreateNewGroupResponse> createNewGroupWithHttpInfo(GroupsCreateNewGroupRequest groupsCreateNewGroupRequest) throws ApiException {
        okhttp3.Call localVarCall = createNewGroupValidateBeforeCall(groupsCreateNewGroupRequest, null);
        Type localVarReturnType = new TypeToken<GroupsCreateNewGroupResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewGroupAsync(GroupsCreateNewGroupRequest groupsCreateNewGroupRequest, final ApiCallback<GroupsCreateNewGroupResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewGroupValidateBeforeCall(groupsCreateNewGroupRequest, _callback);
        Type localVarReturnType = new TypeToken<GroupsCreateNewGroupResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewGroupRequestBuilder {
        private final GroupsCreateNewGroupRequestGroup group;

        private CreateNewGroupRequestBuilder(GroupsCreateNewGroupRequestGroup group) {
            this.group = group;
        }

        /**
         * Build call for createNewGroup
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> group created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            GroupsCreateNewGroupRequest groupsCreateNewGroupRequest = buildBodyParams();
            return createNewGroupCall(groupsCreateNewGroupRequest, _callback);
        }

        private GroupsCreateNewGroupRequest buildBodyParams() {
            GroupsCreateNewGroupRequest groupsCreateNewGroupRequest = new GroupsCreateNewGroupRequest();
            groupsCreateNewGroupRequest.group(this.group);
            return groupsCreateNewGroupRequest;
        }

        /**
         * Execute createNewGroup request
         * @return GroupsCreateNewGroupResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> group created </td><td>  -  </td></tr>
         </table>
         */
        public GroupsCreateNewGroupResponse execute() throws ApiException {
            GroupsCreateNewGroupRequest groupsCreateNewGroupRequest = buildBodyParams();
            ApiResponse<GroupsCreateNewGroupResponse> localVarResp = createNewGroupWithHttpInfo(groupsCreateNewGroupRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewGroup request with HTTP info returned
         * @return ApiResponse&lt;GroupsCreateNewGroupResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> group created </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GroupsCreateNewGroupResponse> executeWithHttpInfo() throws ApiException {
            GroupsCreateNewGroupRequest groupsCreateNewGroupRequest = buildBodyParams();
            return createNewGroupWithHttpInfo(groupsCreateNewGroupRequest);
        }

        /**
         * Execute createNewGroup request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> group created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GroupsCreateNewGroupResponse> _callback) throws ApiException {
            GroupsCreateNewGroupRequest groupsCreateNewGroupRequest = buildBodyParams();
            return createNewGroupAsync(groupsCreateNewGroupRequest, _callback);
        }
    }

    /**
     * Create a group
     * 
     * @return CreateNewGroupRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> group created </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewGroupRequestBuilder createNewGroup(GroupsCreateNewGroupRequestGroup group) throws IllegalArgumentException {
        if (group == null) throw new IllegalArgumentException("\"group\" is required but got null");
        return new CreateNewGroupRequestBuilder(group);
    }
    private okhttp3.Call deleteGroupByIdJsonCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/groups/{id}.json"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteGroupByIdJsonValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteGroupByIdJson(Async)");
        }

        return deleteGroupByIdJsonCall(id, _callback);

    }


    private ApiResponse<GroupsDeleteGroupByIdJsonResponse> deleteGroupByIdJsonWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = deleteGroupByIdJsonValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<GroupsDeleteGroupByIdJsonResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteGroupByIdJsonAsync(Integer id, final ApiCallback<GroupsDeleteGroupByIdJsonResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteGroupByIdJsonValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<GroupsDeleteGroupByIdJsonResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeleteGroupByIdJsonRequestBuilder {
        private final Integer id;

        private DeleteGroupByIdJsonRequestBuilder(Integer id) {
            this.id = id;
        }

        /**
         * Build call for deleteGroupByIdJson
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteGroupByIdJsonCall(id, _callback);
        }


        /**
         * Execute deleteGroupByIdJson request
         * @return GroupsDeleteGroupByIdJsonResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
         </table>
         */
        public GroupsDeleteGroupByIdJsonResponse execute() throws ApiException {
            ApiResponse<GroupsDeleteGroupByIdJsonResponse> localVarResp = deleteGroupByIdJsonWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute deleteGroupByIdJson request with HTTP info returned
         * @return ApiResponse&lt;GroupsDeleteGroupByIdJsonResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GroupsDeleteGroupByIdJsonResponse> executeWithHttpInfo() throws ApiException {
            return deleteGroupByIdJsonWithHttpInfo(id);
        }

        /**
         * Execute deleteGroupByIdJson request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GroupsDeleteGroupByIdJsonResponse> _callback) throws ApiException {
            return deleteGroupByIdJsonAsync(id, _callback);
        }
    }

    /**
     * Delete a group
     * 
     * @param id  (required)
     * @return DeleteGroupByIdJsonRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
     </table>
     */
    public DeleteGroupByIdJsonRequestBuilder deleteGroupByIdJson(Integer id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        return new DeleteGroupByIdJsonRequestBuilder(id);
    }
    private okhttp3.Call getGroupByIdCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/groups/{id}.json"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGroupByIdValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getGroupById(Async)");
        }

        return getGroupByIdCall(id, _callback);

    }


    private ApiResponse<GroupsGetGroupByIdResponse> getGroupByIdWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getGroupByIdValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<GroupsGetGroupByIdResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getGroupByIdAsync(String id, final ApiCallback<GroupsGetGroupByIdResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGroupByIdValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<GroupsGetGroupByIdResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetGroupByIdRequestBuilder {
        private final String id;

        private GetGroupByIdRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Build call for getGroupById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> success response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getGroupByIdCall(id, _callback);
        }


        /**
         * Execute getGroupById request
         * @return GroupsGetGroupByIdResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> success response </td><td>  -  </td></tr>
         </table>
         */
        public GroupsGetGroupByIdResponse execute() throws ApiException {
            ApiResponse<GroupsGetGroupByIdResponse> localVarResp = getGroupByIdWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getGroupById request with HTTP info returned
         * @return ApiResponse&lt;GroupsGetGroupByIdResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> success response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GroupsGetGroupByIdResponse> executeWithHttpInfo() throws ApiException {
            return getGroupByIdWithHttpInfo(id);
        }

        /**
         * Execute getGroupById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> success response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GroupsGetGroupByIdResponse> _callback) throws ApiException {
            return getGroupByIdAsync(id, _callback);
        }
    }

    /**
     * Get a group
     * 
     * @param id Use group name instead of id (required)
     * @return GetGroupByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success response </td><td>  -  </td></tr>
     </table>
     */
    public GetGroupByIdRequestBuilder getGroupById(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new GetGroupByIdRequestBuilder(id);
    }
    private okhttp3.Call listCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/groups.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return listCall(_callback);

    }


    private ApiResponse<GroupsListResponse> listWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = listValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<GroupsListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAsync(final ApiCallback<GroupsListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<GroupsListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListRequestBuilder {

        private ListRequestBuilder() {
        }

        /**
         * Build call for list
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listCall(_callback);
        }


        /**
         * Execute list request
         * @return GroupsListResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
         </table>
         */
        public GroupsListResponse execute() throws ApiException {
            ApiResponse<GroupsListResponse> localVarResp = listWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute list request with HTTP info returned
         * @return ApiResponse&lt;GroupsListResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GroupsListResponse> executeWithHttpInfo() throws ApiException {
            return listWithHttpInfo();
        }

        /**
         * Execute list request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GroupsListResponse> _callback) throws ApiException {
            return listAsync(_callback);
        }
    }

    /**
     * List groups
     * 
     * @return ListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
     </table>
     */
    public ListRequestBuilder list() throws IllegalArgumentException {
        return new ListRequestBuilder();
    }
    private okhttp3.Call listMembersJsonCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/groups/{id}/members.json"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listMembersJsonValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling listMembersJson(Async)");
        }

        return listMembersJsonCall(id, _callback);

    }


    private ApiResponse<GroupsListMembersJsonResponse> listMembersJsonWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = listMembersJsonValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<GroupsListMembersJsonResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listMembersJsonAsync(String id, final ApiCallback<GroupsListMembersJsonResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listMembersJsonValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<GroupsListMembersJsonResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListMembersJsonRequestBuilder {
        private final String id;

        private ListMembersJsonRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Build call for listMembersJson
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> success response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listMembersJsonCall(id, _callback);
        }


        /**
         * Execute listMembersJson request
         * @return GroupsListMembersJsonResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> success response </td><td>  -  </td></tr>
         </table>
         */
        public GroupsListMembersJsonResponse execute() throws ApiException {
            ApiResponse<GroupsListMembersJsonResponse> localVarResp = listMembersJsonWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listMembersJson request with HTTP info returned
         * @return ApiResponse&lt;GroupsListMembersJsonResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> success response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GroupsListMembersJsonResponse> executeWithHttpInfo() throws ApiException {
            return listMembersJsonWithHttpInfo(id);
        }

        /**
         * Execute listMembersJson request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> success response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GroupsListMembersJsonResponse> _callback) throws ApiException {
            return listMembersJsonAsync(id, _callback);
        }
    }

    /**
     * List group members
     * 
     * @param id Use group name instead of id (required)
     * @return ListMembersJsonRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success response </td><td>  -  </td></tr>
     </table>
     */
    public ListMembersJsonRequestBuilder listMembersJson(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new ListMembersJsonRequestBuilder(id);
    }
    private okhttp3.Call removeMembersCall(Integer id, GroupsRemoveMembersRequest groupsRemoveMembersRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = groupsRemoveMembersRequest;

        // create path and map variables
        String localVarPath = "/groups/{id}/members.json"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeMembersValidateBeforeCall(Integer id, GroupsRemoveMembersRequest groupsRemoveMembersRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling removeMembers(Async)");
        }

        return removeMembersCall(id, groupsRemoveMembersRequest, _callback);

    }


    private ApiResponse<GroupsRemoveMembersResponse> removeMembersWithHttpInfo(Integer id, GroupsRemoveMembersRequest groupsRemoveMembersRequest) throws ApiException {
        okhttp3.Call localVarCall = removeMembersValidateBeforeCall(id, groupsRemoveMembersRequest, null);
        Type localVarReturnType = new TypeToken<GroupsRemoveMembersResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call removeMembersAsync(Integer id, GroupsRemoveMembersRequest groupsRemoveMembersRequest, final ApiCallback<GroupsRemoveMembersResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeMembersValidateBeforeCall(id, groupsRemoveMembersRequest, _callback);
        Type localVarReturnType = new TypeToken<GroupsRemoveMembersResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RemoveMembersRequestBuilder {
        private final Integer id;
        private String usernames;

        private RemoveMembersRequestBuilder(Integer id) {
            this.id = id;
        }

        /**
         * Set usernames
         * @param usernames comma separated list (optional)
         * @return RemoveMembersRequestBuilder
         */
        public RemoveMembersRequestBuilder usernames(String usernames) {
            this.usernames = usernames;
            return this;
        }
        
        /**
         * Build call for removeMembers
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> success response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            GroupsRemoveMembersRequest groupsRemoveMembersRequest = buildBodyParams();
            return removeMembersCall(id, groupsRemoveMembersRequest, _callback);
        }

        private GroupsRemoveMembersRequest buildBodyParams() {
            GroupsRemoveMembersRequest groupsRemoveMembersRequest = new GroupsRemoveMembersRequest();
            groupsRemoveMembersRequest.usernames(this.usernames);
            return groupsRemoveMembersRequest;
        }

        /**
         * Execute removeMembers request
         * @return GroupsRemoveMembersResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> success response </td><td>  -  </td></tr>
         </table>
         */
        public GroupsRemoveMembersResponse execute() throws ApiException {
            GroupsRemoveMembersRequest groupsRemoveMembersRequest = buildBodyParams();
            ApiResponse<GroupsRemoveMembersResponse> localVarResp = removeMembersWithHttpInfo(id, groupsRemoveMembersRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute removeMembers request with HTTP info returned
         * @return ApiResponse&lt;GroupsRemoveMembersResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> success response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GroupsRemoveMembersResponse> executeWithHttpInfo() throws ApiException {
            GroupsRemoveMembersRequest groupsRemoveMembersRequest = buildBodyParams();
            return removeMembersWithHttpInfo(id, groupsRemoveMembersRequest);
        }

        /**
         * Execute removeMembers request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> success response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GroupsRemoveMembersResponse> _callback) throws ApiException {
            GroupsRemoveMembersRequest groupsRemoveMembersRequest = buildBodyParams();
            return removeMembersAsync(id, groupsRemoveMembersRequest, _callback);
        }
    }

    /**
     * Remove group members
     * 
     * @param id  (required)
     * @return RemoveMembersRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success response </td><td>  -  </td></tr>
     </table>
     */
    public RemoveMembersRequestBuilder removeMembers(Integer id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        return new RemoveMembersRequestBuilder(id);
    }
    private okhttp3.Call updateGroupByIdJsonCall(Integer id, GroupsUpdateGroupByIdJsonRequest groupsUpdateGroupByIdJsonRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = groupsUpdateGroupByIdJsonRequest;

        // create path and map variables
        String localVarPath = "/groups/{id}.json"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateGroupByIdJsonValidateBeforeCall(Integer id, GroupsUpdateGroupByIdJsonRequest groupsUpdateGroupByIdJsonRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateGroupByIdJson(Async)");
        }

        return updateGroupByIdJsonCall(id, groupsUpdateGroupByIdJsonRequest, _callback);

    }


    private ApiResponse<GroupsUpdateGroupByIdJsonResponse> updateGroupByIdJsonWithHttpInfo(Integer id, GroupsUpdateGroupByIdJsonRequest groupsUpdateGroupByIdJsonRequest) throws ApiException {
        okhttp3.Call localVarCall = updateGroupByIdJsonValidateBeforeCall(id, groupsUpdateGroupByIdJsonRequest, null);
        Type localVarReturnType = new TypeToken<GroupsUpdateGroupByIdJsonResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateGroupByIdJsonAsync(Integer id, GroupsUpdateGroupByIdJsonRequest groupsUpdateGroupByIdJsonRequest, final ApiCallback<GroupsUpdateGroupByIdJsonResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateGroupByIdJsonValidateBeforeCall(id, groupsUpdateGroupByIdJsonRequest, _callback);
        Type localVarReturnType = new TypeToken<GroupsUpdateGroupByIdJsonResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateGroupByIdJsonRequestBuilder {
        private final GroupsCreateNewGroupRequestGroup group;
        private final Integer id;

        private UpdateGroupByIdJsonRequestBuilder(GroupsCreateNewGroupRequestGroup group, Integer id) {
            this.group = group;
            this.id = id;
        }

        /**
         * Build call for updateGroupByIdJson
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> success response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            GroupsUpdateGroupByIdJsonRequest groupsUpdateGroupByIdJsonRequest = buildBodyParams();
            return updateGroupByIdJsonCall(id, groupsUpdateGroupByIdJsonRequest, _callback);
        }

        private GroupsUpdateGroupByIdJsonRequest buildBodyParams() {
            GroupsUpdateGroupByIdJsonRequest groupsUpdateGroupByIdJsonRequest = new GroupsUpdateGroupByIdJsonRequest();
            groupsUpdateGroupByIdJsonRequest.group(this.group);
            return groupsUpdateGroupByIdJsonRequest;
        }

        /**
         * Execute updateGroupByIdJson request
         * @return GroupsUpdateGroupByIdJsonResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> success response </td><td>  -  </td></tr>
         </table>
         */
        public GroupsUpdateGroupByIdJsonResponse execute() throws ApiException {
            GroupsUpdateGroupByIdJsonRequest groupsUpdateGroupByIdJsonRequest = buildBodyParams();
            ApiResponse<GroupsUpdateGroupByIdJsonResponse> localVarResp = updateGroupByIdJsonWithHttpInfo(id, groupsUpdateGroupByIdJsonRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateGroupByIdJson request with HTTP info returned
         * @return ApiResponse&lt;GroupsUpdateGroupByIdJsonResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> success response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GroupsUpdateGroupByIdJsonResponse> executeWithHttpInfo() throws ApiException {
            GroupsUpdateGroupByIdJsonRequest groupsUpdateGroupByIdJsonRequest = buildBodyParams();
            return updateGroupByIdJsonWithHttpInfo(id, groupsUpdateGroupByIdJsonRequest);
        }

        /**
         * Execute updateGroupByIdJson request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> success response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GroupsUpdateGroupByIdJsonResponse> _callback) throws ApiException {
            GroupsUpdateGroupByIdJsonRequest groupsUpdateGroupByIdJsonRequest = buildBodyParams();
            return updateGroupByIdJsonAsync(id, groupsUpdateGroupByIdJsonRequest, _callback);
        }
    }

    /**
     * Update a group
     * 
     * @param id  (required)
     * @return UpdateGroupByIdJsonRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success response </td><td>  -  </td></tr>
     </table>
     */
    public UpdateGroupByIdJsonRequestBuilder updateGroupByIdJson(GroupsCreateNewGroupRequestGroup group, Integer id) throws IllegalArgumentException {
        if (group == null) throw new IllegalArgumentException("\"group\" is required but got null");
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        return new UpdateGroupByIdJsonRequestBuilder(group, id);
    }
}
