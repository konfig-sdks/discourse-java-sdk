/*
 * Discourse API Documentation
 * This page contains the documentation on how to use Discourse through API calls.  > Note: For any endpoints not listed you can follow the [reverse engineer the Discourse API](https://meta.discourse.org/t/-/20576) guide to figure out how to use an API endpoint.  ### Request Content-Type  The Content-Type for POST and PUT requests can be set to `application/x-www-form-urlencoded`, `multipart/form-data`, or `application/json`.  ### Endpoint Names and Response Content-Type  Most API endpoints provide the same content as their HTML counterparts. For example the URL `/categories` serves a list of categories, the `/categories.json` API provides the same information in JSON format.  Instead of sending API requests to `/categories.json` you may also send them to `/categories` and add an `Accept: application/json` header to the request to get the JSON response. Sending requests with the `Accept` header is necessary if you want to use URLs for related endpoints returned by the API, such as pagination URLs. These URLs are returned without the `.json` prefix so you need to add the header in order to get the correct response format.  ### Authentication  Some endpoints do not require any authentication, pretty much anything else will require you to be authenticated.  To become authenticated you will need to create an API Key from the admin panel.  Once you have your API Key you can pass it in along with your API Username as an HTTP header like this:  ``` curl -X GET \"http://127.0.0.1:3000/admin/users/list/active.json\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" ```  and this is how POST requests will look:  ``` curl -X POST \"http://127.0.0.1:3000/categories\" \\ -H \"Content-Type: multipart/form-data;\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" \\ -F \"name=89853c20-4409-e91a-a8ea-f6cdff96aaaa\" \\ -F \"color=49d9e9\" \\ -F \"text_color=f0fcfd\" ```  ### Boolean values  If an endpoint accepts a boolean be sure to specify it as a lowercase `true` or `false` value unless noted otherwise. 
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.TagsCreateTagGroupRequest;
import com.konfigthis.client.model.TagsCreateTagGroupResponse;
import com.konfigthis.client.model.TagsGetSingleTagGroupResponse;
import com.konfigthis.client.model.TagsGetSpecificTagResponse;
import com.konfigthis.client.model.TagsGetTagGroupsResponse;
import com.konfigthis.client.model.TagsListResponse;
import com.konfigthis.client.model.TagsUpdateTagGroupRequest;
import com.konfigthis.client.model.TagsUpdateTagGroupResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class TagsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TagsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public TagsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createTagGroupCall(TagsCreateTagGroupRequest tagsCreateTagGroupRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = tagsCreateTagGroupRequest;

        // create path and map variables
        String localVarPath = "/tag_groups.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createTagGroupValidateBeforeCall(TagsCreateTagGroupRequest tagsCreateTagGroupRequest, final ApiCallback _callback) throws ApiException {
        return createTagGroupCall(tagsCreateTagGroupRequest, _callback);

    }


    private ApiResponse<TagsCreateTagGroupResponse> createTagGroupWithHttpInfo(TagsCreateTagGroupRequest tagsCreateTagGroupRequest) throws ApiException {
        okhttp3.Call localVarCall = createTagGroupValidateBeforeCall(tagsCreateTagGroupRequest, null);
        Type localVarReturnType = new TypeToken<TagsCreateTagGroupResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createTagGroupAsync(TagsCreateTagGroupRequest tagsCreateTagGroupRequest, final ApiCallback<TagsCreateTagGroupResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createTagGroupValidateBeforeCall(tagsCreateTagGroupRequest, _callback);
        Type localVarReturnType = new TypeToken<TagsCreateTagGroupResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateTagGroupRequestBuilder {
        private final String name;

        private CreateTagGroupRequestBuilder(String name) {
            this.name = name;
        }

        /**
         * Build call for createTagGroup
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> tag group created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TagsCreateTagGroupRequest tagsCreateTagGroupRequest = buildBodyParams();
            return createTagGroupCall(tagsCreateTagGroupRequest, _callback);
        }

        private TagsCreateTagGroupRequest buildBodyParams() {
            TagsCreateTagGroupRequest tagsCreateTagGroupRequest = new TagsCreateTagGroupRequest();
            tagsCreateTagGroupRequest.name(this.name);
            return tagsCreateTagGroupRequest;
        }

        /**
         * Execute createTagGroup request
         * @return TagsCreateTagGroupResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> tag group created </td><td>  -  </td></tr>
         </table>
         */
        public TagsCreateTagGroupResponse execute() throws ApiException {
            TagsCreateTagGroupRequest tagsCreateTagGroupRequest = buildBodyParams();
            ApiResponse<TagsCreateTagGroupResponse> localVarResp = createTagGroupWithHttpInfo(tagsCreateTagGroupRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createTagGroup request with HTTP info returned
         * @return ApiResponse&lt;TagsCreateTagGroupResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> tag group created </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TagsCreateTagGroupResponse> executeWithHttpInfo() throws ApiException {
            TagsCreateTagGroupRequest tagsCreateTagGroupRequest = buildBodyParams();
            return createTagGroupWithHttpInfo(tagsCreateTagGroupRequest);
        }

        /**
         * Execute createTagGroup request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> tag group created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TagsCreateTagGroupResponse> _callback) throws ApiException {
            TagsCreateTagGroupRequest tagsCreateTagGroupRequest = buildBodyParams();
            return createTagGroupAsync(tagsCreateTagGroupRequest, _callback);
        }
    }

    /**
     * Creates a tag group
     * 
     * @return CreateTagGroupRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> tag group created </td><td>  -  </td></tr>
     </table>
     */
    public CreateTagGroupRequestBuilder createTagGroup(String name) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        return new CreateTagGroupRequestBuilder(name);
    }
    private okhttp3.Call getSingleTagGroupCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tag_groups/{id}.json"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSingleTagGroupValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getSingleTagGroup(Async)");
        }

        return getSingleTagGroupCall(id, _callback);

    }


    private ApiResponse<TagsGetSingleTagGroupResponse> getSingleTagGroupWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getSingleTagGroupValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<TagsGetSingleTagGroupResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSingleTagGroupAsync(String id, final ApiCallback<TagsGetSingleTagGroupResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSingleTagGroupValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<TagsGetSingleTagGroupResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSingleTagGroupRequestBuilder {
        private final String id;

        private GetSingleTagGroupRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Build call for getSingleTagGroup
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> notifications </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSingleTagGroupCall(id, _callback);
        }


        /**
         * Execute getSingleTagGroup request
         * @return TagsGetSingleTagGroupResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> notifications </td><td>  -  </td></tr>
         </table>
         */
        public TagsGetSingleTagGroupResponse execute() throws ApiException {
            ApiResponse<TagsGetSingleTagGroupResponse> localVarResp = getSingleTagGroupWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSingleTagGroup request with HTTP info returned
         * @return ApiResponse&lt;TagsGetSingleTagGroupResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> notifications </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TagsGetSingleTagGroupResponse> executeWithHttpInfo() throws ApiException {
            return getSingleTagGroupWithHttpInfo(id);
        }

        /**
         * Execute getSingleTagGroup request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> notifications </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TagsGetSingleTagGroupResponse> _callback) throws ApiException {
            return getSingleTagGroupAsync(id, _callback);
        }
    }

    /**
     * Get a single tag group
     * 
     * @param id  (required)
     * @return GetSingleTagGroupRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> notifications </td><td>  -  </td></tr>
     </table>
     */
    public GetSingleTagGroupRequestBuilder getSingleTagGroup(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new GetSingleTagGroupRequestBuilder(id);
    }
    private okhttp3.Call getSpecificTagCall(String name, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tag/{name}.json"
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSpecificTagValidateBeforeCall(String name, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getSpecificTag(Async)");
        }

        return getSpecificTagCall(name, _callback);

    }


    private ApiResponse<TagsGetSpecificTagResponse> getSpecificTagWithHttpInfo(String name) throws ApiException {
        okhttp3.Call localVarCall = getSpecificTagValidateBeforeCall(name, null);
        Type localVarReturnType = new TypeToken<TagsGetSpecificTagResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSpecificTagAsync(String name, final ApiCallback<TagsGetSpecificTagResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSpecificTagValidateBeforeCall(name, _callback);
        Type localVarReturnType = new TypeToken<TagsGetSpecificTagResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSpecificTagRequestBuilder {
        private final String name;

        private GetSpecificTagRequestBuilder(String name) {
            this.name = name;
        }

        /**
         * Build call for getSpecificTag
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> notifications </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSpecificTagCall(name, _callback);
        }


        /**
         * Execute getSpecificTag request
         * @return TagsGetSpecificTagResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> notifications </td><td>  -  </td></tr>
         </table>
         */
        public TagsGetSpecificTagResponse execute() throws ApiException {
            ApiResponse<TagsGetSpecificTagResponse> localVarResp = getSpecificTagWithHttpInfo(name);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSpecificTag request with HTTP info returned
         * @return ApiResponse&lt;TagsGetSpecificTagResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> notifications </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TagsGetSpecificTagResponse> executeWithHttpInfo() throws ApiException {
            return getSpecificTagWithHttpInfo(name);
        }

        /**
         * Execute getSpecificTag request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> notifications </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TagsGetSpecificTagResponse> _callback) throws ApiException {
            return getSpecificTagAsync(name, _callback);
        }
    }

    /**
     * Get a specific tag
     * 
     * @param name  (required)
     * @return GetSpecificTagRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> notifications </td><td>  -  </td></tr>
     </table>
     */
    public GetSpecificTagRequestBuilder getSpecificTag(String name) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        return new GetSpecificTagRequestBuilder(name);
    }
    private okhttp3.Call getTagGroupsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tag_groups.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTagGroupsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getTagGroupsCall(_callback);

    }


    private ApiResponse<TagsGetTagGroupsResponse> getTagGroupsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getTagGroupsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<TagsGetTagGroupsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getTagGroupsAsync(final ApiCallback<TagsGetTagGroupsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTagGroupsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<TagsGetTagGroupsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetTagGroupsRequestBuilder {

        private GetTagGroupsRequestBuilder() {
        }

        /**
         * Build call for getTagGroups
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> tags </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getTagGroupsCall(_callback);
        }


        /**
         * Execute getTagGroups request
         * @return TagsGetTagGroupsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> tags </td><td>  -  </td></tr>
         </table>
         */
        public TagsGetTagGroupsResponse execute() throws ApiException {
            ApiResponse<TagsGetTagGroupsResponse> localVarResp = getTagGroupsWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getTagGroups request with HTTP info returned
         * @return ApiResponse&lt;TagsGetTagGroupsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> tags </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TagsGetTagGroupsResponse> executeWithHttpInfo() throws ApiException {
            return getTagGroupsWithHttpInfo();
        }

        /**
         * Execute getTagGroups request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> tags </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TagsGetTagGroupsResponse> _callback) throws ApiException {
            return getTagGroupsAsync(_callback);
        }
    }

    /**
     * Get a list of tag groups
     * 
     * @return GetTagGroupsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> tags </td><td>  -  </td></tr>
     </table>
     */
    public GetTagGroupsRequestBuilder getTagGroups() throws IllegalArgumentException {
        return new GetTagGroupsRequestBuilder();
    }
    private okhttp3.Call listCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tags.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return listCall(_callback);

    }


    private ApiResponse<TagsListResponse> listWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = listValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<TagsListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAsync(final ApiCallback<TagsListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<TagsListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListRequestBuilder {

        private ListRequestBuilder() {
        }

        /**
         * Build call for list
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> notifications </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listCall(_callback);
        }


        /**
         * Execute list request
         * @return TagsListResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> notifications </td><td>  -  </td></tr>
         </table>
         */
        public TagsListResponse execute() throws ApiException {
            ApiResponse<TagsListResponse> localVarResp = listWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute list request with HTTP info returned
         * @return ApiResponse&lt;TagsListResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> notifications </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TagsListResponse> executeWithHttpInfo() throws ApiException {
            return listWithHttpInfo();
        }

        /**
         * Execute list request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> notifications </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TagsListResponse> _callback) throws ApiException {
            return listAsync(_callback);
        }
    }

    /**
     * Get a list of tags
     * 
     * @return ListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> notifications </td><td>  -  </td></tr>
     </table>
     */
    public ListRequestBuilder list() throws IllegalArgumentException {
        return new ListRequestBuilder();
    }
    private okhttp3.Call updateTagGroupCall(String id, TagsUpdateTagGroupRequest tagsUpdateTagGroupRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = tagsUpdateTagGroupRequest;

        // create path and map variables
        String localVarPath = "/tag_groups/{id}.json"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateTagGroupValidateBeforeCall(String id, TagsUpdateTagGroupRequest tagsUpdateTagGroupRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateTagGroup(Async)");
        }

        return updateTagGroupCall(id, tagsUpdateTagGroupRequest, _callback);

    }


    private ApiResponse<TagsUpdateTagGroupResponse> updateTagGroupWithHttpInfo(String id, TagsUpdateTagGroupRequest tagsUpdateTagGroupRequest) throws ApiException {
        okhttp3.Call localVarCall = updateTagGroupValidateBeforeCall(id, tagsUpdateTagGroupRequest, null);
        Type localVarReturnType = new TypeToken<TagsUpdateTagGroupResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateTagGroupAsync(String id, TagsUpdateTagGroupRequest tagsUpdateTagGroupRequest, final ApiCallback<TagsUpdateTagGroupResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateTagGroupValidateBeforeCall(id, tagsUpdateTagGroupRequest, _callback);
        Type localVarReturnType = new TypeToken<TagsUpdateTagGroupResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateTagGroupRequestBuilder {
        private final String id;
        private String name;

        private UpdateTagGroupRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Set name
         * @param name  (optional)
         * @return UpdateTagGroupRequestBuilder
         */
        public UpdateTagGroupRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Build call for updateTagGroup
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Tag group updated </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TagsUpdateTagGroupRequest tagsUpdateTagGroupRequest = buildBodyParams();
            return updateTagGroupCall(id, tagsUpdateTagGroupRequest, _callback);
        }

        private TagsUpdateTagGroupRequest buildBodyParams() {
            TagsUpdateTagGroupRequest tagsUpdateTagGroupRequest = new TagsUpdateTagGroupRequest();
            tagsUpdateTagGroupRequest.name(this.name);
            return tagsUpdateTagGroupRequest;
        }

        /**
         * Execute updateTagGroup request
         * @return TagsUpdateTagGroupResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Tag group updated </td><td>  -  </td></tr>
         </table>
         */
        public TagsUpdateTagGroupResponse execute() throws ApiException {
            TagsUpdateTagGroupRequest tagsUpdateTagGroupRequest = buildBodyParams();
            ApiResponse<TagsUpdateTagGroupResponse> localVarResp = updateTagGroupWithHttpInfo(id, tagsUpdateTagGroupRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateTagGroup request with HTTP info returned
         * @return ApiResponse&lt;TagsUpdateTagGroupResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Tag group updated </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TagsUpdateTagGroupResponse> executeWithHttpInfo() throws ApiException {
            TagsUpdateTagGroupRequest tagsUpdateTagGroupRequest = buildBodyParams();
            return updateTagGroupWithHttpInfo(id, tagsUpdateTagGroupRequest);
        }

        /**
         * Execute updateTagGroup request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Tag group updated </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TagsUpdateTagGroupResponse> _callback) throws ApiException {
            TagsUpdateTagGroupRequest tagsUpdateTagGroupRequest = buildBodyParams();
            return updateTagGroupAsync(id, tagsUpdateTagGroupRequest, _callback);
        }
    }

    /**
     * Update tag group
     * 
     * @param id  (required)
     * @return UpdateTagGroupRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Tag group updated </td><td>  -  </td></tr>
     </table>
     */
    public UpdateTagGroupRequestBuilder updateTagGroup(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new UpdateTagGroupRequestBuilder(id);
    }
}
