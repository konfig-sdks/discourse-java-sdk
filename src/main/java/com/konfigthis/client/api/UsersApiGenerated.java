/*
 * Discourse API Documentation
 * This page contains the documentation on how to use Discourse through API calls.  > Note: For any endpoints not listed you can follow the [reverse engineer the Discourse API](https://meta.discourse.org/t/-/20576) guide to figure out how to use an API endpoint.  ### Request Content-Type  The Content-Type for POST and PUT requests can be set to `application/x-www-form-urlencoded`, `multipart/form-data`, or `application/json`.  ### Endpoint Names and Response Content-Type  Most API endpoints provide the same content as their HTML counterparts. For example the URL `/categories` serves a list of categories, the `/categories.json` API provides the same information in JSON format.  Instead of sending API requests to `/categories.json` you may also send them to `/categories` and add an `Accept: application/json` header to the request to get the JSON response. Sending requests with the `Accept` header is necessary if you want to use URLs for related endpoints returned by the API, such as pagination URLs. These URLs are returned without the `.json` prefix so you need to add the header in order to get the correct response format.  ### Authentication  Some endpoints do not require any authentication, pretty much anything else will require you to be authenticated.  To become authenticated you will need to create an API Key from the admin panel.  Once you have your API Key you can pass it in along with your API Username as an HTTP header like this:  ``` curl -X GET \"http://127.0.0.1:3000/admin/users/list/active.json\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" ```  and this is how POST requests will look:  ``` curl -X POST \"http://127.0.0.1:3000/categories\" \\ -H \"Content-Type: multipart/form-data;\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" \\ -F \"name=89853c20-4409-e91a-a8ea-f6cdff96aaaa\" \\ -F \"color=49d9e9\" \\ -F \"text_color=f0fcfd\" ```  ### Boolean values  If an endpoint accepts a boolean be sure to specify it as a lowercase `true` or `false` value unless noted otherwise. 
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.BadgesListUserBadgesResponse;
import java.util.Set;
import com.konfigthis.client.model.UsersActivateUserResponse;
import com.konfigthis.client.model.UsersAnonymizeByIdJsonResponse;
import com.konfigthis.client.model.UsersChangePasswordActionRequest;
import com.konfigthis.client.model.UsersCreateUserRequest;
import com.konfigthis.client.model.UsersCreateUserResponse;
import com.konfigthis.client.model.UsersDeactivateUserResponse;
import com.konfigthis.client.model.UsersDeleteUserByIdJsonRequest;
import com.konfigthis.client.model.UsersDeleteUserByIdJsonResponse;
import com.konfigthis.client.model.UsersGetEmailsResponse;
import com.konfigthis.client.model.UsersGetIdentityProviderExternalIdResponse;
import com.konfigthis.client.model.UsersGetListOfUsersResponseInner;
import com.konfigthis.client.model.UsersGetUserByExternalIdResponse;
import com.konfigthis.client.model.UsersGetUserByIdJsonResponse;
import com.konfigthis.client.model.UsersGetUserByUsernameResponse;
import com.konfigthis.client.model.UsersListPublicUserResponse;
import com.konfigthis.client.model.UsersListUserActionsResponse;
import com.konfigthis.client.model.UsersLogOutUserActionResponse;
import com.konfigthis.client.model.UsersRefreshGravatarPostResponse;
import com.konfigthis.client.model.UsersSendPasswordResetEmailRequest;
import com.konfigthis.client.model.UsersSendPasswordResetEmailResponse;
import com.konfigthis.client.model.UsersSilenceByIdRequest;
import com.konfigthis.client.model.UsersSilenceByIdResponse;
import com.konfigthis.client.model.UsersSuspendByIdJsonRequest;
import com.konfigthis.client.model.UsersSuspendByIdJsonResponse;
import com.konfigthis.client.model.UsersUpdateAvatarRequest;
import com.konfigthis.client.model.UsersUpdateAvatarResponse;
import com.konfigthis.client.model.UsersUpdateEmailPreferencesRequest;
import com.konfigthis.client.model.UsersUpdatePreferencesJsonRequest;
import com.konfigthis.client.model.UsersUpdateUserDetailsRequest;
import com.konfigthis.client.model.UsersUpdateUserDetailsResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class UsersApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public UsersApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public UsersApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call activateUserCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/users/{id}/activate.json"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call activateUserValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling activateUser(Async)");
        }

        return activateUserCall(id, _callback);

    }


    private ApiResponse<UsersActivateUserResponse> activateUserWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = activateUserValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<UsersActivateUserResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call activateUserAsync(Integer id, final ApiCallback<UsersActivateUserResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = activateUserValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<UsersActivateUserResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ActivateUserRequestBuilder {
        private final Integer id;

        private ActivateUserRequestBuilder(Integer id) {
            this.id = id;
        }

        /**
         * Build call for activateUser
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return activateUserCall(id, _callback);
        }


        /**
         * Execute activateUser request
         * @return UsersActivateUserResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
         </table>
         */
        public UsersActivateUserResponse execute() throws ApiException {
            ApiResponse<UsersActivateUserResponse> localVarResp = activateUserWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute activateUser request with HTTP info returned
         * @return ApiResponse&lt;UsersActivateUserResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UsersActivateUserResponse> executeWithHttpInfo() throws ApiException {
            return activateUserWithHttpInfo(id);
        }

        /**
         * Execute activateUser request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UsersActivateUserResponse> _callback) throws ApiException {
            return activateUserAsync(id, _callback);
        }
    }

    /**
     * Activate a user
     * 
     * @param id  (required)
     * @return ActivateUserRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
     </table>
     */
    public ActivateUserRequestBuilder activateUser(Integer id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        return new ActivateUserRequestBuilder(id);
    }
    private okhttp3.Call anonymizeByIdJsonCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/users/{id}/anonymize.json"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call anonymizeByIdJsonValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling anonymizeByIdJson(Async)");
        }

        return anonymizeByIdJsonCall(id, _callback);

    }


    private ApiResponse<UsersAnonymizeByIdJsonResponse> anonymizeByIdJsonWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = anonymizeByIdJsonValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<UsersAnonymizeByIdJsonResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call anonymizeByIdJsonAsync(Integer id, final ApiCallback<UsersAnonymizeByIdJsonResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = anonymizeByIdJsonValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<UsersAnonymizeByIdJsonResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AnonymizeByIdJsonRequestBuilder {
        private final Integer id;

        private AnonymizeByIdJsonRequestBuilder(Integer id) {
            this.id = id;
        }

        /**
         * Build call for anonymizeByIdJson
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return anonymizeByIdJsonCall(id, _callback);
        }


        /**
         * Execute anonymizeByIdJson request
         * @return UsersAnonymizeByIdJsonResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
         </table>
         */
        public UsersAnonymizeByIdJsonResponse execute() throws ApiException {
            ApiResponse<UsersAnonymizeByIdJsonResponse> localVarResp = anonymizeByIdJsonWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute anonymizeByIdJson request with HTTP info returned
         * @return ApiResponse&lt;UsersAnonymizeByIdJsonResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UsersAnonymizeByIdJsonResponse> executeWithHttpInfo() throws ApiException {
            return anonymizeByIdJsonWithHttpInfo(id);
        }

        /**
         * Execute anonymizeByIdJson request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UsersAnonymizeByIdJsonResponse> _callback) throws ApiException {
            return anonymizeByIdJsonAsync(id, _callback);
        }
    }

    /**
     * Anonymize a user
     * 
     * @param id  (required)
     * @return AnonymizeByIdJsonRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
     </table>
     */
    public AnonymizeByIdJsonRequestBuilder anonymizeByIdJson(Integer id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        return new AnonymizeByIdJsonRequestBuilder(id);
    }
    private okhttp3.Call changePasswordActionCall(String token, UsersChangePasswordActionRequest usersChangePasswordActionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = usersChangePasswordActionRequest;

        // create path and map variables
        String localVarPath = "/users/password-reset/{token}.json"
            .replace("{" + "token" + "}", localVarApiClient.escapeString(token.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call changePasswordActionValidateBeforeCall(String token, UsersChangePasswordActionRequest usersChangePasswordActionRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling changePasswordAction(Async)");
        }

        return changePasswordActionCall(token, usersChangePasswordActionRequest, _callback);

    }


    private ApiResponse<Void> changePasswordActionWithHttpInfo(String token, UsersChangePasswordActionRequest usersChangePasswordActionRequest) throws ApiException {
        okhttp3.Call localVarCall = changePasswordActionValidateBeforeCall(token, usersChangePasswordActionRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call changePasswordActionAsync(String token, UsersChangePasswordActionRequest usersChangePasswordActionRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = changePasswordActionValidateBeforeCall(token, usersChangePasswordActionRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class ChangePasswordActionRequestBuilder {
        private final String username;
        private final String password;
        private final String token;

        private ChangePasswordActionRequestBuilder(String username, String password, String token) {
            this.username = username;
            this.password = password;
            this.token = token;
        }

        /**
         * Build call for changePasswordAction
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> success response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UsersChangePasswordActionRequest usersChangePasswordActionRequest = buildBodyParams();
            return changePasswordActionCall(token, usersChangePasswordActionRequest, _callback);
        }

        private UsersChangePasswordActionRequest buildBodyParams() {
            UsersChangePasswordActionRequest usersChangePasswordActionRequest = new UsersChangePasswordActionRequest();
            usersChangePasswordActionRequest.username(this.username);
            usersChangePasswordActionRequest.password(this.password);
            return usersChangePasswordActionRequest;
        }

        /**
         * Execute changePasswordAction request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> success response </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            UsersChangePasswordActionRequest usersChangePasswordActionRequest = buildBodyParams();
            changePasswordActionWithHttpInfo(token, usersChangePasswordActionRequest);
        }

        /**
         * Execute changePasswordAction request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> success response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            UsersChangePasswordActionRequest usersChangePasswordActionRequest = buildBodyParams();
            return changePasswordActionWithHttpInfo(token, usersChangePasswordActionRequest);
        }

        /**
         * Execute changePasswordAction request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> success response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            UsersChangePasswordActionRequest usersChangePasswordActionRequest = buildBodyParams();
            return changePasswordActionAsync(token, usersChangePasswordActionRequest, _callback);
        }
    }

    /**
     * Change password
     * 
     * @param token  (required)
     * @return ChangePasswordActionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success response </td><td>  -  </td></tr>
     </table>
     */
    public ChangePasswordActionRequestBuilder changePasswordAction(String username, String password, String token) throws IllegalArgumentException {
        if (username == null) throw new IllegalArgumentException("\"username\" is required but got null");
            

        if (password == null) throw new IllegalArgumentException("\"password\" is required but got null");
            

        if (token == null) throw new IllegalArgumentException("\"token\" is required but got null");
            

        return new ChangePasswordActionRequestBuilder(username, password, token);
    }
    private okhttp3.Call createUserCall(String apiKey, String apiUsername, UsersCreateUserRequest usersCreateUserRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = usersCreateUserRequest;

        // create path and map variables
        String localVarPath = "/users.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarHeaderParams.put("Api-Key", localVarApiClient.parameterToString(apiKey));
        }

        if (apiUsername != null) {
            localVarHeaderParams.put("Api-Username", localVarApiClient.parameterToString(apiUsername));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createUserValidateBeforeCall(String apiKey, String apiUsername, UsersCreateUserRequest usersCreateUserRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling createUser(Async)");
        }

        // verify the required parameter 'apiUsername' is set
        if (apiUsername == null) {
            throw new ApiException("Missing the required parameter 'apiUsername' when calling createUser(Async)");
        }

        return createUserCall(apiKey, apiUsername, usersCreateUserRequest, _callback);

    }


    private ApiResponse<UsersCreateUserResponse> createUserWithHttpInfo(String apiKey, String apiUsername, UsersCreateUserRequest usersCreateUserRequest) throws ApiException {
        okhttp3.Call localVarCall = createUserValidateBeforeCall(apiKey, apiUsername, usersCreateUserRequest, null);
        Type localVarReturnType = new TypeToken<UsersCreateUserResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createUserAsync(String apiKey, String apiUsername, UsersCreateUserRequest usersCreateUserRequest, final ApiCallback<UsersCreateUserResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createUserValidateBeforeCall(apiKey, apiUsername, usersCreateUserRequest, _callback);
        Type localVarReturnType = new TypeToken<UsersCreateUserResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateUserRequestBuilder {
        private final String name;
        private final String email;
        private final String password;
        private final String username;
        private final String apiKey;
        private final String apiUsername;
        private Boolean active;
        private Boolean approved;
        private Boolean userFields1;
        private Object externalIds;

        private CreateUserRequestBuilder(String name, String email, String password, String username, String apiKey, String apiUsername) {
            this.name = name;
            this.email = email;
            this.password = password;
            this.username = username;
            this.apiKey = apiKey;
            this.apiUsername = apiUsername;
        }

        /**
         * Set active
         * @param active This param requires an api key in the request header or it will be ignored (optional)
         * @return CreateUserRequestBuilder
         */
        public CreateUserRequestBuilder active(Boolean active) {
            this.active = active;
            return this;
        }
        
        /**
         * Set approved
         * @param approved  (optional)
         * @return CreateUserRequestBuilder
         */
        public CreateUserRequestBuilder approved(Boolean approved) {
            this.approved = approved;
            return this;
        }
        
        /**
         * Set userFields1
         * @param userFields1  (optional)
         * @return CreateUserRequestBuilder
         */
        public CreateUserRequestBuilder userFields1(Boolean userFields1) {
            this.userFields1 = userFields1;
            return this;
        }
        
        /**
         * Set externalIds
         * @param externalIds  (optional)
         * @return CreateUserRequestBuilder
         */
        public CreateUserRequestBuilder externalIds(Object externalIds) {
            this.externalIds = externalIds;
            return this;
        }
        
        /**
         * Build call for createUser
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> user created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UsersCreateUserRequest usersCreateUserRequest = buildBodyParams();
            return createUserCall(apiKey, apiUsername, usersCreateUserRequest, _callback);
        }

        private UsersCreateUserRequest buildBodyParams() {
            UsersCreateUserRequest usersCreateUserRequest = new UsersCreateUserRequest();
            usersCreateUserRequest.name(this.name);
            usersCreateUserRequest.email(this.email);
            usersCreateUserRequest.password(this.password);
            usersCreateUserRequest.username(this.username);
            usersCreateUserRequest.active(this.active);
            usersCreateUserRequest.approved(this.approved);
            usersCreateUserRequest.userFields1(this.userFields1);
            usersCreateUserRequest.externalIds(this.externalIds);
            return usersCreateUserRequest;
        }

        /**
         * Execute createUser request
         * @return UsersCreateUserResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> user created </td><td>  -  </td></tr>
         </table>
         */
        public UsersCreateUserResponse execute() throws ApiException {
            UsersCreateUserRequest usersCreateUserRequest = buildBodyParams();
            ApiResponse<UsersCreateUserResponse> localVarResp = createUserWithHttpInfo(apiKey, apiUsername, usersCreateUserRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createUser request with HTTP info returned
         * @return ApiResponse&lt;UsersCreateUserResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> user created </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UsersCreateUserResponse> executeWithHttpInfo() throws ApiException {
            UsersCreateUserRequest usersCreateUserRequest = buildBodyParams();
            return createUserWithHttpInfo(apiKey, apiUsername, usersCreateUserRequest);
        }

        /**
         * Execute createUser request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> user created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UsersCreateUserResponse> _callback) throws ApiException {
            UsersCreateUserRequest usersCreateUserRequest = buildBodyParams();
            return createUserAsync(apiKey, apiUsername, usersCreateUserRequest, _callback);
        }
    }

    /**
     * Creates a user
     * 
     * @param apiKey  (required)
     * @param apiUsername  (required)
     * @return CreateUserRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> user created </td><td>  -  </td></tr>
     </table>
     */
    public CreateUserRequestBuilder createUser(String name, String email, String password, String username, String apiKey, String apiUsername) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        if (email == null) throw new IllegalArgumentException("\"email\" is required but got null");
            

        if (password == null) throw new IllegalArgumentException("\"password\" is required but got null");
            

        if (username == null) throw new IllegalArgumentException("\"username\" is required but got null");
            

        if (apiKey == null) throw new IllegalArgumentException("\"apiKey\" is required but got null");
            

        if (apiUsername == null) throw new IllegalArgumentException("\"apiUsername\" is required but got null");
            

        return new CreateUserRequestBuilder(name, email, password, username, apiKey, apiUsername);
    }
    private okhttp3.Call deactivateUserCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/users/{id}/deactivate.json"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deactivateUserValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deactivateUser(Async)");
        }

        return deactivateUserCall(id, _callback);

    }


    private ApiResponse<UsersDeactivateUserResponse> deactivateUserWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = deactivateUserValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<UsersDeactivateUserResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deactivateUserAsync(Integer id, final ApiCallback<UsersDeactivateUserResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deactivateUserValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<UsersDeactivateUserResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeactivateUserRequestBuilder {
        private final Integer id;

        private DeactivateUserRequestBuilder(Integer id) {
            this.id = id;
        }

        /**
         * Build call for deactivateUser
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deactivateUserCall(id, _callback);
        }


        /**
         * Execute deactivateUser request
         * @return UsersDeactivateUserResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
         </table>
         */
        public UsersDeactivateUserResponse execute() throws ApiException {
            ApiResponse<UsersDeactivateUserResponse> localVarResp = deactivateUserWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute deactivateUser request with HTTP info returned
         * @return ApiResponse&lt;UsersDeactivateUserResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UsersDeactivateUserResponse> executeWithHttpInfo() throws ApiException {
            return deactivateUserWithHttpInfo(id);
        }

        /**
         * Execute deactivateUser request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UsersDeactivateUserResponse> _callback) throws ApiException {
            return deactivateUserAsync(id, _callback);
        }
    }

    /**
     * Deactivate a user
     * 
     * @param id  (required)
     * @return DeactivateUserRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
     </table>
     */
    public DeactivateUserRequestBuilder deactivateUser(Integer id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        return new DeactivateUserRequestBuilder(id);
    }
    private okhttp3.Call deleteUserByIdJsonCall(Integer id, UsersDeleteUserByIdJsonRequest usersDeleteUserByIdJsonRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = usersDeleteUserByIdJsonRequest;

        // create path and map variables
        String localVarPath = "/admin/users/{id}.json"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteUserByIdJsonValidateBeforeCall(Integer id, UsersDeleteUserByIdJsonRequest usersDeleteUserByIdJsonRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteUserByIdJson(Async)");
        }

        return deleteUserByIdJsonCall(id, usersDeleteUserByIdJsonRequest, _callback);

    }


    private ApiResponse<UsersDeleteUserByIdJsonResponse> deleteUserByIdJsonWithHttpInfo(Integer id, UsersDeleteUserByIdJsonRequest usersDeleteUserByIdJsonRequest) throws ApiException {
        okhttp3.Call localVarCall = deleteUserByIdJsonValidateBeforeCall(id, usersDeleteUserByIdJsonRequest, null);
        Type localVarReturnType = new TypeToken<UsersDeleteUserByIdJsonResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteUserByIdJsonAsync(Integer id, UsersDeleteUserByIdJsonRequest usersDeleteUserByIdJsonRequest, final ApiCallback<UsersDeleteUserByIdJsonResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteUserByIdJsonValidateBeforeCall(id, usersDeleteUserByIdJsonRequest, _callback);
        Type localVarReturnType = new TypeToken<UsersDeleteUserByIdJsonResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeleteUserByIdJsonRequestBuilder {
        private final Integer id;
        private Boolean deletePosts;
        private Boolean blockEmail;
        private Boolean blockUrls;
        private Boolean blockIp;

        private DeleteUserByIdJsonRequestBuilder(Integer id) {
            this.id = id;
        }

        /**
         * Set deletePosts
         * @param deletePosts  (optional)
         * @return DeleteUserByIdJsonRequestBuilder
         */
        public DeleteUserByIdJsonRequestBuilder deletePosts(Boolean deletePosts) {
            this.deletePosts = deletePosts;
            return this;
        }
        
        /**
         * Set blockEmail
         * @param blockEmail  (optional)
         * @return DeleteUserByIdJsonRequestBuilder
         */
        public DeleteUserByIdJsonRequestBuilder blockEmail(Boolean blockEmail) {
            this.blockEmail = blockEmail;
            return this;
        }
        
        /**
         * Set blockUrls
         * @param blockUrls  (optional)
         * @return DeleteUserByIdJsonRequestBuilder
         */
        public DeleteUserByIdJsonRequestBuilder blockUrls(Boolean blockUrls) {
            this.blockUrls = blockUrls;
            return this;
        }
        
        /**
         * Set blockIp
         * @param blockIp  (optional)
         * @return DeleteUserByIdJsonRequestBuilder
         */
        public DeleteUserByIdJsonRequestBuilder blockIp(Boolean blockIp) {
            this.blockIp = blockIp;
            return this;
        }
        
        /**
         * Build call for deleteUserByIdJson
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UsersDeleteUserByIdJsonRequest usersDeleteUserByIdJsonRequest = buildBodyParams();
            return deleteUserByIdJsonCall(id, usersDeleteUserByIdJsonRequest, _callback);
        }

        private UsersDeleteUserByIdJsonRequest buildBodyParams() {
            UsersDeleteUserByIdJsonRequest usersDeleteUserByIdJsonRequest = new UsersDeleteUserByIdJsonRequest();
            usersDeleteUserByIdJsonRequest.deletePosts(this.deletePosts);
            usersDeleteUserByIdJsonRequest.blockEmail(this.blockEmail);
            usersDeleteUserByIdJsonRequest.blockUrls(this.blockUrls);
            usersDeleteUserByIdJsonRequest.blockIp(this.blockIp);
            return usersDeleteUserByIdJsonRequest;
        }

        /**
         * Execute deleteUserByIdJson request
         * @return UsersDeleteUserByIdJsonResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
         </table>
         */
        public UsersDeleteUserByIdJsonResponse execute() throws ApiException {
            UsersDeleteUserByIdJsonRequest usersDeleteUserByIdJsonRequest = buildBodyParams();
            ApiResponse<UsersDeleteUserByIdJsonResponse> localVarResp = deleteUserByIdJsonWithHttpInfo(id, usersDeleteUserByIdJsonRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute deleteUserByIdJson request with HTTP info returned
         * @return ApiResponse&lt;UsersDeleteUserByIdJsonResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UsersDeleteUserByIdJsonResponse> executeWithHttpInfo() throws ApiException {
            UsersDeleteUserByIdJsonRequest usersDeleteUserByIdJsonRequest = buildBodyParams();
            return deleteUserByIdJsonWithHttpInfo(id, usersDeleteUserByIdJsonRequest);
        }

        /**
         * Execute deleteUserByIdJson request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UsersDeleteUserByIdJsonResponse> _callback) throws ApiException {
            UsersDeleteUserByIdJsonRequest usersDeleteUserByIdJsonRequest = buildBodyParams();
            return deleteUserByIdJsonAsync(id, usersDeleteUserByIdJsonRequest, _callback);
        }
    }

    /**
     * Delete a user
     * 
     * @param id  (required)
     * @return DeleteUserByIdJsonRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
     </table>
     */
    public DeleteUserByIdJsonRequestBuilder deleteUserByIdJson(Integer id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        return new DeleteUserByIdJsonRequestBuilder(id);
    }
    private okhttp3.Call getEmailsCall(String username, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/u/{username}/emails.json"
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEmailsValidateBeforeCall(String username, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling getEmails(Async)");
        }

        return getEmailsCall(username, _callback);

    }


    private ApiResponse<UsersGetEmailsResponse> getEmailsWithHttpInfo(String username) throws ApiException {
        okhttp3.Call localVarCall = getEmailsValidateBeforeCall(username, null);
        Type localVarReturnType = new TypeToken<UsersGetEmailsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getEmailsAsync(String username, final ApiCallback<UsersGetEmailsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEmailsValidateBeforeCall(username, _callback);
        Type localVarReturnType = new TypeToken<UsersGetEmailsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetEmailsRequestBuilder {
        private final String username;

        private GetEmailsRequestBuilder(String username) {
            this.username = username;
        }

        /**
         * Build call for getEmails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> success response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getEmailsCall(username, _callback);
        }


        /**
         * Execute getEmails request
         * @return UsersGetEmailsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> success response </td><td>  -  </td></tr>
         </table>
         */
        public UsersGetEmailsResponse execute() throws ApiException {
            ApiResponse<UsersGetEmailsResponse> localVarResp = getEmailsWithHttpInfo(username);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getEmails request with HTTP info returned
         * @return ApiResponse&lt;UsersGetEmailsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> success response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UsersGetEmailsResponse> executeWithHttpInfo() throws ApiException {
            return getEmailsWithHttpInfo(username);
        }

        /**
         * Execute getEmails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> success response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UsersGetEmailsResponse> _callback) throws ApiException {
            return getEmailsAsync(username, _callback);
        }
    }

    /**
     * Get email addresses belonging to a user
     * 
     * @param username  (required)
     * @return GetEmailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success response </td><td>  -  </td></tr>
     </table>
     */
    public GetEmailsRequestBuilder getEmails(String username) throws IllegalArgumentException {
        if (username == null) throw new IllegalArgumentException("\"username\" is required but got null");
            

        return new GetEmailsRequestBuilder(username);
    }
    private okhttp3.Call getIdentityProviderExternalIdCall(String apiKey, String apiUsername, String provider, String externalId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/u/by-external/{provider}/{external_id}.json"
            .replace("{" + "provider" + "}", localVarApiClient.escapeString(provider.toString()))
            .replace("{" + "external_id" + "}", localVarApiClient.escapeString(externalId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarHeaderParams.put("Api-Key", localVarApiClient.parameterToString(apiKey));
        }

        if (apiUsername != null) {
            localVarHeaderParams.put("Api-Username", localVarApiClient.parameterToString(apiUsername));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getIdentityProviderExternalIdValidateBeforeCall(String apiKey, String apiUsername, String provider, String externalId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling getIdentityProviderExternalId(Async)");
        }

        // verify the required parameter 'apiUsername' is set
        if (apiUsername == null) {
            throw new ApiException("Missing the required parameter 'apiUsername' when calling getIdentityProviderExternalId(Async)");
        }

        // verify the required parameter 'provider' is set
        if (provider == null) {
            throw new ApiException("Missing the required parameter 'provider' when calling getIdentityProviderExternalId(Async)");
        }

        // verify the required parameter 'externalId' is set
        if (externalId == null) {
            throw new ApiException("Missing the required parameter 'externalId' when calling getIdentityProviderExternalId(Async)");
        }

        return getIdentityProviderExternalIdCall(apiKey, apiUsername, provider, externalId, _callback);

    }


    private ApiResponse<UsersGetIdentityProviderExternalIdResponse> getIdentityProviderExternalIdWithHttpInfo(String apiKey, String apiUsername, String provider, String externalId) throws ApiException {
        okhttp3.Call localVarCall = getIdentityProviderExternalIdValidateBeforeCall(apiKey, apiUsername, provider, externalId, null);
        Type localVarReturnType = new TypeToken<UsersGetIdentityProviderExternalIdResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getIdentityProviderExternalIdAsync(String apiKey, String apiUsername, String provider, String externalId, final ApiCallback<UsersGetIdentityProviderExternalIdResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getIdentityProviderExternalIdValidateBeforeCall(apiKey, apiUsername, provider, externalId, _callback);
        Type localVarReturnType = new TypeToken<UsersGetIdentityProviderExternalIdResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetIdentityProviderExternalIdRequestBuilder {
        private final String apiKey;
        private final String apiUsername;
        private final String provider;
        private final String externalId;

        private GetIdentityProviderExternalIdRequestBuilder(String apiKey, String apiUsername, String provider, String externalId) {
            this.apiKey = apiKey;
            this.apiUsername = apiUsername;
            this.provider = provider;
            this.externalId = externalId;
        }

        /**
         * Build call for getIdentityProviderExternalId
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> user response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getIdentityProviderExternalIdCall(apiKey, apiUsername, provider, externalId, _callback);
        }


        /**
         * Execute getIdentityProviderExternalId request
         * @return UsersGetIdentityProviderExternalIdResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> user response </td><td>  -  </td></tr>
         </table>
         */
        public UsersGetIdentityProviderExternalIdResponse execute() throws ApiException {
            ApiResponse<UsersGetIdentityProviderExternalIdResponse> localVarResp = getIdentityProviderExternalIdWithHttpInfo(apiKey, apiUsername, provider, externalId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getIdentityProviderExternalId request with HTTP info returned
         * @return ApiResponse&lt;UsersGetIdentityProviderExternalIdResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> user response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UsersGetIdentityProviderExternalIdResponse> executeWithHttpInfo() throws ApiException {
            return getIdentityProviderExternalIdWithHttpInfo(apiKey, apiUsername, provider, externalId);
        }

        /**
         * Execute getIdentityProviderExternalId request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> user response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UsersGetIdentityProviderExternalIdResponse> _callback) throws ApiException {
            return getIdentityProviderExternalIdAsync(apiKey, apiUsername, provider, externalId, _callback);
        }
    }

    /**
     * Get a user by identity provider external ID
     * 
     * @param apiKey  (required)
     * @param apiUsername  (required)
     * @param provider Authentication provider name. Can be found in the provider callback URL: &#x60;/auth/{provider}/callback&#x60; (required)
     * @param externalId  (required)
     * @return GetIdentityProviderExternalIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> user response </td><td>  -  </td></tr>
     </table>
     */
    public GetIdentityProviderExternalIdRequestBuilder getIdentityProviderExternalId(String apiKey, String apiUsername, String provider, String externalId) throws IllegalArgumentException {
        if (apiKey == null) throw new IllegalArgumentException("\"apiKey\" is required but got null");
            

        if (apiUsername == null) throw new IllegalArgumentException("\"apiUsername\" is required but got null");
            

        if (provider == null) throw new IllegalArgumentException("\"provider\" is required but got null");
            

        if (externalId == null) throw new IllegalArgumentException("\"externalId\" is required but got null");
            

        return new GetIdentityProviderExternalIdRequestBuilder(apiKey, apiUsername, provider, externalId);
    }
    private okhttp3.Call getListOfUsersCall(String flag, String order, String asc, Integer page, Boolean showEmails, Boolean stats, String email, String ip, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/users/list/{flag}.json"
            .replace("{" + "flag" + "}", localVarApiClient.escapeString(flag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        if (asc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asc", asc));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (showEmails != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("show_emails", showEmails));
        }

        if (stats != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("stats", stats));
        }

        if (email != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("email", email));
        }

        if (ip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ip", ip));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getListOfUsersValidateBeforeCall(String flag, String order, String asc, Integer page, Boolean showEmails, Boolean stats, String email, String ip, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'flag' is set
        if (flag == null) {
            throw new ApiException("Missing the required parameter 'flag' when calling getListOfUsers(Async)");
        }

        return getListOfUsersCall(flag, order, asc, page, showEmails, stats, email, ip, _callback);

    }


    private ApiResponse<Set<UsersGetListOfUsersResponseInner>> getListOfUsersWithHttpInfo(String flag, String order, String asc, Integer page, Boolean showEmails, Boolean stats, String email, String ip) throws ApiException {
        okhttp3.Call localVarCall = getListOfUsersValidateBeforeCall(flag, order, asc, page, showEmails, stats, email, ip, null);
        Type localVarReturnType = new TypeToken<Set<UsersGetListOfUsersResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getListOfUsersAsync(String flag, String order, String asc, Integer page, Boolean showEmails, Boolean stats, String email, String ip, final ApiCallback<Set<UsersGetListOfUsersResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getListOfUsersValidateBeforeCall(flag, order, asc, page, showEmails, stats, email, ip, _callback);
        Type localVarReturnType = new TypeToken<Set<UsersGetListOfUsersResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetListOfUsersRequestBuilder {
        private final String flag;
        private String order;
        private String asc;
        private Integer page;
        private Boolean showEmails;
        private Boolean stats;
        private String email;
        private String ip;

        private GetListOfUsersRequestBuilder(String flag) {
            this.flag = flag;
        }

        /**
         * Set order
         * @param order  (optional)
         * @return GetListOfUsersRequestBuilder
         */
        public GetListOfUsersRequestBuilder order(String order) {
            this.order = order;
            return this;
        }
        
        /**
         * Set asc
         * @param asc  (optional)
         * @return GetListOfUsersRequestBuilder
         */
        public GetListOfUsersRequestBuilder asc(String asc) {
            this.asc = asc;
            return this;
        }
        
        /**
         * Set page
         * @param page  (optional)
         * @return GetListOfUsersRequestBuilder
         */
        public GetListOfUsersRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set showEmails
         * @param showEmails Include user email addresses in response. These requests will be logged in the staff action logs. (optional)
         * @return GetListOfUsersRequestBuilder
         */
        public GetListOfUsersRequestBuilder showEmails(Boolean showEmails) {
            this.showEmails = showEmails;
            return this;
        }
        
        /**
         * Set stats
         * @param stats Include user stats information (optional)
         * @return GetListOfUsersRequestBuilder
         */
        public GetListOfUsersRequestBuilder stats(Boolean stats) {
            this.stats = stats;
            return this;
        }
        
        /**
         * Set email
         * @param email Filter to the user with this email address (optional)
         * @return GetListOfUsersRequestBuilder
         */
        public GetListOfUsersRequestBuilder email(String email) {
            this.email = email;
            return this;
        }
        
        /**
         * Set ip
         * @param ip Filter to users with this IP address (optional)
         * @return GetListOfUsersRequestBuilder
         */
        public GetListOfUsersRequestBuilder ip(String ip) {
            this.ip = ip;
            return this;
        }
        
        /**
         * Build call for getListOfUsers
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getListOfUsersCall(flag, order, asc, page, showEmails, stats, email, ip, _callback);
        }


        /**
         * Execute getListOfUsers request
         * @return Set&lt;UsersGetListOfUsersResponseInner&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
         </table>
         */
        public Set<UsersGetListOfUsersResponseInner> execute() throws ApiException {
            ApiResponse<Set<UsersGetListOfUsersResponseInner>> localVarResp = getListOfUsersWithHttpInfo(flag, order, asc, page, showEmails, stats, email, ip);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getListOfUsers request with HTTP info returned
         * @return ApiResponse&lt;Set&lt;UsersGetListOfUsersResponseInner&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Set<UsersGetListOfUsersResponseInner>> executeWithHttpInfo() throws ApiException {
            return getListOfUsersWithHttpInfo(flag, order, asc, page, showEmails, stats, email, ip);
        }

        /**
         * Execute getListOfUsers request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Set<UsersGetListOfUsersResponseInner>> _callback) throws ApiException {
            return getListOfUsersAsync(flag, order, asc, page, showEmails, stats, email, ip, _callback);
        }
    }

    /**
     * Get a list of users
     * 
     * @param flag  (required)
     * @return GetListOfUsersRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
     </table>
     */
    public GetListOfUsersRequestBuilder getListOfUsers(String flag) throws IllegalArgumentException {
        if (flag == null) throw new IllegalArgumentException("\"flag\" is required but got null");
            

        return new GetListOfUsersRequestBuilder(flag);
    }
    private okhttp3.Call getUserByExternalIdCall(String apiKey, String apiUsername, String externalId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/u/by-external/{external_id}.json"
            .replace("{" + "external_id" + "}", localVarApiClient.escapeString(externalId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarHeaderParams.put("Api-Key", localVarApiClient.parameterToString(apiKey));
        }

        if (apiUsername != null) {
            localVarHeaderParams.put("Api-Username", localVarApiClient.parameterToString(apiUsername));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserByExternalIdValidateBeforeCall(String apiKey, String apiUsername, String externalId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling getUserByExternalId(Async)");
        }

        // verify the required parameter 'apiUsername' is set
        if (apiUsername == null) {
            throw new ApiException("Missing the required parameter 'apiUsername' when calling getUserByExternalId(Async)");
        }

        // verify the required parameter 'externalId' is set
        if (externalId == null) {
            throw new ApiException("Missing the required parameter 'externalId' when calling getUserByExternalId(Async)");
        }

        return getUserByExternalIdCall(apiKey, apiUsername, externalId, _callback);

    }


    private ApiResponse<UsersGetUserByExternalIdResponse> getUserByExternalIdWithHttpInfo(String apiKey, String apiUsername, String externalId) throws ApiException {
        okhttp3.Call localVarCall = getUserByExternalIdValidateBeforeCall(apiKey, apiUsername, externalId, null);
        Type localVarReturnType = new TypeToken<UsersGetUserByExternalIdResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getUserByExternalIdAsync(String apiKey, String apiUsername, String externalId, final ApiCallback<UsersGetUserByExternalIdResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserByExternalIdValidateBeforeCall(apiKey, apiUsername, externalId, _callback);
        Type localVarReturnType = new TypeToken<UsersGetUserByExternalIdResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetUserByExternalIdRequestBuilder {
        private final String apiKey;
        private final String apiUsername;
        private final String externalId;

        private GetUserByExternalIdRequestBuilder(String apiKey, String apiUsername, String externalId) {
            this.apiKey = apiKey;
            this.apiUsername = apiUsername;
            this.externalId = externalId;
        }

        /**
         * Build call for getUserByExternalId
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> user response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getUserByExternalIdCall(apiKey, apiUsername, externalId, _callback);
        }


        /**
         * Execute getUserByExternalId request
         * @return UsersGetUserByExternalIdResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> user response </td><td>  -  </td></tr>
         </table>
         */
        public UsersGetUserByExternalIdResponse execute() throws ApiException {
            ApiResponse<UsersGetUserByExternalIdResponse> localVarResp = getUserByExternalIdWithHttpInfo(apiKey, apiUsername, externalId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getUserByExternalId request with HTTP info returned
         * @return ApiResponse&lt;UsersGetUserByExternalIdResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> user response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UsersGetUserByExternalIdResponse> executeWithHttpInfo() throws ApiException {
            return getUserByExternalIdWithHttpInfo(apiKey, apiUsername, externalId);
        }

        /**
         * Execute getUserByExternalId request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> user response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UsersGetUserByExternalIdResponse> _callback) throws ApiException {
            return getUserByExternalIdAsync(apiKey, apiUsername, externalId, _callback);
        }
    }

    /**
     * Get a user by external_id
     * 
     * @param apiKey  (required)
     * @param apiUsername  (required)
     * @param externalId  (required)
     * @return GetUserByExternalIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> user response </td><td>  -  </td></tr>
     </table>
     */
    public GetUserByExternalIdRequestBuilder getUserByExternalId(String apiKey, String apiUsername, String externalId) throws IllegalArgumentException {
        if (apiKey == null) throw new IllegalArgumentException("\"apiKey\" is required but got null");
            

        if (apiUsername == null) throw new IllegalArgumentException("\"apiUsername\" is required but got null");
            

        if (externalId == null) throw new IllegalArgumentException("\"externalId\" is required but got null");
            

        return new GetUserByExternalIdRequestBuilder(apiKey, apiUsername, externalId);
    }
    private okhttp3.Call getUserByIdJsonCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/users/{id}.json"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserByIdJsonValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getUserByIdJson(Async)");
        }

        return getUserByIdJsonCall(id, _callback);

    }


    private ApiResponse<UsersGetUserByIdJsonResponse> getUserByIdJsonWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = getUserByIdJsonValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<UsersGetUserByIdJsonResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getUserByIdJsonAsync(Integer id, final ApiCallback<UsersGetUserByIdJsonResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserByIdJsonValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<UsersGetUserByIdJsonResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetUserByIdJsonRequestBuilder {
        private final Integer id;

        private GetUserByIdJsonRequestBuilder(Integer id) {
            this.id = id;
        }

        /**
         * Build call for getUserByIdJson
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getUserByIdJsonCall(id, _callback);
        }


        /**
         * Execute getUserByIdJson request
         * @return UsersGetUserByIdJsonResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
         </table>
         */
        public UsersGetUserByIdJsonResponse execute() throws ApiException {
            ApiResponse<UsersGetUserByIdJsonResponse> localVarResp = getUserByIdJsonWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getUserByIdJson request with HTTP info returned
         * @return ApiResponse&lt;UsersGetUserByIdJsonResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UsersGetUserByIdJsonResponse> executeWithHttpInfo() throws ApiException {
            return getUserByIdJsonWithHttpInfo(id);
        }

        /**
         * Execute getUserByIdJson request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UsersGetUserByIdJsonResponse> _callback) throws ApiException {
            return getUserByIdJsonAsync(id, _callback);
        }
    }

    /**
     * Get a user by id
     * 
     * @param id  (required)
     * @return GetUserByIdJsonRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
     </table>
     */
    public GetUserByIdJsonRequestBuilder getUserByIdJson(Integer id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        return new GetUserByIdJsonRequestBuilder(id);
    }
    private okhttp3.Call getUserByUsernameCall(String apiKey, String apiUsername, String username, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/u/{username}.json"
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarHeaderParams.put("Api-Key", localVarApiClient.parameterToString(apiKey));
        }

        if (apiUsername != null) {
            localVarHeaderParams.put("Api-Username", localVarApiClient.parameterToString(apiUsername));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserByUsernameValidateBeforeCall(String apiKey, String apiUsername, String username, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling getUserByUsername(Async)");
        }

        // verify the required parameter 'apiUsername' is set
        if (apiUsername == null) {
            throw new ApiException("Missing the required parameter 'apiUsername' when calling getUserByUsername(Async)");
        }

        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling getUserByUsername(Async)");
        }

        return getUserByUsernameCall(apiKey, apiUsername, username, _callback);

    }


    private ApiResponse<UsersGetUserByUsernameResponse> getUserByUsernameWithHttpInfo(String apiKey, String apiUsername, String username) throws ApiException {
        okhttp3.Call localVarCall = getUserByUsernameValidateBeforeCall(apiKey, apiUsername, username, null);
        Type localVarReturnType = new TypeToken<UsersGetUserByUsernameResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getUserByUsernameAsync(String apiKey, String apiUsername, String username, final ApiCallback<UsersGetUserByUsernameResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserByUsernameValidateBeforeCall(apiKey, apiUsername, username, _callback);
        Type localVarReturnType = new TypeToken<UsersGetUserByUsernameResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetUserByUsernameRequestBuilder {
        private final String apiKey;
        private final String apiUsername;
        private final String username;

        private GetUserByUsernameRequestBuilder(String apiKey, String apiUsername, String username) {
            this.apiKey = apiKey;
            this.apiUsername = apiUsername;
            this.username = username;
        }

        /**
         * Build call for getUserByUsername
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> user response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getUserByUsernameCall(apiKey, apiUsername, username, _callback);
        }


        /**
         * Execute getUserByUsername request
         * @return UsersGetUserByUsernameResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> user response </td><td>  -  </td></tr>
         </table>
         */
        public UsersGetUserByUsernameResponse execute() throws ApiException {
            ApiResponse<UsersGetUserByUsernameResponse> localVarResp = getUserByUsernameWithHttpInfo(apiKey, apiUsername, username);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getUserByUsername request with HTTP info returned
         * @return ApiResponse&lt;UsersGetUserByUsernameResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> user response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UsersGetUserByUsernameResponse> executeWithHttpInfo() throws ApiException {
            return getUserByUsernameWithHttpInfo(apiKey, apiUsername, username);
        }

        /**
         * Execute getUserByUsername request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> user response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UsersGetUserByUsernameResponse> _callback) throws ApiException {
            return getUserByUsernameAsync(apiKey, apiUsername, username, _callback);
        }
    }

    /**
     * Get a single user by username
     * 
     * @param apiKey  (required)
     * @param apiUsername  (required)
     * @param username  (required)
     * @return GetUserByUsernameRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> user response </td><td>  -  </td></tr>
     </table>
     */
    public GetUserByUsernameRequestBuilder getUserByUsername(String apiKey, String apiUsername, String username) throws IllegalArgumentException {
        if (apiKey == null) throw new IllegalArgumentException("\"apiKey\" is required but got null");
            

        if (apiUsername == null) throw new IllegalArgumentException("\"apiUsername\" is required but got null");
            

        if (username == null) throw new IllegalArgumentException("\"username\" is required but got null");
            

        return new GetUserByUsernameRequestBuilder(apiKey, apiUsername, username);
    }
    private okhttp3.Call listPublicUserCall(String period, String order, String asc, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/directory_items.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (period != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("period", period));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        if (asc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asc", asc));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listPublicUserValidateBeforeCall(String period, String order, String asc, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'period' is set
        if (period == null) {
            throw new ApiException("Missing the required parameter 'period' when calling listPublicUser(Async)");
        }

        // verify the required parameter 'order' is set
        if (order == null) {
            throw new ApiException("Missing the required parameter 'order' when calling listPublicUser(Async)");
        }

        return listPublicUserCall(period, order, asc, page, _callback);

    }


    private ApiResponse<UsersListPublicUserResponse> listPublicUserWithHttpInfo(String period, String order, String asc, Integer page) throws ApiException {
        okhttp3.Call localVarCall = listPublicUserValidateBeforeCall(period, order, asc, page, null);
        Type localVarReturnType = new TypeToken<UsersListPublicUserResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listPublicUserAsync(String period, String order, String asc, Integer page, final ApiCallback<UsersListPublicUserResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listPublicUserValidateBeforeCall(period, order, asc, page, _callback);
        Type localVarReturnType = new TypeToken<UsersListPublicUserResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListPublicUserRequestBuilder {
        private final String period;
        private final String order;
        private String asc;
        private Integer page;

        private ListPublicUserRequestBuilder(String period, String order) {
            this.period = period;
            this.order = order;
        }

        /**
         * Set asc
         * @param asc  (optional)
         * @return ListPublicUserRequestBuilder
         */
        public ListPublicUserRequestBuilder asc(String asc) {
            this.asc = asc;
            return this;
        }
        
        /**
         * Set page
         * @param page  (optional)
         * @return ListPublicUserRequestBuilder
         */
        public ListPublicUserRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Build call for listPublicUser
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> directory items response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listPublicUserCall(period, order, asc, page, _callback);
        }


        /**
         * Execute listPublicUser request
         * @return UsersListPublicUserResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> directory items response </td><td>  -  </td></tr>
         </table>
         */
        public UsersListPublicUserResponse execute() throws ApiException {
            ApiResponse<UsersListPublicUserResponse> localVarResp = listPublicUserWithHttpInfo(period, order, asc, page);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listPublicUser request with HTTP info returned
         * @return ApiResponse&lt;UsersListPublicUserResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> directory items response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UsersListPublicUserResponse> executeWithHttpInfo() throws ApiException {
            return listPublicUserWithHttpInfo(period, order, asc, page);
        }

        /**
         * Execute listPublicUser request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> directory items response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UsersListPublicUserResponse> _callback) throws ApiException {
            return listPublicUserAsync(period, order, asc, page, _callback);
        }
    }

    /**
     * Get a public list of users
     * 
     * @param period  (required)
     * @param order  (required)
     * @return ListPublicUserRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> directory items response </td><td>  -  </td></tr>
     </table>
     */
    public ListPublicUserRequestBuilder listPublicUser(String period, String order) throws IllegalArgumentException {
        if (period == null) throw new IllegalArgumentException("\"period\" is required but got null");
            

        if (order == null) throw new IllegalArgumentException("\"order\" is required but got null");
            

        return new ListPublicUserRequestBuilder(period, order);
    }
    private okhttp3.Call listUserActionsCall(Integer offset, String username, String filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user_actions.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (username != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("username", username));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listUserActionsValidateBeforeCall(Integer offset, String username, String filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'offset' is set
        if (offset == null) {
            throw new ApiException("Missing the required parameter 'offset' when calling listUserActions(Async)");
        }

        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling listUserActions(Async)");
        }

        // verify the required parameter 'filter' is set
        if (filter == null) {
            throw new ApiException("Missing the required parameter 'filter' when calling listUserActions(Async)");
        }

        return listUserActionsCall(offset, username, filter, _callback);

    }


    private ApiResponse<UsersListUserActionsResponse> listUserActionsWithHttpInfo(Integer offset, String username, String filter) throws ApiException {
        okhttp3.Call localVarCall = listUserActionsValidateBeforeCall(offset, username, filter, null);
        Type localVarReturnType = new TypeToken<UsersListUserActionsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listUserActionsAsync(Integer offset, String username, String filter, final ApiCallback<UsersListUserActionsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listUserActionsValidateBeforeCall(offset, username, filter, _callback);
        Type localVarReturnType = new TypeToken<UsersListUserActionsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListUserActionsRequestBuilder {
        private final Integer offset;
        private final String username;
        private final String filter;

        private ListUserActionsRequestBuilder(Integer offset, String username, String filter) {
            this.offset = offset;
            this.username = username;
            this.filter = filter;
        }

        /**
         * Build call for listUserActions
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listUserActionsCall(offset, username, filter, _callback);
        }


        /**
         * Execute listUserActions request
         * @return UsersListUserActionsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
         </table>
         */
        public UsersListUserActionsResponse execute() throws ApiException {
            ApiResponse<UsersListUserActionsResponse> localVarResp = listUserActionsWithHttpInfo(offset, username, filter);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listUserActions request with HTTP info returned
         * @return ApiResponse&lt;UsersListUserActionsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UsersListUserActionsResponse> executeWithHttpInfo() throws ApiException {
            return listUserActionsWithHttpInfo(offset, username, filter);
        }

        /**
         * Execute listUserActions request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UsersListUserActionsResponse> _callback) throws ApiException {
            return listUserActionsAsync(offset, username, filter, _callback);
        }
    }

    /**
     * Get a list of user actions
     * 
     * @param offset  (required)
     * @param username  (required)
     * @param filter  (required)
     * @return ListUserActionsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
     </table>
     */
    public ListUserActionsRequestBuilder listUserActions(Integer offset, String username, String filter) throws IllegalArgumentException {
        if (offset == null) throw new IllegalArgumentException("\"offset\" is required but got null");
        if (username == null) throw new IllegalArgumentException("\"username\" is required but got null");
            

        if (filter == null) throw new IllegalArgumentException("\"filter\" is required but got null");
            

        return new ListUserActionsRequestBuilder(offset, username, filter);
    }
    private okhttp3.Call listUserBadgesCall(String username, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user-badges/{username}.json"
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listUserBadgesValidateBeforeCall(String username, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling listUserBadges(Async)");
        }

        return listUserBadgesCall(username, _callback);

    }


    private ApiResponse<BadgesListUserBadgesResponse> listUserBadgesWithHttpInfo(String username) throws ApiException {
        okhttp3.Call localVarCall = listUserBadgesValidateBeforeCall(username, null);
        Type localVarReturnType = new TypeToken<BadgesListUserBadgesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listUserBadgesAsync(String username, final ApiCallback<BadgesListUserBadgesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listUserBadgesValidateBeforeCall(username, _callback);
        Type localVarReturnType = new TypeToken<BadgesListUserBadgesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListUserBadgesRequestBuilder {
        private final String username;

        private ListUserBadgesRequestBuilder(String username) {
            this.username = username;
        }

        /**
         * Build call for listUserBadges
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> success response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listUserBadgesCall(username, _callback);
        }


        /**
         * Execute listUserBadges request
         * @return BadgesListUserBadgesResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> success response </td><td>  -  </td></tr>
         </table>
         */
        public BadgesListUserBadgesResponse execute() throws ApiException {
            ApiResponse<BadgesListUserBadgesResponse> localVarResp = listUserBadgesWithHttpInfo(username);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listUserBadges request with HTTP info returned
         * @return ApiResponse&lt;BadgesListUserBadgesResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> success response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<BadgesListUserBadgesResponse> executeWithHttpInfo() throws ApiException {
            return listUserBadgesWithHttpInfo(username);
        }

        /**
         * Execute listUserBadges request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> success response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<BadgesListUserBadgesResponse> _callback) throws ApiException {
            return listUserBadgesAsync(username, _callback);
        }
    }

    /**
     * List badges for a user
     * 
     * @param username  (required)
     * @return ListUserBadgesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success response </td><td>  -  </td></tr>
     </table>
     */
    public ListUserBadgesRequestBuilder listUserBadges(String username) throws IllegalArgumentException {
        if (username == null) throw new IllegalArgumentException("\"username\" is required but got null");
            

        return new ListUserBadgesRequestBuilder(username);
    }
    private okhttp3.Call logOutUserActionCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/users/{id}/log_out.json"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call logOutUserActionValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling logOutUserAction(Async)");
        }

        return logOutUserActionCall(id, _callback);

    }


    private ApiResponse<UsersLogOutUserActionResponse> logOutUserActionWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = logOutUserActionValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<UsersLogOutUserActionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call logOutUserActionAsync(Integer id, final ApiCallback<UsersLogOutUserActionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = logOutUserActionValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<UsersLogOutUserActionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class LogOutUserActionRequestBuilder {
        private final Integer id;

        private LogOutUserActionRequestBuilder(Integer id) {
            this.id = id;
        }

        /**
         * Build call for logOutUserAction
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return logOutUserActionCall(id, _callback);
        }


        /**
         * Execute logOutUserAction request
         * @return UsersLogOutUserActionResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
         </table>
         */
        public UsersLogOutUserActionResponse execute() throws ApiException {
            ApiResponse<UsersLogOutUserActionResponse> localVarResp = logOutUserActionWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute logOutUserAction request with HTTP info returned
         * @return ApiResponse&lt;UsersLogOutUserActionResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UsersLogOutUserActionResponse> executeWithHttpInfo() throws ApiException {
            return logOutUserActionWithHttpInfo(id);
        }

        /**
         * Execute logOutUserAction request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UsersLogOutUserActionResponse> _callback) throws ApiException {
            return logOutUserActionAsync(id, _callback);
        }
    }

    /**
     * Log a user out
     * 
     * @param id  (required)
     * @return LogOutUserActionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
     </table>
     */
    public LogOutUserActionRequestBuilder logOutUserAction(Integer id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        return new LogOutUserActionRequestBuilder(id);
    }
    private okhttp3.Call refreshGravatarPostCall(String username, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user_avatar/{username}/refresh_gravatar.json"
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call refreshGravatarPostValidateBeforeCall(String username, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling refreshGravatarPost(Async)");
        }

        return refreshGravatarPostCall(username, _callback);

    }


    private ApiResponse<UsersRefreshGravatarPostResponse> refreshGravatarPostWithHttpInfo(String username) throws ApiException {
        okhttp3.Call localVarCall = refreshGravatarPostValidateBeforeCall(username, null);
        Type localVarReturnType = new TypeToken<UsersRefreshGravatarPostResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call refreshGravatarPostAsync(String username, final ApiCallback<UsersRefreshGravatarPostResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = refreshGravatarPostValidateBeforeCall(username, _callback);
        Type localVarReturnType = new TypeToken<UsersRefreshGravatarPostResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RefreshGravatarPostRequestBuilder {
        private final String username;

        private RefreshGravatarPostRequestBuilder(String username) {
            this.username = username;
        }

        /**
         * Build call for refreshGravatarPost
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return refreshGravatarPostCall(username, _callback);
        }


        /**
         * Execute refreshGravatarPost request
         * @return UsersRefreshGravatarPostResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
         </table>
         */
        public UsersRefreshGravatarPostResponse execute() throws ApiException {
            ApiResponse<UsersRefreshGravatarPostResponse> localVarResp = refreshGravatarPostWithHttpInfo(username);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute refreshGravatarPost request with HTTP info returned
         * @return ApiResponse&lt;UsersRefreshGravatarPostResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UsersRefreshGravatarPostResponse> executeWithHttpInfo() throws ApiException {
            return refreshGravatarPostWithHttpInfo(username);
        }

        /**
         * Execute refreshGravatarPost request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UsersRefreshGravatarPostResponse> _callback) throws ApiException {
            return refreshGravatarPostAsync(username, _callback);
        }
    }

    /**
     * Refresh gravatar
     * 
     * @param username  (required)
     * @return RefreshGravatarPostRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
     </table>
     */
    public RefreshGravatarPostRequestBuilder refreshGravatarPost(String username) throws IllegalArgumentException {
        if (username == null) throw new IllegalArgumentException("\"username\" is required but got null");
            

        return new RefreshGravatarPostRequestBuilder(username);
    }
    private okhttp3.Call sendPasswordResetEmailCall(UsersSendPasswordResetEmailRequest usersSendPasswordResetEmailRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = usersSendPasswordResetEmailRequest;

        // create path and map variables
        String localVarPath = "/session/forgot_password.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sendPasswordResetEmailValidateBeforeCall(UsersSendPasswordResetEmailRequest usersSendPasswordResetEmailRequest, final ApiCallback _callback) throws ApiException {
        return sendPasswordResetEmailCall(usersSendPasswordResetEmailRequest, _callback);

    }


    private ApiResponse<UsersSendPasswordResetEmailResponse> sendPasswordResetEmailWithHttpInfo(UsersSendPasswordResetEmailRequest usersSendPasswordResetEmailRequest) throws ApiException {
        okhttp3.Call localVarCall = sendPasswordResetEmailValidateBeforeCall(usersSendPasswordResetEmailRequest, null);
        Type localVarReturnType = new TypeToken<UsersSendPasswordResetEmailResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call sendPasswordResetEmailAsync(UsersSendPasswordResetEmailRequest usersSendPasswordResetEmailRequest, final ApiCallback<UsersSendPasswordResetEmailResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = sendPasswordResetEmailValidateBeforeCall(usersSendPasswordResetEmailRequest, _callback);
        Type localVarReturnType = new TypeToken<UsersSendPasswordResetEmailResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SendPasswordResetEmailRequestBuilder {
        private final String login;

        private SendPasswordResetEmailRequestBuilder(String login) {
            this.login = login;
        }

        /**
         * Build call for sendPasswordResetEmail
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> success response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UsersSendPasswordResetEmailRequest usersSendPasswordResetEmailRequest = buildBodyParams();
            return sendPasswordResetEmailCall(usersSendPasswordResetEmailRequest, _callback);
        }

        private UsersSendPasswordResetEmailRequest buildBodyParams() {
            UsersSendPasswordResetEmailRequest usersSendPasswordResetEmailRequest = new UsersSendPasswordResetEmailRequest();
            usersSendPasswordResetEmailRequest.login(this.login);
            return usersSendPasswordResetEmailRequest;
        }

        /**
         * Execute sendPasswordResetEmail request
         * @return UsersSendPasswordResetEmailResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> success response </td><td>  -  </td></tr>
         </table>
         */
        public UsersSendPasswordResetEmailResponse execute() throws ApiException {
            UsersSendPasswordResetEmailRequest usersSendPasswordResetEmailRequest = buildBodyParams();
            ApiResponse<UsersSendPasswordResetEmailResponse> localVarResp = sendPasswordResetEmailWithHttpInfo(usersSendPasswordResetEmailRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute sendPasswordResetEmail request with HTTP info returned
         * @return ApiResponse&lt;UsersSendPasswordResetEmailResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> success response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UsersSendPasswordResetEmailResponse> executeWithHttpInfo() throws ApiException {
            UsersSendPasswordResetEmailRequest usersSendPasswordResetEmailRequest = buildBodyParams();
            return sendPasswordResetEmailWithHttpInfo(usersSendPasswordResetEmailRequest);
        }

        /**
         * Execute sendPasswordResetEmail request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> success response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UsersSendPasswordResetEmailResponse> _callback) throws ApiException {
            UsersSendPasswordResetEmailRequest usersSendPasswordResetEmailRequest = buildBodyParams();
            return sendPasswordResetEmailAsync(usersSendPasswordResetEmailRequest, _callback);
        }
    }

    /**
     * Send password reset email
     * 
     * @return SendPasswordResetEmailRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success response </td><td>  -  </td></tr>
     </table>
     */
    public SendPasswordResetEmailRequestBuilder sendPasswordResetEmail(String login) throws IllegalArgumentException {
        if (login == null) throw new IllegalArgumentException("\"login\" is required but got null");
            

        return new SendPasswordResetEmailRequestBuilder(login);
    }
    private okhttp3.Call silenceByIdCall(Integer id, UsersSilenceByIdRequest usersSilenceByIdRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = usersSilenceByIdRequest;

        // create path and map variables
        String localVarPath = "/admin/users/{id}/silence.json"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call silenceByIdValidateBeforeCall(Integer id, UsersSilenceByIdRequest usersSilenceByIdRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling silenceById(Async)");
        }

        return silenceByIdCall(id, usersSilenceByIdRequest, _callback);

    }


    private ApiResponse<UsersSilenceByIdResponse> silenceByIdWithHttpInfo(Integer id, UsersSilenceByIdRequest usersSilenceByIdRequest) throws ApiException {
        okhttp3.Call localVarCall = silenceByIdValidateBeforeCall(id, usersSilenceByIdRequest, null);
        Type localVarReturnType = new TypeToken<UsersSilenceByIdResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call silenceByIdAsync(Integer id, UsersSilenceByIdRequest usersSilenceByIdRequest, final ApiCallback<UsersSilenceByIdResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = silenceByIdValidateBeforeCall(id, usersSilenceByIdRequest, _callback);
        Type localVarReturnType = new TypeToken<UsersSilenceByIdResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SilenceByIdRequestBuilder {
        private final Integer id;
        private String silencedTill;
        private String reason;
        private String message;
        private String postAction;

        private SilenceByIdRequestBuilder(Integer id) {
            this.id = id;
        }

        /**
         * Set silencedTill
         * @param silencedTill  (optional)
         * @return SilenceByIdRequestBuilder
         */
        public SilenceByIdRequestBuilder silencedTill(String silencedTill) {
            this.silencedTill = silencedTill;
            return this;
        }
        
        /**
         * Set reason
         * @param reason  (optional)
         * @return SilenceByIdRequestBuilder
         */
        public SilenceByIdRequestBuilder reason(String reason) {
            this.reason = reason;
            return this;
        }
        
        /**
         * Set message
         * @param message Will send an email with this message when present (optional)
         * @return SilenceByIdRequestBuilder
         */
        public SilenceByIdRequestBuilder message(String message) {
            this.message = message;
            return this;
        }
        
        /**
         * Set postAction
         * @param postAction  (optional)
         * @return SilenceByIdRequestBuilder
         */
        public SilenceByIdRequestBuilder postAction(String postAction) {
            this.postAction = postAction;
            return this;
        }
        
        /**
         * Build call for silenceById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UsersSilenceByIdRequest usersSilenceByIdRequest = buildBodyParams();
            return silenceByIdCall(id, usersSilenceByIdRequest, _callback);
        }

        private UsersSilenceByIdRequest buildBodyParams() {
            UsersSilenceByIdRequest usersSilenceByIdRequest = new UsersSilenceByIdRequest();
            usersSilenceByIdRequest.silencedTill(this.silencedTill);
            usersSilenceByIdRequest.reason(this.reason);
            usersSilenceByIdRequest.message(this.message);
            usersSilenceByIdRequest.postAction(this.postAction);
            return usersSilenceByIdRequest;
        }

        /**
         * Execute silenceById request
         * @return UsersSilenceByIdResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
         </table>
         */
        public UsersSilenceByIdResponse execute() throws ApiException {
            UsersSilenceByIdRequest usersSilenceByIdRequest = buildBodyParams();
            ApiResponse<UsersSilenceByIdResponse> localVarResp = silenceByIdWithHttpInfo(id, usersSilenceByIdRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute silenceById request with HTTP info returned
         * @return ApiResponse&lt;UsersSilenceByIdResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UsersSilenceByIdResponse> executeWithHttpInfo() throws ApiException {
            UsersSilenceByIdRequest usersSilenceByIdRequest = buildBodyParams();
            return silenceByIdWithHttpInfo(id, usersSilenceByIdRequest);
        }

        /**
         * Execute silenceById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UsersSilenceByIdResponse> _callback) throws ApiException {
            UsersSilenceByIdRequest usersSilenceByIdRequest = buildBodyParams();
            return silenceByIdAsync(id, usersSilenceByIdRequest, _callback);
        }
    }

    /**
     * Silence a user
     * 
     * @param id  (required)
     * @return SilenceByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
     </table>
     */
    public SilenceByIdRequestBuilder silenceById(Integer id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        return new SilenceByIdRequestBuilder(id);
    }
    private okhttp3.Call suspendByIdJsonCall(Integer id, UsersSuspendByIdJsonRequest usersSuspendByIdJsonRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = usersSuspendByIdJsonRequest;

        // create path and map variables
        String localVarPath = "/admin/users/{id}/suspend.json"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call suspendByIdJsonValidateBeforeCall(Integer id, UsersSuspendByIdJsonRequest usersSuspendByIdJsonRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling suspendByIdJson(Async)");
        }

        return suspendByIdJsonCall(id, usersSuspendByIdJsonRequest, _callback);

    }


    private ApiResponse<UsersSuspendByIdJsonResponse> suspendByIdJsonWithHttpInfo(Integer id, UsersSuspendByIdJsonRequest usersSuspendByIdJsonRequest) throws ApiException {
        okhttp3.Call localVarCall = suspendByIdJsonValidateBeforeCall(id, usersSuspendByIdJsonRequest, null);
        Type localVarReturnType = new TypeToken<UsersSuspendByIdJsonResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call suspendByIdJsonAsync(Integer id, UsersSuspendByIdJsonRequest usersSuspendByIdJsonRequest, final ApiCallback<UsersSuspendByIdJsonResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = suspendByIdJsonValidateBeforeCall(id, usersSuspendByIdJsonRequest, _callback);
        Type localVarReturnType = new TypeToken<UsersSuspendByIdJsonResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SuspendByIdJsonRequestBuilder {
        private final String suspendUntil;
        private final String reason;
        private final Integer id;
        private String message;
        private String postAction;

        private SuspendByIdJsonRequestBuilder(String suspendUntil, String reason, Integer id) {
            this.suspendUntil = suspendUntil;
            this.reason = reason;
            this.id = id;
        }

        /**
         * Set message
         * @param message Will send an email with this message when present (optional)
         * @return SuspendByIdJsonRequestBuilder
         */
        public SuspendByIdJsonRequestBuilder message(String message) {
            this.message = message;
            return this;
        }
        
        /**
         * Set postAction
         * @param postAction  (optional)
         * @return SuspendByIdJsonRequestBuilder
         */
        public SuspendByIdJsonRequestBuilder postAction(String postAction) {
            this.postAction = postAction;
            return this;
        }
        
        /**
         * Build call for suspendByIdJson
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UsersSuspendByIdJsonRequest usersSuspendByIdJsonRequest = buildBodyParams();
            return suspendByIdJsonCall(id, usersSuspendByIdJsonRequest, _callback);
        }

        private UsersSuspendByIdJsonRequest buildBodyParams() {
            UsersSuspendByIdJsonRequest usersSuspendByIdJsonRequest = new UsersSuspendByIdJsonRequest();
            usersSuspendByIdJsonRequest.suspendUntil(this.suspendUntil);
            usersSuspendByIdJsonRequest.reason(this.reason);
            usersSuspendByIdJsonRequest.message(this.message);
            usersSuspendByIdJsonRequest.postAction(this.postAction);
            return usersSuspendByIdJsonRequest;
        }

        /**
         * Execute suspendByIdJson request
         * @return UsersSuspendByIdJsonResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
         </table>
         */
        public UsersSuspendByIdJsonResponse execute() throws ApiException {
            UsersSuspendByIdJsonRequest usersSuspendByIdJsonRequest = buildBodyParams();
            ApiResponse<UsersSuspendByIdJsonResponse> localVarResp = suspendByIdJsonWithHttpInfo(id, usersSuspendByIdJsonRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute suspendByIdJson request with HTTP info returned
         * @return ApiResponse&lt;UsersSuspendByIdJsonResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UsersSuspendByIdJsonResponse> executeWithHttpInfo() throws ApiException {
            UsersSuspendByIdJsonRequest usersSuspendByIdJsonRequest = buildBodyParams();
            return suspendByIdJsonWithHttpInfo(id, usersSuspendByIdJsonRequest);
        }

        /**
         * Execute suspendByIdJson request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UsersSuspendByIdJsonResponse> _callback) throws ApiException {
            UsersSuspendByIdJsonRequest usersSuspendByIdJsonRequest = buildBodyParams();
            return suspendByIdJsonAsync(id, usersSuspendByIdJsonRequest, _callback);
        }
    }

    /**
     * Suspend a user
     * 
     * @param id  (required)
     * @return SuspendByIdJsonRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
     </table>
     */
    public SuspendByIdJsonRequestBuilder suspendByIdJson(String suspendUntil, String reason, Integer id) throws IllegalArgumentException {
        if (suspendUntil == null) throw new IllegalArgumentException("\"suspendUntil\" is required but got null");
            

        if (reason == null) throw new IllegalArgumentException("\"reason\" is required but got null");
            

        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        return new SuspendByIdJsonRequestBuilder(suspendUntil, reason, id);
    }
    private okhttp3.Call updateAvatarCall(String username, UsersUpdateAvatarRequest usersUpdateAvatarRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = usersUpdateAvatarRequest;

        // create path and map variables
        String localVarPath = "/u/{username}/preferences/avatar/pick.json"
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateAvatarValidateBeforeCall(String username, UsersUpdateAvatarRequest usersUpdateAvatarRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling updateAvatar(Async)");
        }

        return updateAvatarCall(username, usersUpdateAvatarRequest, _callback);

    }


    private ApiResponse<UsersUpdateAvatarResponse> updateAvatarWithHttpInfo(String username, UsersUpdateAvatarRequest usersUpdateAvatarRequest) throws ApiException {
        okhttp3.Call localVarCall = updateAvatarValidateBeforeCall(username, usersUpdateAvatarRequest, null);
        Type localVarReturnType = new TypeToken<UsersUpdateAvatarResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateAvatarAsync(String username, UsersUpdateAvatarRequest usersUpdateAvatarRequest, final ApiCallback<UsersUpdateAvatarResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateAvatarValidateBeforeCall(username, usersUpdateAvatarRequest, _callback);
        Type localVarReturnType = new TypeToken<UsersUpdateAvatarResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateAvatarRequestBuilder {
        private final Integer uploadId;
        private final String type;
        private final String username;

        private UpdateAvatarRequestBuilder(Integer uploadId, String type, String username) {
            this.uploadId = uploadId;
            this.type = type;
            this.username = username;
        }

        /**
         * Build call for updateAvatar
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> avatar updated </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UsersUpdateAvatarRequest usersUpdateAvatarRequest = buildBodyParams();
            return updateAvatarCall(username, usersUpdateAvatarRequest, _callback);
        }

        private UsersUpdateAvatarRequest buildBodyParams() {
            UsersUpdateAvatarRequest usersUpdateAvatarRequest = new UsersUpdateAvatarRequest();
            usersUpdateAvatarRequest.uploadId(this.uploadId);
            if (this.type != null)
            usersUpdateAvatarRequest.type(UsersUpdateAvatarRequest.TypeEnum.fromValue(this.type));
            return usersUpdateAvatarRequest;
        }

        /**
         * Execute updateAvatar request
         * @return UsersUpdateAvatarResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> avatar updated </td><td>  -  </td></tr>
         </table>
         */
        public UsersUpdateAvatarResponse execute() throws ApiException {
            UsersUpdateAvatarRequest usersUpdateAvatarRequest = buildBodyParams();
            ApiResponse<UsersUpdateAvatarResponse> localVarResp = updateAvatarWithHttpInfo(username, usersUpdateAvatarRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateAvatar request with HTTP info returned
         * @return ApiResponse&lt;UsersUpdateAvatarResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> avatar updated </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UsersUpdateAvatarResponse> executeWithHttpInfo() throws ApiException {
            UsersUpdateAvatarRequest usersUpdateAvatarRequest = buildBodyParams();
            return updateAvatarWithHttpInfo(username, usersUpdateAvatarRequest);
        }

        /**
         * Execute updateAvatar request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> avatar updated </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UsersUpdateAvatarResponse> _callback) throws ApiException {
            UsersUpdateAvatarRequest usersUpdateAvatarRequest = buildBodyParams();
            return updateAvatarAsync(username, usersUpdateAvatarRequest, _callback);
        }
    }

    /**
     * Update avatar
     * 
     * @param username  (required)
     * @return UpdateAvatarRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> avatar updated </td><td>  -  </td></tr>
     </table>
     */
    public UpdateAvatarRequestBuilder updateAvatar(Integer uploadId, String type, String username) throws IllegalArgumentException {
        if (uploadId == null) throw new IllegalArgumentException("\"uploadId\" is required but got null");
        if (type == null) throw new IllegalArgumentException("\"type\" is required but got null");
            

        if (username == null) throw new IllegalArgumentException("\"username\" is required but got null");
            

        return new UpdateAvatarRequestBuilder(uploadId, type, username);
    }
    private okhttp3.Call updateEmailPreferencesCall(String username, UsersUpdateEmailPreferencesRequest usersUpdateEmailPreferencesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = usersUpdateEmailPreferencesRequest;

        // create path and map variables
        String localVarPath = "/u/{username}/preferences/email.json"
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateEmailPreferencesValidateBeforeCall(String username, UsersUpdateEmailPreferencesRequest usersUpdateEmailPreferencesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling updateEmailPreferences(Async)");
        }

        return updateEmailPreferencesCall(username, usersUpdateEmailPreferencesRequest, _callback);

    }


    private ApiResponse<Void> updateEmailPreferencesWithHttpInfo(String username, UsersUpdateEmailPreferencesRequest usersUpdateEmailPreferencesRequest) throws ApiException {
        okhttp3.Call localVarCall = updateEmailPreferencesValidateBeforeCall(username, usersUpdateEmailPreferencesRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateEmailPreferencesAsync(String username, UsersUpdateEmailPreferencesRequest usersUpdateEmailPreferencesRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateEmailPreferencesValidateBeforeCall(username, usersUpdateEmailPreferencesRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateEmailPreferencesRequestBuilder {
        private final String email;
        private final String username;

        private UpdateEmailPreferencesRequestBuilder(String email, String username) {
            this.email = email;
            this.username = username;
        }

        /**
         * Build call for updateEmailPreferences
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> email updated </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UsersUpdateEmailPreferencesRequest usersUpdateEmailPreferencesRequest = buildBodyParams();
            return updateEmailPreferencesCall(username, usersUpdateEmailPreferencesRequest, _callback);
        }

        private UsersUpdateEmailPreferencesRequest buildBodyParams() {
            UsersUpdateEmailPreferencesRequest usersUpdateEmailPreferencesRequest = new UsersUpdateEmailPreferencesRequest();
            usersUpdateEmailPreferencesRequest.email(this.email);
            return usersUpdateEmailPreferencesRequest;
        }

        /**
         * Execute updateEmailPreferences request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> email updated </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            UsersUpdateEmailPreferencesRequest usersUpdateEmailPreferencesRequest = buildBodyParams();
            updateEmailPreferencesWithHttpInfo(username, usersUpdateEmailPreferencesRequest);
        }

        /**
         * Execute updateEmailPreferences request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> email updated </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            UsersUpdateEmailPreferencesRequest usersUpdateEmailPreferencesRequest = buildBodyParams();
            return updateEmailPreferencesWithHttpInfo(username, usersUpdateEmailPreferencesRequest);
        }

        /**
         * Execute updateEmailPreferences request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> email updated </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            UsersUpdateEmailPreferencesRequest usersUpdateEmailPreferencesRequest = buildBodyParams();
            return updateEmailPreferencesAsync(username, usersUpdateEmailPreferencesRequest, _callback);
        }
    }

    /**
     * Update email
     * 
     * @param username  (required)
     * @return UpdateEmailPreferencesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> email updated </td><td>  -  </td></tr>
     </table>
     */
    public UpdateEmailPreferencesRequestBuilder updateEmailPreferences(String email, String username) throws IllegalArgumentException {
        if (email == null) throw new IllegalArgumentException("\"email\" is required but got null");
            

        if (username == null) throw new IllegalArgumentException("\"username\" is required but got null");
            

        return new UpdateEmailPreferencesRequestBuilder(email, username);
    }
    private okhttp3.Call updatePreferencesJsonCall(String username, UsersUpdatePreferencesJsonRequest usersUpdatePreferencesJsonRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = usersUpdatePreferencesJsonRequest;

        // create path and map variables
        String localVarPath = "/u/{username}/preferences/username.json"
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePreferencesJsonValidateBeforeCall(String username, UsersUpdatePreferencesJsonRequest usersUpdatePreferencesJsonRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling updatePreferencesJson(Async)");
        }

        return updatePreferencesJsonCall(username, usersUpdatePreferencesJsonRequest, _callback);

    }


    private ApiResponse<Void> updatePreferencesJsonWithHttpInfo(String username, UsersUpdatePreferencesJsonRequest usersUpdatePreferencesJsonRequest) throws ApiException {
        okhttp3.Call localVarCall = updatePreferencesJsonValidateBeforeCall(username, usersUpdatePreferencesJsonRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updatePreferencesJsonAsync(String username, UsersUpdatePreferencesJsonRequest usersUpdatePreferencesJsonRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatePreferencesJsonValidateBeforeCall(username, usersUpdatePreferencesJsonRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdatePreferencesJsonRequestBuilder {
        private final String newUsername;
        private final String username;

        private UpdatePreferencesJsonRequestBuilder(String newUsername, String username) {
            this.newUsername = newUsername;
            this.username = username;
        }

        /**
         * Build call for updatePreferencesJson
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> username updated </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UsersUpdatePreferencesJsonRequest usersUpdatePreferencesJsonRequest = buildBodyParams();
            return updatePreferencesJsonCall(username, usersUpdatePreferencesJsonRequest, _callback);
        }

        private UsersUpdatePreferencesJsonRequest buildBodyParams() {
            UsersUpdatePreferencesJsonRequest usersUpdatePreferencesJsonRequest = new UsersUpdatePreferencesJsonRequest();
            usersUpdatePreferencesJsonRequest.newUsername(this.newUsername);
            return usersUpdatePreferencesJsonRequest;
        }

        /**
         * Execute updatePreferencesJson request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> username updated </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            UsersUpdatePreferencesJsonRequest usersUpdatePreferencesJsonRequest = buildBodyParams();
            updatePreferencesJsonWithHttpInfo(username, usersUpdatePreferencesJsonRequest);
        }

        /**
         * Execute updatePreferencesJson request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> username updated </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            UsersUpdatePreferencesJsonRequest usersUpdatePreferencesJsonRequest = buildBodyParams();
            return updatePreferencesJsonWithHttpInfo(username, usersUpdatePreferencesJsonRequest);
        }

        /**
         * Execute updatePreferencesJson request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> username updated </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            UsersUpdatePreferencesJsonRequest usersUpdatePreferencesJsonRequest = buildBodyParams();
            return updatePreferencesJsonAsync(username, usersUpdatePreferencesJsonRequest, _callback);
        }
    }

    /**
     * Update username
     * 
     * @param username  (required)
     * @return UpdatePreferencesJsonRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> username updated </td><td>  -  </td></tr>
     </table>
     */
    public UpdatePreferencesJsonRequestBuilder updatePreferencesJson(String newUsername, String username) throws IllegalArgumentException {
        if (newUsername == null) throw new IllegalArgumentException("\"newUsername\" is required but got null");
            

        if (username == null) throw new IllegalArgumentException("\"username\" is required but got null");
            

        return new UpdatePreferencesJsonRequestBuilder(newUsername, username);
    }
    private okhttp3.Call updateUserDetailsCall(String apiKey, String apiUsername, String username, UsersUpdateUserDetailsRequest usersUpdateUserDetailsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = usersUpdateUserDetailsRequest;

        // create path and map variables
        String localVarPath = "/u/{username}.json"
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarHeaderParams.put("Api-Key", localVarApiClient.parameterToString(apiKey));
        }

        if (apiUsername != null) {
            localVarHeaderParams.put("Api-Username", localVarApiClient.parameterToString(apiUsername));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateUserDetailsValidateBeforeCall(String apiKey, String apiUsername, String username, UsersUpdateUserDetailsRequest usersUpdateUserDetailsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling updateUserDetails(Async)");
        }

        // verify the required parameter 'apiUsername' is set
        if (apiUsername == null) {
            throw new ApiException("Missing the required parameter 'apiUsername' when calling updateUserDetails(Async)");
        }

        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling updateUserDetails(Async)");
        }

        return updateUserDetailsCall(apiKey, apiUsername, username, usersUpdateUserDetailsRequest, _callback);

    }


    private ApiResponse<UsersUpdateUserDetailsResponse> updateUserDetailsWithHttpInfo(String apiKey, String apiUsername, String username, UsersUpdateUserDetailsRequest usersUpdateUserDetailsRequest) throws ApiException {
        okhttp3.Call localVarCall = updateUserDetailsValidateBeforeCall(apiKey, apiUsername, username, usersUpdateUserDetailsRequest, null);
        Type localVarReturnType = new TypeToken<UsersUpdateUserDetailsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateUserDetailsAsync(String apiKey, String apiUsername, String username, UsersUpdateUserDetailsRequest usersUpdateUserDetailsRequest, final ApiCallback<UsersUpdateUserDetailsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateUserDetailsValidateBeforeCall(apiKey, apiUsername, username, usersUpdateUserDetailsRequest, _callback);
        Type localVarReturnType = new TypeToken<UsersUpdateUserDetailsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateUserDetailsRequestBuilder {
        private final String apiKey;
        private final String apiUsername;
        private final String username;
        private String name;
        private Object externalIds;

        private UpdateUserDetailsRequestBuilder(String apiKey, String apiUsername, String username) {
            this.apiKey = apiKey;
            this.apiUsername = apiUsername;
            this.username = username;
        }

        /**
         * Set name
         * @param name  (optional)
         * @return UpdateUserDetailsRequestBuilder
         */
        public UpdateUserDetailsRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set externalIds
         * @param externalIds  (optional)
         * @return UpdateUserDetailsRequestBuilder
         */
        public UpdateUserDetailsRequestBuilder externalIds(Object externalIds) {
            this.externalIds = externalIds;
            return this;
        }
        
        /**
         * Build call for updateUserDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> user updated </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UsersUpdateUserDetailsRequest usersUpdateUserDetailsRequest = buildBodyParams();
            return updateUserDetailsCall(apiKey, apiUsername, username, usersUpdateUserDetailsRequest, _callback);
        }

        private UsersUpdateUserDetailsRequest buildBodyParams() {
            UsersUpdateUserDetailsRequest usersUpdateUserDetailsRequest = new UsersUpdateUserDetailsRequest();
            usersUpdateUserDetailsRequest.name(this.name);
            usersUpdateUserDetailsRequest.externalIds(this.externalIds);
            return usersUpdateUserDetailsRequest;
        }

        /**
         * Execute updateUserDetails request
         * @return UsersUpdateUserDetailsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> user updated </td><td>  -  </td></tr>
         </table>
         */
        public UsersUpdateUserDetailsResponse execute() throws ApiException {
            UsersUpdateUserDetailsRequest usersUpdateUserDetailsRequest = buildBodyParams();
            ApiResponse<UsersUpdateUserDetailsResponse> localVarResp = updateUserDetailsWithHttpInfo(apiKey, apiUsername, username, usersUpdateUserDetailsRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateUserDetails request with HTTP info returned
         * @return ApiResponse&lt;UsersUpdateUserDetailsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> user updated </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UsersUpdateUserDetailsResponse> executeWithHttpInfo() throws ApiException {
            UsersUpdateUserDetailsRequest usersUpdateUserDetailsRequest = buildBodyParams();
            return updateUserDetailsWithHttpInfo(apiKey, apiUsername, username, usersUpdateUserDetailsRequest);
        }

        /**
         * Execute updateUserDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> user updated </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UsersUpdateUserDetailsResponse> _callback) throws ApiException {
            UsersUpdateUserDetailsRequest usersUpdateUserDetailsRequest = buildBodyParams();
            return updateUserDetailsAsync(apiKey, apiUsername, username, usersUpdateUserDetailsRequest, _callback);
        }
    }

    /**
     * Update a user
     * 
     * @param apiKey  (required)
     * @param apiUsername  (required)
     * @param username  (required)
     * @return UpdateUserDetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> user updated </td><td>  -  </td></tr>
     </table>
     */
    public UpdateUserDetailsRequestBuilder updateUserDetails(String apiKey, String apiUsername, String username) throws IllegalArgumentException {
        if (apiKey == null) throw new IllegalArgumentException("\"apiKey\" is required but got null");
            

        if (apiUsername == null) throw new IllegalArgumentException("\"apiUsername\" is required but got null");
            

        if (username == null) throw new IllegalArgumentException("\"username\" is required but got null");
            

        return new UpdateUserDetailsRequestBuilder(apiKey, apiUsername, username);
    }
}
