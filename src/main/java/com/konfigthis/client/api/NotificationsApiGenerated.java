/*
 * Discourse API Documentation
 * This page contains the documentation on how to use Discourse through API calls.  > Note: For any endpoints not listed you can follow the [reverse engineer the Discourse API](https://meta.discourse.org/t/-/20576) guide to figure out how to use an API endpoint.  ### Request Content-Type  The Content-Type for POST and PUT requests can be set to `application/x-www-form-urlencoded`, `multipart/form-data`, or `application/json`.  ### Endpoint Names and Response Content-Type  Most API endpoints provide the same content as their HTML counterparts. For example the URL `/categories` serves a list of categories, the `/categories.json` API provides the same information in JSON format.  Instead of sending API requests to `/categories.json` you may also send them to `/categories` and add an `Accept: application/json` header to the request to get the JSON response. Sending requests with the `Accept` header is necessary if you want to use URLs for related endpoints returned by the API, such as pagination URLs. These URLs are returned without the `.json` prefix so you need to add the header in order to get the correct response format.  ### Authentication  Some endpoints do not require any authentication, pretty much anything else will require you to be authenticated.  To become authenticated you will need to create an API Key from the admin panel.  Once you have your API Key you can pass it in along with your API Username as an HTTP header like this:  ``` curl -X GET \"http://127.0.0.1:3000/admin/users/list/active.json\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" ```  and this is how POST requests will look:  ``` curl -X POST \"http://127.0.0.1:3000/categories\" \\ -H \"Content-Type: multipart/form-data;\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" \\ -F \"name=89853c20-4409-e91a-a8ea-f6cdff96aaaa\" \\ -F \"color=49d9e9\" \\ -F \"text_color=f0fcfd\" ```  ### Boolean values  If an endpoint accepts a boolean be sure to specify it as a lowercase `true` or `false` value unless noted otherwise. 
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.NotificationsGetUserNotificationsResponse;
import com.konfigthis.client.model.NotificationsMarkAsReadRequest;
import com.konfigthis.client.model.NotificationsMarkAsReadResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class NotificationsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public NotificationsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public NotificationsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getUserNotificationsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/notifications.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserNotificationsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getUserNotificationsCall(_callback);

    }


    private ApiResponse<NotificationsGetUserNotificationsResponse> getUserNotificationsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getUserNotificationsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<NotificationsGetUserNotificationsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getUserNotificationsAsync(final ApiCallback<NotificationsGetUserNotificationsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserNotificationsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<NotificationsGetUserNotificationsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetUserNotificationsRequestBuilder {

        private GetUserNotificationsRequestBuilder() {
        }

        /**
         * Build call for getUserNotifications
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> notifications </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getUserNotificationsCall(_callback);
        }


        /**
         * Execute getUserNotifications request
         * @return NotificationsGetUserNotificationsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> notifications </td><td>  -  </td></tr>
         </table>
         */
        public NotificationsGetUserNotificationsResponse execute() throws ApiException {
            ApiResponse<NotificationsGetUserNotificationsResponse> localVarResp = getUserNotificationsWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getUserNotifications request with HTTP info returned
         * @return ApiResponse&lt;NotificationsGetUserNotificationsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> notifications </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<NotificationsGetUserNotificationsResponse> executeWithHttpInfo() throws ApiException {
            return getUserNotificationsWithHttpInfo();
        }

        /**
         * Execute getUserNotifications request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> notifications </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<NotificationsGetUserNotificationsResponse> _callback) throws ApiException {
            return getUserNotificationsAsync(_callback);
        }
    }

    /**
     * Get the notifications that belong to the current user
     * 
     * @return GetUserNotificationsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> notifications </td><td>  -  </td></tr>
     </table>
     */
    public GetUserNotificationsRequestBuilder getUserNotifications() throws IllegalArgumentException {
        return new GetUserNotificationsRequestBuilder();
    }
    private okhttp3.Call markAsReadCall(NotificationsMarkAsReadRequest notificationsMarkAsReadRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = notificationsMarkAsReadRequest;

        // create path and map variables
        String localVarPath = "/notifications/mark-read.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call markAsReadValidateBeforeCall(NotificationsMarkAsReadRequest notificationsMarkAsReadRequest, final ApiCallback _callback) throws ApiException {
        return markAsReadCall(notificationsMarkAsReadRequest, _callback);

    }


    private ApiResponse<NotificationsMarkAsReadResponse> markAsReadWithHttpInfo(NotificationsMarkAsReadRequest notificationsMarkAsReadRequest) throws ApiException {
        okhttp3.Call localVarCall = markAsReadValidateBeforeCall(notificationsMarkAsReadRequest, null);
        Type localVarReturnType = new TypeToken<NotificationsMarkAsReadResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call markAsReadAsync(NotificationsMarkAsReadRequest notificationsMarkAsReadRequest, final ApiCallback<NotificationsMarkAsReadResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = markAsReadValidateBeforeCall(notificationsMarkAsReadRequest, _callback);
        Type localVarReturnType = new TypeToken<NotificationsMarkAsReadResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class MarkAsReadRequestBuilder {
        private Integer id;

        private MarkAsReadRequestBuilder() {
        }

        /**
         * Set id
         * @param id (optional) Leave off to mark all notifications as read (optional)
         * @return MarkAsReadRequestBuilder
         */
        public MarkAsReadRequestBuilder id(Integer id) {
            this.id = id;
            return this;
        }
        
        /**
         * Build call for markAsRead
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> notifications marked read </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            NotificationsMarkAsReadRequest notificationsMarkAsReadRequest = buildBodyParams();
            return markAsReadCall(notificationsMarkAsReadRequest, _callback);
        }

        private NotificationsMarkAsReadRequest buildBodyParams() {
            NotificationsMarkAsReadRequest notificationsMarkAsReadRequest = new NotificationsMarkAsReadRequest();
            notificationsMarkAsReadRequest.id(this.id);
            return notificationsMarkAsReadRequest;
        }

        /**
         * Execute markAsRead request
         * @return NotificationsMarkAsReadResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> notifications marked read </td><td>  -  </td></tr>
         </table>
         */
        public NotificationsMarkAsReadResponse execute() throws ApiException {
            NotificationsMarkAsReadRequest notificationsMarkAsReadRequest = buildBodyParams();
            ApiResponse<NotificationsMarkAsReadResponse> localVarResp = markAsReadWithHttpInfo(notificationsMarkAsReadRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute markAsRead request with HTTP info returned
         * @return ApiResponse&lt;NotificationsMarkAsReadResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> notifications marked read </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<NotificationsMarkAsReadResponse> executeWithHttpInfo() throws ApiException {
            NotificationsMarkAsReadRequest notificationsMarkAsReadRequest = buildBodyParams();
            return markAsReadWithHttpInfo(notificationsMarkAsReadRequest);
        }

        /**
         * Execute markAsRead request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> notifications marked read </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<NotificationsMarkAsReadResponse> _callback) throws ApiException {
            NotificationsMarkAsReadRequest notificationsMarkAsReadRequest = buildBodyParams();
            return markAsReadAsync(notificationsMarkAsReadRequest, _callback);
        }
    }

    /**
     * Mark notifications as read
     * 
     * @return MarkAsReadRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> notifications marked read </td><td>  -  </td></tr>
     </table>
     */
    public MarkAsReadRequestBuilder markAsRead() throws IllegalArgumentException {
        return new MarkAsReadRequestBuilder();
    }
}
