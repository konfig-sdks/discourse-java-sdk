/*
 * Discourse API Documentation
 * This page contains the documentation on how to use Discourse through API calls.  > Note: For any endpoints not listed you can follow the [reverse engineer the Discourse API](https://meta.discourse.org/t/-/20576) guide to figure out how to use an API endpoint.  ### Request Content-Type  The Content-Type for POST and PUT requests can be set to `application/x-www-form-urlencoded`, `multipart/form-data`, or `application/json`.  ### Endpoint Names and Response Content-Type  Most API endpoints provide the same content as their HTML counterparts. For example the URL `/categories` serves a list of categories, the `/categories.json` API provides the same information in JSON format.  Instead of sending API requests to `/categories.json` you may also send them to `/categories` and add an `Accept: application/json` header to the request to get the JSON response. Sending requests with the `Accept` header is necessary if you want to use URLs for related endpoints returned by the API, such as pagination URLs. These URLs are returned without the `.json` prefix so you need to add the header in order to get the correct response format.  ### Authentication  Some endpoints do not require any authentication, pretty much anything else will require you to be authenticated.  To become authenticated you will need to create an API Key from the admin panel.  Once you have your API Key you can pass it in along with your API Username as an HTTP header like this:  ``` curl -X GET \"http://127.0.0.1:3000/admin/users/list/active.json\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" ```  and this is how POST requests will look:  ``` curl -X POST \"http://127.0.0.1:3000/categories\" \\ -H \"Content-Type: multipart/form-data;\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" \\ -F \"name=89853c20-4409-e91a-a8ea-f6cdff96aaaa\" \\ -F \"color=49d9e9\" \\ -F \"text_color=f0fcfd\" ```  ### Boolean values  If an endpoint accepts a boolean be sure to specify it as a lowercase `true` or `false` value unless noted otherwise. 
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.io.File;
import com.konfigthis.client.model.UploadsAbortMultipartUploadRequest;
import com.konfigthis.client.model.UploadsAbortMultipartUploadResponse;
import com.konfigthis.client.model.UploadsCompleteExternalUploadRequest;
import com.konfigthis.client.model.UploadsCompleteExternalUploadResponse;
import com.konfigthis.client.model.UploadsCompleteMultipartUploadRequest;
import com.konfigthis.client.model.UploadsCompleteMultipartUploadResponse;
import com.konfigthis.client.model.UploadsCreateMultipartExternalUploadRequest;
import com.konfigthis.client.model.UploadsCreateMultipartExternalUploadResponse;
import com.konfigthis.client.model.UploadsCreateNewUploadRequest;
import com.konfigthis.client.model.UploadsCreateNewUploadResponse;
import com.konfigthis.client.model.UploadsGeneratePresignedUrlsForMultipartPartsRequest;
import com.konfigthis.client.model.UploadsGeneratePresignedUrlsForMultipartPartsResponse;
import com.konfigthis.client.model.UploadsInitiateDirectExternalUploadRequest;
import com.konfigthis.client.model.UploadsInitiateDirectExternalUploadRequestMetadata;
import com.konfigthis.client.model.UploadsInitiateDirectExternalUploadResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class UploadsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public UploadsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public UploadsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call abortMultipartUploadCall(UploadsAbortMultipartUploadRequest uploadsAbortMultipartUploadRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = uploadsAbortMultipartUploadRequest;

        // create path and map variables
        String localVarPath = "/uploads/abort-multipart.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call abortMultipartUploadValidateBeforeCall(UploadsAbortMultipartUploadRequest uploadsAbortMultipartUploadRequest, final ApiCallback _callback) throws ApiException {
        return abortMultipartUploadCall(uploadsAbortMultipartUploadRequest, _callback);

    }


    private ApiResponse<UploadsAbortMultipartUploadResponse> abortMultipartUploadWithHttpInfo(UploadsAbortMultipartUploadRequest uploadsAbortMultipartUploadRequest) throws ApiException {
        okhttp3.Call localVarCall = abortMultipartUploadValidateBeforeCall(uploadsAbortMultipartUploadRequest, null);
        Type localVarReturnType = new TypeToken<UploadsAbortMultipartUploadResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call abortMultipartUploadAsync(UploadsAbortMultipartUploadRequest uploadsAbortMultipartUploadRequest, final ApiCallback<UploadsAbortMultipartUploadResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = abortMultipartUploadValidateBeforeCall(uploadsAbortMultipartUploadRequest, _callback);
        Type localVarReturnType = new TypeToken<UploadsAbortMultipartUploadResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AbortMultipartUploadRequestBuilder {
        private final String externalUploadIdentifier;

        private AbortMultipartUploadRequestBuilder(String externalUploadIdentifier) {
            this.externalUploadIdentifier = externalUploadIdentifier;
        }

        /**
         * Build call for abortMultipartUpload
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> external upload initialized </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UploadsAbortMultipartUploadRequest uploadsAbortMultipartUploadRequest = buildBodyParams();
            return abortMultipartUploadCall(uploadsAbortMultipartUploadRequest, _callback);
        }

        private UploadsAbortMultipartUploadRequest buildBodyParams() {
            UploadsAbortMultipartUploadRequest uploadsAbortMultipartUploadRequest = new UploadsAbortMultipartUploadRequest();
            uploadsAbortMultipartUploadRequest.externalUploadIdentifier(this.externalUploadIdentifier);
            return uploadsAbortMultipartUploadRequest;
        }

        /**
         * Execute abortMultipartUpload request
         * @return UploadsAbortMultipartUploadResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> external upload initialized </td><td>  -  </td></tr>
         </table>
         */
        public UploadsAbortMultipartUploadResponse execute() throws ApiException {
            UploadsAbortMultipartUploadRequest uploadsAbortMultipartUploadRequest = buildBodyParams();
            ApiResponse<UploadsAbortMultipartUploadResponse> localVarResp = abortMultipartUploadWithHttpInfo(uploadsAbortMultipartUploadRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute abortMultipartUpload request with HTTP info returned
         * @return ApiResponse&lt;UploadsAbortMultipartUploadResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> external upload initialized </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UploadsAbortMultipartUploadResponse> executeWithHttpInfo() throws ApiException {
            UploadsAbortMultipartUploadRequest uploadsAbortMultipartUploadRequest = buildBodyParams();
            return abortMultipartUploadWithHttpInfo(uploadsAbortMultipartUploadRequest);
        }

        /**
         * Execute abortMultipartUpload request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> external upload initialized </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UploadsAbortMultipartUploadResponse> _callback) throws ApiException {
            UploadsAbortMultipartUploadRequest uploadsAbortMultipartUploadRequest = buildBodyParams();
            return abortMultipartUploadAsync(uploadsAbortMultipartUploadRequest, _callback);
        }
    }

    /**
     * Abort multipart upload
     * This endpoint aborts the multipart upload initiated with /create-multipart. This should be used when cancelling the upload. It does not matter if parts were already uploaded into the external storage provider.  You must have the correct permissions and CORS settings configured in your external provider. We support AWS S3 as the default. See:  https://meta.discourse.org/t/-/210469#s3-multipart-direct-uploads-4.  An external file store must be set up and &#x60;enable_direct_s3_uploads&#x60; must be set to true for this endpoint to function.  
     * @return AbortMultipartUploadRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> external upload initialized </td><td>  -  </td></tr>
     </table>
     */
    public AbortMultipartUploadRequestBuilder abortMultipartUpload(String externalUploadIdentifier) throws IllegalArgumentException {
        if (externalUploadIdentifier == null) throw new IllegalArgumentException("\"externalUploadIdentifier\" is required but got null");
            

        return new AbortMultipartUploadRequestBuilder(externalUploadIdentifier);
    }
    private okhttp3.Call completeExternalUploadCall(UploadsCompleteExternalUploadRequest uploadsCompleteExternalUploadRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = uploadsCompleteExternalUploadRequest;

        // create path and map variables
        String localVarPath = "/uploads/complete-external-upload.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call completeExternalUploadValidateBeforeCall(UploadsCompleteExternalUploadRequest uploadsCompleteExternalUploadRequest, final ApiCallback _callback) throws ApiException {
        return completeExternalUploadCall(uploadsCompleteExternalUploadRequest, _callback);

    }


    private ApiResponse<UploadsCompleteExternalUploadResponse> completeExternalUploadWithHttpInfo(UploadsCompleteExternalUploadRequest uploadsCompleteExternalUploadRequest) throws ApiException {
        okhttp3.Call localVarCall = completeExternalUploadValidateBeforeCall(uploadsCompleteExternalUploadRequest, null);
        Type localVarReturnType = new TypeToken<UploadsCompleteExternalUploadResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call completeExternalUploadAsync(UploadsCompleteExternalUploadRequest uploadsCompleteExternalUploadRequest, final ApiCallback<UploadsCompleteExternalUploadResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = completeExternalUploadValidateBeforeCall(uploadsCompleteExternalUploadRequest, _callback);
        Type localVarReturnType = new TypeToken<UploadsCompleteExternalUploadResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CompleteExternalUploadRequestBuilder {
        private final String uniqueIdentifier;
        private String forPrivateMessage;
        private String forSiteSetting;
        private String pasted;

        private CompleteExternalUploadRequestBuilder(String uniqueIdentifier) {
            this.uniqueIdentifier = uniqueIdentifier;
        }

        /**
         * Set forPrivateMessage
         * @param forPrivateMessage Optionally set this to true if the upload is for a private message. (optional)
         * @return CompleteExternalUploadRequestBuilder
         */
        public CompleteExternalUploadRequestBuilder forPrivateMessage(String forPrivateMessage) {
            this.forPrivateMessage = forPrivateMessage;
            return this;
        }
        
        /**
         * Set forSiteSetting
         * @param forSiteSetting Optionally set this to true if the upload is for a site setting. (optional)
         * @return CompleteExternalUploadRequestBuilder
         */
        public CompleteExternalUploadRequestBuilder forSiteSetting(String forSiteSetting) {
            this.forSiteSetting = forSiteSetting;
            return this;
        }
        
        /**
         * Set pasted
         * @param pasted Optionally set this to true if the upload was pasted into the upload area. This will convert PNG files to JPEG. (optional)
         * @return CompleteExternalUploadRequestBuilder
         */
        public CompleteExternalUploadRequestBuilder pasted(String pasted) {
            this.pasted = pasted;
            return this;
        }
        
        /**
         * Build call for completeExternalUpload
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> external upload initialized </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UploadsCompleteExternalUploadRequest uploadsCompleteExternalUploadRequest = buildBodyParams();
            return completeExternalUploadCall(uploadsCompleteExternalUploadRequest, _callback);
        }

        private UploadsCompleteExternalUploadRequest buildBodyParams() {
            UploadsCompleteExternalUploadRequest uploadsCompleteExternalUploadRequest = new UploadsCompleteExternalUploadRequest();
            uploadsCompleteExternalUploadRequest.uniqueIdentifier(this.uniqueIdentifier);
            uploadsCompleteExternalUploadRequest.forPrivateMessage(this.forPrivateMessage);
            uploadsCompleteExternalUploadRequest.forSiteSetting(this.forSiteSetting);
            uploadsCompleteExternalUploadRequest.pasted(this.pasted);
            return uploadsCompleteExternalUploadRequest;
        }

        /**
         * Execute completeExternalUpload request
         * @return UploadsCompleteExternalUploadResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> external upload initialized </td><td>  -  </td></tr>
         </table>
         */
        public UploadsCompleteExternalUploadResponse execute() throws ApiException {
            UploadsCompleteExternalUploadRequest uploadsCompleteExternalUploadRequest = buildBodyParams();
            ApiResponse<UploadsCompleteExternalUploadResponse> localVarResp = completeExternalUploadWithHttpInfo(uploadsCompleteExternalUploadRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute completeExternalUpload request with HTTP info returned
         * @return ApiResponse&lt;UploadsCompleteExternalUploadResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> external upload initialized </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UploadsCompleteExternalUploadResponse> executeWithHttpInfo() throws ApiException {
            UploadsCompleteExternalUploadRequest uploadsCompleteExternalUploadRequest = buildBodyParams();
            return completeExternalUploadWithHttpInfo(uploadsCompleteExternalUploadRequest);
        }

        /**
         * Execute completeExternalUpload request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> external upload initialized </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UploadsCompleteExternalUploadResponse> _callback) throws ApiException {
            UploadsCompleteExternalUploadRequest uploadsCompleteExternalUploadRequest = buildBodyParams();
            return completeExternalUploadAsync(uploadsCompleteExternalUploadRequest, _callback);
        }
    }

    /**
     * Completes a direct external upload
     * Completes an external upload initialized with /get-presigned-put. The file will be moved from its temporary location in external storage to a final destination in the S3 bucket. An Upload record will also be created in the database in most cases.  If a sha1-checksum was provided in the initial request it will also be compared with the uploaded file in storage to make sure the same file was uploaded. The file size will be compared for the same reason.  You must have the correct permissions and CORS settings configured in your external provider. We support AWS S3 as the default. See:  https://meta.discourse.org/t/-/210469#s3-multipart-direct-uploads-4.  An external file store must be set up and &#x60;enable_direct_s3_uploads&#x60; must be set to true for this endpoint to function.  
     * @return CompleteExternalUploadRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> external upload initialized </td><td>  -  </td></tr>
     </table>
     */
    public CompleteExternalUploadRequestBuilder completeExternalUpload(String uniqueIdentifier) throws IllegalArgumentException {
        if (uniqueIdentifier == null) throw new IllegalArgumentException("\"uniqueIdentifier\" is required but got null");
            

        return new CompleteExternalUploadRequestBuilder(uniqueIdentifier);
    }
    private okhttp3.Call completeMultipartUploadCall(UploadsCompleteMultipartUploadRequest uploadsCompleteMultipartUploadRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = uploadsCompleteMultipartUploadRequest;

        // create path and map variables
        String localVarPath = "/uploads/complete-multipart.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call completeMultipartUploadValidateBeforeCall(UploadsCompleteMultipartUploadRequest uploadsCompleteMultipartUploadRequest, final ApiCallback _callback) throws ApiException {
        return completeMultipartUploadCall(uploadsCompleteMultipartUploadRequest, _callback);

    }


    private ApiResponse<UploadsCompleteMultipartUploadResponse> completeMultipartUploadWithHttpInfo(UploadsCompleteMultipartUploadRequest uploadsCompleteMultipartUploadRequest) throws ApiException {
        okhttp3.Call localVarCall = completeMultipartUploadValidateBeforeCall(uploadsCompleteMultipartUploadRequest, null);
        Type localVarReturnType = new TypeToken<UploadsCompleteMultipartUploadResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call completeMultipartUploadAsync(UploadsCompleteMultipartUploadRequest uploadsCompleteMultipartUploadRequest, final ApiCallback<UploadsCompleteMultipartUploadResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = completeMultipartUploadValidateBeforeCall(uploadsCompleteMultipartUploadRequest, _callback);
        Type localVarReturnType = new TypeToken<UploadsCompleteMultipartUploadResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CompleteMultipartUploadRequestBuilder {
        private final String uniqueIdentifier;
        private final List parts;

        private CompleteMultipartUploadRequestBuilder(String uniqueIdentifier, List parts) {
            this.uniqueIdentifier = uniqueIdentifier;
            this.parts = parts;
        }

        /**
         * Build call for completeMultipartUpload
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> external upload initialized </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UploadsCompleteMultipartUploadRequest uploadsCompleteMultipartUploadRequest = buildBodyParams();
            return completeMultipartUploadCall(uploadsCompleteMultipartUploadRequest, _callback);
        }

        private UploadsCompleteMultipartUploadRequest buildBodyParams() {
            UploadsCompleteMultipartUploadRequest uploadsCompleteMultipartUploadRequest = new UploadsCompleteMultipartUploadRequest();
            uploadsCompleteMultipartUploadRequest.uniqueIdentifier(this.uniqueIdentifier);
            uploadsCompleteMultipartUploadRequest.parts(this.parts);
            return uploadsCompleteMultipartUploadRequest;
        }

        /**
         * Execute completeMultipartUpload request
         * @return UploadsCompleteMultipartUploadResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> external upload initialized </td><td>  -  </td></tr>
         </table>
         */
        public UploadsCompleteMultipartUploadResponse execute() throws ApiException {
            UploadsCompleteMultipartUploadRequest uploadsCompleteMultipartUploadRequest = buildBodyParams();
            ApiResponse<UploadsCompleteMultipartUploadResponse> localVarResp = completeMultipartUploadWithHttpInfo(uploadsCompleteMultipartUploadRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute completeMultipartUpload request with HTTP info returned
         * @return ApiResponse&lt;UploadsCompleteMultipartUploadResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> external upload initialized </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UploadsCompleteMultipartUploadResponse> executeWithHttpInfo() throws ApiException {
            UploadsCompleteMultipartUploadRequest uploadsCompleteMultipartUploadRequest = buildBodyParams();
            return completeMultipartUploadWithHttpInfo(uploadsCompleteMultipartUploadRequest);
        }

        /**
         * Execute completeMultipartUpload request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> external upload initialized </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UploadsCompleteMultipartUploadResponse> _callback) throws ApiException {
            UploadsCompleteMultipartUploadRequest uploadsCompleteMultipartUploadRequest = buildBodyParams();
            return completeMultipartUploadAsync(uploadsCompleteMultipartUploadRequest, _callback);
        }
    }

    /**
     * Complete multipart upload
     * Completes the multipart upload in the external store, and copies the file from its temporary location to its final location in the store. All of the parts must have been uploaded to the external storage provider. An Upload record will be completed in most cases once the file is copied to its final location.  You must have the correct permissions and CORS settings configured in your external provider. We support AWS S3 as the default. See:  https://meta.discourse.org/t/-/210469#s3-multipart-direct-uploads-4.  An external file store must be set up and &#x60;enable_direct_s3_uploads&#x60; must be set to true for this endpoint to function.  
     * @return CompleteMultipartUploadRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> external upload initialized </td><td>  -  </td></tr>
     </table>
     */
    public CompleteMultipartUploadRequestBuilder completeMultipartUpload(String uniqueIdentifier, List parts) throws IllegalArgumentException {
        if (uniqueIdentifier == null) throw new IllegalArgumentException("\"uniqueIdentifier\" is required but got null");
            

        if (parts == null) throw new IllegalArgumentException("\"parts\" is required but got null");
        return new CompleteMultipartUploadRequestBuilder(uniqueIdentifier, parts);
    }
    private okhttp3.Call createMultipartExternalUploadCall(UploadsCreateMultipartExternalUploadRequest uploadsCreateMultipartExternalUploadRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = uploadsCreateMultipartExternalUploadRequest;

        // create path and map variables
        String localVarPath = "/uploads/create-multipart.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createMultipartExternalUploadValidateBeforeCall(UploadsCreateMultipartExternalUploadRequest uploadsCreateMultipartExternalUploadRequest, final ApiCallback _callback) throws ApiException {
        return createMultipartExternalUploadCall(uploadsCreateMultipartExternalUploadRequest, _callback);

    }


    private ApiResponse<UploadsCreateMultipartExternalUploadResponse> createMultipartExternalUploadWithHttpInfo(UploadsCreateMultipartExternalUploadRequest uploadsCreateMultipartExternalUploadRequest) throws ApiException {
        okhttp3.Call localVarCall = createMultipartExternalUploadValidateBeforeCall(uploadsCreateMultipartExternalUploadRequest, null);
        Type localVarReturnType = new TypeToken<UploadsCreateMultipartExternalUploadResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createMultipartExternalUploadAsync(UploadsCreateMultipartExternalUploadRequest uploadsCreateMultipartExternalUploadRequest, final ApiCallback<UploadsCreateMultipartExternalUploadResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createMultipartExternalUploadValidateBeforeCall(uploadsCreateMultipartExternalUploadRequest, _callback);
        Type localVarReturnType = new TypeToken<UploadsCreateMultipartExternalUploadResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateMultipartExternalUploadRequestBuilder {
        private final String uploadType;
        private final String fileName;
        private final Integer fileSize;
        private UploadsInitiateDirectExternalUploadRequestMetadata metadata;

        private CreateMultipartExternalUploadRequestBuilder(String uploadType, String fileName, Integer fileSize) {
            this.uploadType = uploadType;
            this.fileName = fileName;
            this.fileSize = fileSize;
        }

        /**
         * Set metadata
         * @param metadata  (optional)
         * @return CreateMultipartExternalUploadRequestBuilder
         */
        public CreateMultipartExternalUploadRequestBuilder metadata(UploadsInitiateDirectExternalUploadRequestMetadata metadata) {
            this.metadata = metadata;
            return this;
        }
        
        /**
         * Build call for createMultipartExternalUpload
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> external upload initialized </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UploadsCreateMultipartExternalUploadRequest uploadsCreateMultipartExternalUploadRequest = buildBodyParams();
            return createMultipartExternalUploadCall(uploadsCreateMultipartExternalUploadRequest, _callback);
        }

        private UploadsCreateMultipartExternalUploadRequest buildBodyParams() {
            UploadsCreateMultipartExternalUploadRequest uploadsCreateMultipartExternalUploadRequest = new UploadsCreateMultipartExternalUploadRequest();
            if (this.uploadType != null)
            uploadsCreateMultipartExternalUploadRequest.uploadType(UploadsCreateMultipartExternalUploadRequest.UploadTypeEnum.fromValue(this.uploadType));
            uploadsCreateMultipartExternalUploadRequest.fileName(this.fileName);
            uploadsCreateMultipartExternalUploadRequest.fileSize(this.fileSize);
            uploadsCreateMultipartExternalUploadRequest.metadata(this.metadata);
            return uploadsCreateMultipartExternalUploadRequest;
        }

        /**
         * Execute createMultipartExternalUpload request
         * @return UploadsCreateMultipartExternalUploadResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> external upload initialized </td><td>  -  </td></tr>
         </table>
         */
        public UploadsCreateMultipartExternalUploadResponse execute() throws ApiException {
            UploadsCreateMultipartExternalUploadRequest uploadsCreateMultipartExternalUploadRequest = buildBodyParams();
            ApiResponse<UploadsCreateMultipartExternalUploadResponse> localVarResp = createMultipartExternalUploadWithHttpInfo(uploadsCreateMultipartExternalUploadRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createMultipartExternalUpload request with HTTP info returned
         * @return ApiResponse&lt;UploadsCreateMultipartExternalUploadResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> external upload initialized </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UploadsCreateMultipartExternalUploadResponse> executeWithHttpInfo() throws ApiException {
            UploadsCreateMultipartExternalUploadRequest uploadsCreateMultipartExternalUploadRequest = buildBodyParams();
            return createMultipartExternalUploadWithHttpInfo(uploadsCreateMultipartExternalUploadRequest);
        }

        /**
         * Execute createMultipartExternalUpload request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> external upload initialized </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UploadsCreateMultipartExternalUploadResponse> _callback) throws ApiException {
            UploadsCreateMultipartExternalUploadRequest uploadsCreateMultipartExternalUploadRequest = buildBodyParams();
            return createMultipartExternalUploadAsync(uploadsCreateMultipartExternalUploadRequest, _callback);
        }
    }

    /**
     * Creates a multipart external upload
     * Creates a multipart upload in the external storage provider, storing a temporary reference to the external upload similar to /get-presigned-put.  You must have the correct permissions and CORS settings configured in your external provider. We support AWS S3 as the default. See:  https://meta.discourse.org/t/-/210469#s3-multipart-direct-uploads-4.  An external file store must be set up and &#x60;enable_direct_s3_uploads&#x60; must be set to true for this endpoint to function.  
     * @return CreateMultipartExternalUploadRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> external upload initialized </td><td>  -  </td></tr>
     </table>
     */
    public CreateMultipartExternalUploadRequestBuilder createMultipartExternalUpload(String uploadType, String fileName, Integer fileSize) throws IllegalArgumentException {
        if (uploadType == null) throw new IllegalArgumentException("\"uploadType\" is required but got null");
            

        if (fileName == null) throw new IllegalArgumentException("\"fileName\" is required but got null");
            

        if (fileSize == null) throw new IllegalArgumentException("\"fileSize\" is required but got null");
        return new CreateMultipartExternalUploadRequestBuilder(uploadType, fileName, fileSize);
    }
    private okhttp3.Call createNewUploadCall(String type, Integer userId, Boolean synchronous, File _file, UploadsCreateNewUploadRequest uploadsCreateNewUploadRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = uploadsCreateNewUploadRequest;

        // create path and map variables
        String localVarPath = "/uploads.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (type != null) {
            localVarFormParams.put("type", type);
        }

        if (userId != null) {
            localVarFormParams.put("user_id", userId);
        }

        if (synchronous != null) {
            localVarFormParams.put("synchronous", synchronous);
        }

        if (_file != null) {
            localVarFormParams.put("file", _file);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewUploadValidateBeforeCall(String type, Integer userId, Boolean synchronous, File _file, UploadsCreateNewUploadRequest uploadsCreateNewUploadRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling createNewUpload(Async)");
        }

        return createNewUploadCall(type, userId, synchronous, _file, uploadsCreateNewUploadRequest, _callback);

    }


    private ApiResponse<UploadsCreateNewUploadResponse> createNewUploadWithHttpInfo(String type, Integer userId, Boolean synchronous, File _file, UploadsCreateNewUploadRequest uploadsCreateNewUploadRequest) throws ApiException {
        okhttp3.Call localVarCall = createNewUploadValidateBeforeCall(type, userId, synchronous, _file, uploadsCreateNewUploadRequest, null);
        Type localVarReturnType = new TypeToken<UploadsCreateNewUploadResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewUploadAsync(String type, Integer userId, Boolean synchronous, File _file, UploadsCreateNewUploadRequest uploadsCreateNewUploadRequest, final ApiCallback<UploadsCreateNewUploadResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewUploadValidateBeforeCall(type, userId, synchronous, _file, uploadsCreateNewUploadRequest, _callback);
        Type localVarReturnType = new TypeToken<UploadsCreateNewUploadResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewUploadRequestBuilder {
        private final String type;
        private Integer userId;
        private Boolean synchronous;
        private File _file;

        private CreateNewUploadRequestBuilder(String type) {
            this.type = type;
        }

        /**
         * Set userId
         * @param userId required if uploading an avatar (optional)
         * @return CreateNewUploadRequestBuilder
         */
        public CreateNewUploadRequestBuilder userId(Integer userId) {
            this.userId = userId;
            return this;
        }
        
        /**
         * Set synchronous
         * @param synchronous Use this flag to return an id and url (optional)
         * @return CreateNewUploadRequestBuilder
         */
        public CreateNewUploadRequestBuilder synchronous(Boolean synchronous) {
            this.synchronous = synchronous;
            return this;
        }
        
        /**
         * Set _file
         * @param _file  (optional)
         * @return CreateNewUploadRequestBuilder
         */
        public CreateNewUploadRequestBuilder _file(File _file) {
            this._file = _file;
            return this;
        }
        
        /**
         * Build call for createNewUpload
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> file uploaded </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UploadsCreateNewUploadRequest uploadsCreateNewUploadRequest = buildBodyParams();
            return createNewUploadCall(type, userId, synchronous, _file, uploadsCreateNewUploadRequest, _callback);
        }

        private UploadsCreateNewUploadRequest buildBodyParams() {
            UploadsCreateNewUploadRequest uploadsCreateNewUploadRequest = new UploadsCreateNewUploadRequest();
            if (this.type != null)
            uploadsCreateNewUploadRequest.type(UploadsCreateNewUploadRequest.TypeEnum.fromValue(this.type));
            uploadsCreateNewUploadRequest.userId(this.userId);
            uploadsCreateNewUploadRequest.synchronous(this.synchronous);
            uploadsCreateNewUploadRequest._file(this._file);
            return uploadsCreateNewUploadRequest;
        }

        /**
         * Execute createNewUpload request
         * @return UploadsCreateNewUploadResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> file uploaded </td><td>  -  </td></tr>
         </table>
         */
        public UploadsCreateNewUploadResponse execute() throws ApiException {
            UploadsCreateNewUploadRequest uploadsCreateNewUploadRequest = buildBodyParams();
            ApiResponse<UploadsCreateNewUploadResponse> localVarResp = createNewUploadWithHttpInfo(type, userId, synchronous, _file, uploadsCreateNewUploadRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewUpload request with HTTP info returned
         * @return ApiResponse&lt;UploadsCreateNewUploadResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> file uploaded </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UploadsCreateNewUploadResponse> executeWithHttpInfo() throws ApiException {
            UploadsCreateNewUploadRequest uploadsCreateNewUploadRequest = buildBodyParams();
            return createNewUploadWithHttpInfo(type, userId, synchronous, _file, uploadsCreateNewUploadRequest);
        }

        /**
         * Execute createNewUpload request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> file uploaded </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UploadsCreateNewUploadResponse> _callback) throws ApiException {
            UploadsCreateNewUploadRequest uploadsCreateNewUploadRequest = buildBodyParams();
            return createNewUploadAsync(type, userId, synchronous, _file, uploadsCreateNewUploadRequest, _callback);
        }
    }

    /**
     * Creates an upload
     * 
     * @param type  (required)
     * @return CreateNewUploadRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> file uploaded </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewUploadRequestBuilder createNewUpload(String type) throws IllegalArgumentException {
        if (type == null) throw new IllegalArgumentException("\"type\" is required but got null");
            

        return new CreateNewUploadRequestBuilder(type);
    }
    private okhttp3.Call generatePresignedUrlsForMultipartPartsCall(UploadsGeneratePresignedUrlsForMultipartPartsRequest uploadsGeneratePresignedUrlsForMultipartPartsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = uploadsGeneratePresignedUrlsForMultipartPartsRequest;

        // create path and map variables
        String localVarPath = "/uploads/batch-presign-multipart-parts.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call generatePresignedUrlsForMultipartPartsValidateBeforeCall(UploadsGeneratePresignedUrlsForMultipartPartsRequest uploadsGeneratePresignedUrlsForMultipartPartsRequest, final ApiCallback _callback) throws ApiException {
        return generatePresignedUrlsForMultipartPartsCall(uploadsGeneratePresignedUrlsForMultipartPartsRequest, _callback);

    }


    private ApiResponse<UploadsGeneratePresignedUrlsForMultipartPartsResponse> generatePresignedUrlsForMultipartPartsWithHttpInfo(UploadsGeneratePresignedUrlsForMultipartPartsRequest uploadsGeneratePresignedUrlsForMultipartPartsRequest) throws ApiException {
        okhttp3.Call localVarCall = generatePresignedUrlsForMultipartPartsValidateBeforeCall(uploadsGeneratePresignedUrlsForMultipartPartsRequest, null);
        Type localVarReturnType = new TypeToken<UploadsGeneratePresignedUrlsForMultipartPartsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call generatePresignedUrlsForMultipartPartsAsync(UploadsGeneratePresignedUrlsForMultipartPartsRequest uploadsGeneratePresignedUrlsForMultipartPartsRequest, final ApiCallback<UploadsGeneratePresignedUrlsForMultipartPartsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = generatePresignedUrlsForMultipartPartsValidateBeforeCall(uploadsGeneratePresignedUrlsForMultipartPartsRequest, _callback);
        Type localVarReturnType = new TypeToken<UploadsGeneratePresignedUrlsForMultipartPartsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GeneratePresignedUrlsForMultipartPartsRequestBuilder {
        private final List partNumbers;
        private final String uniqueIdentifier;

        private GeneratePresignedUrlsForMultipartPartsRequestBuilder(List partNumbers, String uniqueIdentifier) {
            this.partNumbers = partNumbers;
            this.uniqueIdentifier = uniqueIdentifier;
        }

        /**
         * Build call for generatePresignedUrlsForMultipartParts
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> external upload initialized </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UploadsGeneratePresignedUrlsForMultipartPartsRequest uploadsGeneratePresignedUrlsForMultipartPartsRequest = buildBodyParams();
            return generatePresignedUrlsForMultipartPartsCall(uploadsGeneratePresignedUrlsForMultipartPartsRequest, _callback);
        }

        private UploadsGeneratePresignedUrlsForMultipartPartsRequest buildBodyParams() {
            UploadsGeneratePresignedUrlsForMultipartPartsRequest uploadsGeneratePresignedUrlsForMultipartPartsRequest = new UploadsGeneratePresignedUrlsForMultipartPartsRequest();
            uploadsGeneratePresignedUrlsForMultipartPartsRequest.partNumbers(this.partNumbers);
            uploadsGeneratePresignedUrlsForMultipartPartsRequest.uniqueIdentifier(this.uniqueIdentifier);
            return uploadsGeneratePresignedUrlsForMultipartPartsRequest;
        }

        /**
         * Execute generatePresignedUrlsForMultipartParts request
         * @return UploadsGeneratePresignedUrlsForMultipartPartsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> external upload initialized </td><td>  -  </td></tr>
         </table>
         */
        public UploadsGeneratePresignedUrlsForMultipartPartsResponse execute() throws ApiException {
            UploadsGeneratePresignedUrlsForMultipartPartsRequest uploadsGeneratePresignedUrlsForMultipartPartsRequest = buildBodyParams();
            ApiResponse<UploadsGeneratePresignedUrlsForMultipartPartsResponse> localVarResp = generatePresignedUrlsForMultipartPartsWithHttpInfo(uploadsGeneratePresignedUrlsForMultipartPartsRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute generatePresignedUrlsForMultipartParts request with HTTP info returned
         * @return ApiResponse&lt;UploadsGeneratePresignedUrlsForMultipartPartsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> external upload initialized </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UploadsGeneratePresignedUrlsForMultipartPartsResponse> executeWithHttpInfo() throws ApiException {
            UploadsGeneratePresignedUrlsForMultipartPartsRequest uploadsGeneratePresignedUrlsForMultipartPartsRequest = buildBodyParams();
            return generatePresignedUrlsForMultipartPartsWithHttpInfo(uploadsGeneratePresignedUrlsForMultipartPartsRequest);
        }

        /**
         * Execute generatePresignedUrlsForMultipartParts request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> external upload initialized </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UploadsGeneratePresignedUrlsForMultipartPartsResponse> _callback) throws ApiException {
            UploadsGeneratePresignedUrlsForMultipartPartsRequest uploadsGeneratePresignedUrlsForMultipartPartsRequest = buildBodyParams();
            return generatePresignedUrlsForMultipartPartsAsync(uploadsGeneratePresignedUrlsForMultipartPartsRequest, _callback);
        }
    }

    /**
     * Generates batches of presigned URLs for multipart parts
     * Multipart uploads are uploaded in chunks or parts to individual presigned URLs, similar to the one generated by /generate-presigned-put. The part numbers provided must be between 1 and 10000. The total number of parts will depend on the chunk size in bytes that you intend to use to upload each chunk. For example a 12MB file may have 2 5MB chunks and a final 2MB chunk, for part numbers 1, 2, and 3.  This endpoint will return a presigned URL for each part number provided, which you can then use to send PUT requests for the binary chunk corresponding to that part. When the part is uploaded, the provider should return an ETag for the part, and this should be stored along with the part number, because this is needed to complete the multipart upload.  You must have the correct permissions and CORS settings configured in your external provider. We support AWS S3 as the default. See:  https://meta.discourse.org/t/-/210469#s3-multipart-direct-uploads-4.  An external file store must be set up and &#x60;enable_direct_s3_uploads&#x60; must be set to true for this endpoint to function.  
     * @return GeneratePresignedUrlsForMultipartPartsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> external upload initialized </td><td>  -  </td></tr>
     </table>
     */
    public GeneratePresignedUrlsForMultipartPartsRequestBuilder generatePresignedUrlsForMultipartParts(List partNumbers, String uniqueIdentifier) throws IllegalArgumentException {
        if (partNumbers == null) throw new IllegalArgumentException("\"partNumbers\" is required but got null");
        if (uniqueIdentifier == null) throw new IllegalArgumentException("\"uniqueIdentifier\" is required but got null");
            

        return new GeneratePresignedUrlsForMultipartPartsRequestBuilder(partNumbers, uniqueIdentifier);
    }
    private okhttp3.Call initiateDirectExternalUploadCall(UploadsInitiateDirectExternalUploadRequest uploadsInitiateDirectExternalUploadRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = uploadsInitiateDirectExternalUploadRequest;

        // create path and map variables
        String localVarPath = "/uploads/generate-presigned-put.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call initiateDirectExternalUploadValidateBeforeCall(UploadsInitiateDirectExternalUploadRequest uploadsInitiateDirectExternalUploadRequest, final ApiCallback _callback) throws ApiException {
        return initiateDirectExternalUploadCall(uploadsInitiateDirectExternalUploadRequest, _callback);

    }


    private ApiResponse<UploadsInitiateDirectExternalUploadResponse> initiateDirectExternalUploadWithHttpInfo(UploadsInitiateDirectExternalUploadRequest uploadsInitiateDirectExternalUploadRequest) throws ApiException {
        okhttp3.Call localVarCall = initiateDirectExternalUploadValidateBeforeCall(uploadsInitiateDirectExternalUploadRequest, null);
        Type localVarReturnType = new TypeToken<UploadsInitiateDirectExternalUploadResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call initiateDirectExternalUploadAsync(UploadsInitiateDirectExternalUploadRequest uploadsInitiateDirectExternalUploadRequest, final ApiCallback<UploadsInitiateDirectExternalUploadResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = initiateDirectExternalUploadValidateBeforeCall(uploadsInitiateDirectExternalUploadRequest, _callback);
        Type localVarReturnType = new TypeToken<UploadsInitiateDirectExternalUploadResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class InitiateDirectExternalUploadRequestBuilder {
        private final String type;
        private final String fileName;
        private final Integer fileSize;
        private UploadsInitiateDirectExternalUploadRequestMetadata metadata;

        private InitiateDirectExternalUploadRequestBuilder(String type, String fileName, Integer fileSize) {
            this.type = type;
            this.fileName = fileName;
            this.fileSize = fileSize;
        }

        /**
         * Set metadata
         * @param metadata  (optional)
         * @return InitiateDirectExternalUploadRequestBuilder
         */
        public InitiateDirectExternalUploadRequestBuilder metadata(UploadsInitiateDirectExternalUploadRequestMetadata metadata) {
            this.metadata = metadata;
            return this;
        }
        
        /**
         * Build call for initiateDirectExternalUpload
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> external upload initialized </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UploadsInitiateDirectExternalUploadRequest uploadsInitiateDirectExternalUploadRequest = buildBodyParams();
            return initiateDirectExternalUploadCall(uploadsInitiateDirectExternalUploadRequest, _callback);
        }

        private UploadsInitiateDirectExternalUploadRequest buildBodyParams() {
            UploadsInitiateDirectExternalUploadRequest uploadsInitiateDirectExternalUploadRequest = new UploadsInitiateDirectExternalUploadRequest();
            if (this.type != null)
            uploadsInitiateDirectExternalUploadRequest.type(UploadsInitiateDirectExternalUploadRequest.TypeEnum.fromValue(this.type));
            uploadsInitiateDirectExternalUploadRequest.fileName(this.fileName);
            uploadsInitiateDirectExternalUploadRequest.fileSize(this.fileSize);
            uploadsInitiateDirectExternalUploadRequest.metadata(this.metadata);
            return uploadsInitiateDirectExternalUploadRequest;
        }

        /**
         * Execute initiateDirectExternalUpload request
         * @return UploadsInitiateDirectExternalUploadResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> external upload initialized </td><td>  -  </td></tr>
         </table>
         */
        public UploadsInitiateDirectExternalUploadResponse execute() throws ApiException {
            UploadsInitiateDirectExternalUploadRequest uploadsInitiateDirectExternalUploadRequest = buildBodyParams();
            ApiResponse<UploadsInitiateDirectExternalUploadResponse> localVarResp = initiateDirectExternalUploadWithHttpInfo(uploadsInitiateDirectExternalUploadRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute initiateDirectExternalUpload request with HTTP info returned
         * @return ApiResponse&lt;UploadsInitiateDirectExternalUploadResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> external upload initialized </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UploadsInitiateDirectExternalUploadResponse> executeWithHttpInfo() throws ApiException {
            UploadsInitiateDirectExternalUploadRequest uploadsInitiateDirectExternalUploadRequest = buildBodyParams();
            return initiateDirectExternalUploadWithHttpInfo(uploadsInitiateDirectExternalUploadRequest);
        }

        /**
         * Execute initiateDirectExternalUpload request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> external upload initialized </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UploadsInitiateDirectExternalUploadResponse> _callback) throws ApiException {
            UploadsInitiateDirectExternalUploadRequest uploadsInitiateDirectExternalUploadRequest = buildBodyParams();
            return initiateDirectExternalUploadAsync(uploadsInitiateDirectExternalUploadRequest, _callback);
        }
    }

    /**
     * Initiates a direct external upload
     * Direct external uploads bypass the usual method of creating uploads via the POST /uploads route, and upload directly to an external provider, which by default is S3. This route begins the process, and will return a unique identifier for the external upload as well as a presigned URL which is where the file binary blob should be uploaded to.  Once the upload is complete to the external service, you must call the POST /complete-external-upload route using the unique identifier returned by this route, which will create any required Upload record in the Discourse database and also move file from its temporary location to the final destination in the external storage service.  You must have the correct permissions and CORS settings configured in your external provider. We support AWS S3 as the default. See:  https://meta.discourse.org/t/-/210469#s3-multipart-direct-uploads-4.  An external file store must be set up and &#x60;enable_direct_s3_uploads&#x60; must be set to true for this endpoint to function.  
     * @return InitiateDirectExternalUploadRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> external upload initialized </td><td>  -  </td></tr>
     </table>
     */
    public InitiateDirectExternalUploadRequestBuilder initiateDirectExternalUpload(String type, String fileName, Integer fileSize) throws IllegalArgumentException {
        if (type == null) throw new IllegalArgumentException("\"type\" is required but got null");
            

        if (fileName == null) throw new IllegalArgumentException("\"fileName\" is required but got null");
            

        if (fileSize == null) throw new IllegalArgumentException("\"fileSize\" is required but got null");
        return new InitiateDirectExternalUploadRequestBuilder(type, fileName, fileSize);
    }
}
