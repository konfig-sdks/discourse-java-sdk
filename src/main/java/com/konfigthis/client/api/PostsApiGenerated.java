/*
 * Discourse API Documentation
 * This page contains the documentation on how to use Discourse through API calls.  > Note: For any endpoints not listed you can follow the [reverse engineer the Discourse API](https://meta.discourse.org/t/-/20576) guide to figure out how to use an API endpoint.  ### Request Content-Type  The Content-Type for POST and PUT requests can be set to `application/x-www-form-urlencoded`, `multipart/form-data`, or `application/json`.  ### Endpoint Names and Response Content-Type  Most API endpoints provide the same content as their HTML counterparts. For example the URL `/categories` serves a list of categories, the `/categories.json` API provides the same information in JSON format.  Instead of sending API requests to `/categories.json` you may also send them to `/categories` and add an `Accept: application/json` header to the request to get the JSON response. Sending requests with the `Accept` header is necessary if you want to use URLs for related endpoints returned by the API, such as pagination URLs. These URLs are returned without the `.json` prefix so you need to add the header in order to get the correct response format.  ### Authentication  Some endpoints do not require any authentication, pretty much anything else will require you to be authenticated.  To become authenticated you will need to create an API Key from the admin panel.  Once you have your API Key you can pass it in along with your API Username as an HTTP header like this:  ``` curl -X GET \"http://127.0.0.1:3000/admin/users/list/active.json\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" ```  and this is how POST requests will look:  ``` curl -X POST \"http://127.0.0.1:3000/categories\" \\ -H \"Content-Type: multipart/form-data;\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" \\ -F \"name=89853c20-4409-e91a-a8ea-f6cdff96aaaa\" \\ -F \"color=49d9e9\" \\ -F \"text_color=f0fcfd\" ```  ### Boolean values  If an endpoint accepts a boolean be sure to specify it as a lowercase `true` or `false` value unless noted otherwise. 
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.PostsCreateTopicPostMessageRequest;
import com.konfigthis.client.model.PostsCreateTopicPostMessageResponse;
import com.konfigthis.client.model.PostsDeleteSinglePostRequest;
import com.konfigthis.client.model.PostsGetSinglePostLikesResponse;
import com.konfigthis.client.model.PostsLikePostActionRequest;
import com.konfigthis.client.model.PostsLikePostActionResponse;
import com.konfigthis.client.model.PostsListLatestPostsAcrossTopicsResponse;
import com.konfigthis.client.model.PostsListRepliesToPostResponseInner;
import com.konfigthis.client.model.PostsLockPostActionRequest;
import com.konfigthis.client.model.PostsLockPostActionResponse;
import com.konfigthis.client.model.PostsUpdateSinglePostJsonRequest;
import com.konfigthis.client.model.PostsUpdateSinglePostJsonRequestPost;
import com.konfigthis.client.model.PostsUpdateSinglePostJsonResponse;
import java.util.Set;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class PostsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PostsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public PostsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createTopicPostMessageCall(PostsCreateTopicPostMessageRequest postsCreateTopicPostMessageRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = postsCreateTopicPostMessageRequest;

        // create path and map variables
        String localVarPath = "/posts.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createTopicPostMessageValidateBeforeCall(PostsCreateTopicPostMessageRequest postsCreateTopicPostMessageRequest, final ApiCallback _callback) throws ApiException {
        return createTopicPostMessageCall(postsCreateTopicPostMessageRequest, _callback);

    }


    private ApiResponse<PostsCreateTopicPostMessageResponse> createTopicPostMessageWithHttpInfo(PostsCreateTopicPostMessageRequest postsCreateTopicPostMessageRequest) throws ApiException {
        okhttp3.Call localVarCall = createTopicPostMessageValidateBeforeCall(postsCreateTopicPostMessageRequest, null);
        Type localVarReturnType = new TypeToken<PostsCreateTopicPostMessageResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createTopicPostMessageAsync(PostsCreateTopicPostMessageRequest postsCreateTopicPostMessageRequest, final ApiCallback<PostsCreateTopicPostMessageResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createTopicPostMessageValidateBeforeCall(postsCreateTopicPostMessageRequest, _callback);
        Type localVarReturnType = new TypeToken<PostsCreateTopicPostMessageResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateTopicPostMessageRequestBuilder {
        private final String raw;
        private String title;
        private Integer topicId;
        private Integer category;
        private String targetRecipients;
        private String targetUsernames;
        private String archetype;
        private String createdAt;
        private Integer replyToPostNumber;
        private String embedUrl;
        private String externalId;

        private CreateTopicPostMessageRequestBuilder(String raw) {
            this.raw = raw;
        }

        /**
         * Set title
         * @param title Required if creating a new topic or new private message. (optional)
         * @return CreateTopicPostMessageRequestBuilder
         */
        public CreateTopicPostMessageRequestBuilder title(String title) {
            this.title = title;
            return this;
        }
        
        /**
         * Set topicId
         * @param topicId Required if creating a new post. (optional)
         * @return CreateTopicPostMessageRequestBuilder
         */
        public CreateTopicPostMessageRequestBuilder topicId(Integer topicId) {
            this.topicId = topicId;
            return this;
        }
        
        /**
         * Set category
         * @param category Optional if creating a new topic, and ignored if creating a new post. (optional)
         * @return CreateTopicPostMessageRequestBuilder
         */
        public CreateTopicPostMessageRequestBuilder category(Integer category) {
            this.category = category;
            return this;
        }
        
        /**
         * Set targetRecipients
         * @param targetRecipients Required for private message, comma separated. (optional)
         * @return CreateTopicPostMessageRequestBuilder
         */
        public CreateTopicPostMessageRequestBuilder targetRecipients(String targetRecipients) {
            this.targetRecipients = targetRecipients;
            return this;
        }
        
        /**
         * Set targetUsernames
         * @param targetUsernames Deprecated. Use target_recipients instead. (optional)
         * @return CreateTopicPostMessageRequestBuilder
         */
        public CreateTopicPostMessageRequestBuilder targetUsernames(String targetUsernames) {
            this.targetUsernames = targetUsernames;
            return this;
        }
        
        /**
         * Set archetype
         * @param archetype Required for new private message. (optional)
         * @return CreateTopicPostMessageRequestBuilder
         */
        public CreateTopicPostMessageRequestBuilder archetype(String archetype) {
            this.archetype = archetype;
            return this;
        }
        
        /**
         * Set createdAt
         * @param createdAt  (optional)
         * @return CreateTopicPostMessageRequestBuilder
         */
        public CreateTopicPostMessageRequestBuilder createdAt(String createdAt) {
            this.createdAt = createdAt;
            return this;
        }
        
        /**
         * Set replyToPostNumber
         * @param replyToPostNumber Optional, the post number to reply to inside a topic. (optional)
         * @return CreateTopicPostMessageRequestBuilder
         */
        public CreateTopicPostMessageRequestBuilder replyToPostNumber(Integer replyToPostNumber) {
            this.replyToPostNumber = replyToPostNumber;
            return this;
        }
        
        /**
         * Set embedUrl
         * @param embedUrl Provide a URL from a remote system to associate a forum topic with that URL, typically for using Discourse as a comments system for an external blog. (optional)
         * @return CreateTopicPostMessageRequestBuilder
         */
        public CreateTopicPostMessageRequestBuilder embedUrl(String embedUrl) {
            this.embedUrl = embedUrl;
            return this;
        }
        
        /**
         * Set externalId
         * @param externalId Provide an external_id from a remote system to associate a forum topic with that id. (optional)
         * @return CreateTopicPostMessageRequestBuilder
         */
        public CreateTopicPostMessageRequestBuilder externalId(String externalId) {
            this.externalId = externalId;
            return this;
        }
        
        /**
         * Build call for createTopicPostMessage
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> post created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PostsCreateTopicPostMessageRequest postsCreateTopicPostMessageRequest = buildBodyParams();
            return createTopicPostMessageCall(postsCreateTopicPostMessageRequest, _callback);
        }

        private PostsCreateTopicPostMessageRequest buildBodyParams() {
            PostsCreateTopicPostMessageRequest postsCreateTopicPostMessageRequest = new PostsCreateTopicPostMessageRequest();
            postsCreateTopicPostMessageRequest.title(this.title);
            postsCreateTopicPostMessageRequest.raw(this.raw);
            postsCreateTopicPostMessageRequest.topicId(this.topicId);
            postsCreateTopicPostMessageRequest.category(this.category);
            postsCreateTopicPostMessageRequest.targetRecipients(this.targetRecipients);
            postsCreateTopicPostMessageRequest.targetUsernames(this.targetUsernames);
            postsCreateTopicPostMessageRequest.archetype(this.archetype);
            postsCreateTopicPostMessageRequest.createdAt(this.createdAt);
            postsCreateTopicPostMessageRequest.replyToPostNumber(this.replyToPostNumber);
            postsCreateTopicPostMessageRequest.embedUrl(this.embedUrl);
            postsCreateTopicPostMessageRequest.externalId(this.externalId);
            return postsCreateTopicPostMessageRequest;
        }

        /**
         * Execute createTopicPostMessage request
         * @return PostsCreateTopicPostMessageResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> post created </td><td>  -  </td></tr>
         </table>
         */
        public PostsCreateTopicPostMessageResponse execute() throws ApiException {
            PostsCreateTopicPostMessageRequest postsCreateTopicPostMessageRequest = buildBodyParams();
            ApiResponse<PostsCreateTopicPostMessageResponse> localVarResp = createTopicPostMessageWithHttpInfo(postsCreateTopicPostMessageRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createTopicPostMessage request with HTTP info returned
         * @return ApiResponse&lt;PostsCreateTopicPostMessageResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> post created </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PostsCreateTopicPostMessageResponse> executeWithHttpInfo() throws ApiException {
            PostsCreateTopicPostMessageRequest postsCreateTopicPostMessageRequest = buildBodyParams();
            return createTopicPostMessageWithHttpInfo(postsCreateTopicPostMessageRequest);
        }

        /**
         * Execute createTopicPostMessage request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> post created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PostsCreateTopicPostMessageResponse> _callback) throws ApiException {
            PostsCreateTopicPostMessageRequest postsCreateTopicPostMessageRequest = buildBodyParams();
            return createTopicPostMessageAsync(postsCreateTopicPostMessageRequest, _callback);
        }
    }

    /**
     * Creates a new topic, a new post, or a private message
     * 
     * @return CreateTopicPostMessageRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> post created </td><td>  -  </td></tr>
     </table>
     */
    public CreateTopicPostMessageRequestBuilder createTopicPostMessage(String raw) throws IllegalArgumentException {
        if (raw == null) throw new IllegalArgumentException("\"raw\" is required but got null");
            

        return new CreateTopicPostMessageRequestBuilder(raw);
    }
    private okhttp3.Call deleteSinglePostCall(Integer id, PostsDeleteSinglePostRequest postsDeleteSinglePostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = postsDeleteSinglePostRequest;

        // create path and map variables
        String localVarPath = "/posts/{id}.json"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteSinglePostValidateBeforeCall(Integer id, PostsDeleteSinglePostRequest postsDeleteSinglePostRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteSinglePost(Async)");
        }

        return deleteSinglePostCall(id, postsDeleteSinglePostRequest, _callback);

    }


    private ApiResponse<Void> deleteSinglePostWithHttpInfo(Integer id, PostsDeleteSinglePostRequest postsDeleteSinglePostRequest) throws ApiException {
        okhttp3.Call localVarCall = deleteSinglePostValidateBeforeCall(id, postsDeleteSinglePostRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteSinglePostAsync(Integer id, PostsDeleteSinglePostRequest postsDeleteSinglePostRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteSinglePostValidateBeforeCall(id, postsDeleteSinglePostRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteSinglePostRequestBuilder {
        private final Integer id;
        private Boolean forceDestroy;

        private DeleteSinglePostRequestBuilder(Integer id) {
            this.id = id;
        }

        /**
         * Set forceDestroy
         * @param forceDestroy The &#x60;SiteSetting.can_permanently_delete&#x60; needs to be enabled first before this param can be used. Also this endpoint needs to be called first without &#x60;force_destroy&#x60; and then followed up with a second call 5 minutes later with &#x60;force_destroy&#x60; to permanently delete. (optional)
         * @return DeleteSinglePostRequestBuilder
         */
        public DeleteSinglePostRequestBuilder forceDestroy(Boolean forceDestroy) {
            this.forceDestroy = forceDestroy;
            return this;
        }
        
        /**
         * Build call for deleteSinglePost
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> success response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PostsDeleteSinglePostRequest postsDeleteSinglePostRequest = buildBodyParams();
            return deleteSinglePostCall(id, postsDeleteSinglePostRequest, _callback);
        }

        private PostsDeleteSinglePostRequest buildBodyParams() {
            PostsDeleteSinglePostRequest postsDeleteSinglePostRequest = new PostsDeleteSinglePostRequest();
            postsDeleteSinglePostRequest.forceDestroy(this.forceDestroy);
            return postsDeleteSinglePostRequest;
        }

        /**
         * Execute deleteSinglePost request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> success response </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            PostsDeleteSinglePostRequest postsDeleteSinglePostRequest = buildBodyParams();
            deleteSinglePostWithHttpInfo(id, postsDeleteSinglePostRequest);
        }

        /**
         * Execute deleteSinglePost request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> success response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            PostsDeleteSinglePostRequest postsDeleteSinglePostRequest = buildBodyParams();
            return deleteSinglePostWithHttpInfo(id, postsDeleteSinglePostRequest);
        }

        /**
         * Execute deleteSinglePost request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> success response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            PostsDeleteSinglePostRequest postsDeleteSinglePostRequest = buildBodyParams();
            return deleteSinglePostAsync(id, postsDeleteSinglePostRequest, _callback);
        }
    }

    /**
     * delete a single post
     * 
     * @param id  (required)
     * @return DeleteSinglePostRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success response </td><td>  -  </td></tr>
     </table>
     */
    public DeleteSinglePostRequestBuilder deleteSinglePost(Integer id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        return new DeleteSinglePostRequestBuilder(id);
    }
    private okhttp3.Call getSinglePostLikesCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/posts/{id}.json"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSinglePostLikesValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getSinglePostLikes(Async)");
        }

        return getSinglePostLikesCall(id, _callback);

    }


    private ApiResponse<PostsGetSinglePostLikesResponse> getSinglePostLikesWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getSinglePostLikesValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<PostsGetSinglePostLikesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSinglePostLikesAsync(String id, final ApiCallback<PostsGetSinglePostLikesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSinglePostLikesValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<PostsGetSinglePostLikesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSinglePostLikesRequestBuilder {
        private final String id;

        private GetSinglePostLikesRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Build call for getSinglePostLikes
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> single post </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSinglePostLikesCall(id, _callback);
        }


        /**
         * Execute getSinglePostLikes request
         * @return PostsGetSinglePostLikesResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> single post </td><td>  -  </td></tr>
         </table>
         */
        public PostsGetSinglePostLikesResponse execute() throws ApiException {
            ApiResponse<PostsGetSinglePostLikesResponse> localVarResp = getSinglePostLikesWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSinglePostLikes request with HTTP info returned
         * @return ApiResponse&lt;PostsGetSinglePostLikesResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> single post </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PostsGetSinglePostLikesResponse> executeWithHttpInfo() throws ApiException {
            return getSinglePostLikesWithHttpInfo(id);
        }

        /**
         * Execute getSinglePostLikes request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> single post </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PostsGetSinglePostLikesResponse> _callback) throws ApiException {
            return getSinglePostLikesAsync(id, _callback);
        }
    }

    /**
     * Retrieve a single post
     * This endpoint can be used to get the number of likes on a post using the &#x60;actions_summary&#x60; property in the response. &#x60;actions_summary&#x60; responses with the id of &#x60;2&#x60; signify a &#x60;like&#x60;. If there are no &#x60;actions_summary&#x60; items with the id of &#x60;2&#x60;, that means there are 0 likes. Other ids likely refer to various different flag types. 
     * @param id  (required)
     * @return GetSinglePostLikesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> single post </td><td>  -  </td></tr>
     </table>
     */
    public GetSinglePostLikesRequestBuilder getSinglePostLikes(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new GetSinglePostLikesRequestBuilder(id);
    }
    private okhttp3.Call likePostActionCall(String apiKey, String apiUsername, PostsLikePostActionRequest postsLikePostActionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = postsLikePostActionRequest;

        // create path and map variables
        String localVarPath = "/post_actions.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarHeaderParams.put("Api-Key", localVarApiClient.parameterToString(apiKey));
        }

        if (apiUsername != null) {
            localVarHeaderParams.put("Api-Username", localVarApiClient.parameterToString(apiUsername));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call likePostActionValidateBeforeCall(String apiKey, String apiUsername, PostsLikePostActionRequest postsLikePostActionRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling likePostAction(Async)");
        }

        // verify the required parameter 'apiUsername' is set
        if (apiUsername == null) {
            throw new ApiException("Missing the required parameter 'apiUsername' when calling likePostAction(Async)");
        }

        return likePostActionCall(apiKey, apiUsername, postsLikePostActionRequest, _callback);

    }


    private ApiResponse<PostsLikePostActionResponse> likePostActionWithHttpInfo(String apiKey, String apiUsername, PostsLikePostActionRequest postsLikePostActionRequest) throws ApiException {
        okhttp3.Call localVarCall = likePostActionValidateBeforeCall(apiKey, apiUsername, postsLikePostActionRequest, null);
        Type localVarReturnType = new TypeToken<PostsLikePostActionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call likePostActionAsync(String apiKey, String apiUsername, PostsLikePostActionRequest postsLikePostActionRequest, final ApiCallback<PostsLikePostActionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = likePostActionValidateBeforeCall(apiKey, apiUsername, postsLikePostActionRequest, _callback);
        Type localVarReturnType = new TypeToken<PostsLikePostActionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class LikePostActionRequestBuilder {
        private final Integer id;
        private final Integer postActionTypeId;
        private final String apiKey;
        private final String apiUsername;
        private Boolean flagTopic;

        private LikePostActionRequestBuilder(Integer id, Integer postActionTypeId, String apiKey, String apiUsername) {
            this.id = id;
            this.postActionTypeId = postActionTypeId;
            this.apiKey = apiKey;
            this.apiUsername = apiUsername;
        }

        /**
         * Set flagTopic
         * @param flagTopic  (optional)
         * @return LikePostActionRequestBuilder
         */
        public LikePostActionRequestBuilder flagTopic(Boolean flagTopic) {
            this.flagTopic = flagTopic;
            return this;
        }
        
        /**
         * Build call for likePostAction
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> post updated </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PostsLikePostActionRequest postsLikePostActionRequest = buildBodyParams();
            return likePostActionCall(apiKey, apiUsername, postsLikePostActionRequest, _callback);
        }

        private PostsLikePostActionRequest buildBodyParams() {
            PostsLikePostActionRequest postsLikePostActionRequest = new PostsLikePostActionRequest();
            postsLikePostActionRequest.id(this.id);
            postsLikePostActionRequest.postActionTypeId(this.postActionTypeId);
            postsLikePostActionRequest.flagTopic(this.flagTopic);
            return postsLikePostActionRequest;
        }

        /**
         * Execute likePostAction request
         * @return PostsLikePostActionResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> post updated </td><td>  -  </td></tr>
         </table>
         */
        public PostsLikePostActionResponse execute() throws ApiException {
            PostsLikePostActionRequest postsLikePostActionRequest = buildBodyParams();
            ApiResponse<PostsLikePostActionResponse> localVarResp = likePostActionWithHttpInfo(apiKey, apiUsername, postsLikePostActionRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute likePostAction request with HTTP info returned
         * @return ApiResponse&lt;PostsLikePostActionResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> post updated </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PostsLikePostActionResponse> executeWithHttpInfo() throws ApiException {
            PostsLikePostActionRequest postsLikePostActionRequest = buildBodyParams();
            return likePostActionWithHttpInfo(apiKey, apiUsername, postsLikePostActionRequest);
        }

        /**
         * Execute likePostAction request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> post updated </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PostsLikePostActionResponse> _callback) throws ApiException {
            PostsLikePostActionRequest postsLikePostActionRequest = buildBodyParams();
            return likePostActionAsync(apiKey, apiUsername, postsLikePostActionRequest, _callback);
        }
    }

    /**
     * Like a post and other actions
     * 
     * @param apiKey  (required)
     * @param apiUsername  (required)
     * @return LikePostActionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> post updated </td><td>  -  </td></tr>
     </table>
     */
    public LikePostActionRequestBuilder likePostAction(Integer id, Integer postActionTypeId, String apiKey, String apiUsername) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        if (postActionTypeId == null) throw new IllegalArgumentException("\"postActionTypeId\" is required but got null");
        if (apiKey == null) throw new IllegalArgumentException("\"apiKey\" is required but got null");
            

        if (apiUsername == null) throw new IllegalArgumentException("\"apiUsername\" is required but got null");
            

        return new LikePostActionRequestBuilder(id, postActionTypeId, apiKey, apiUsername);
    }
    private okhttp3.Call listLatestPostsAcrossTopicsCall(String apiKey, String apiUsername, String before, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/posts.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (before != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before", before));
        }

        if (apiKey != null) {
            localVarHeaderParams.put("Api-Key", localVarApiClient.parameterToString(apiKey));
        }

        if (apiUsername != null) {
            localVarHeaderParams.put("Api-Username", localVarApiClient.parameterToString(apiUsername));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listLatestPostsAcrossTopicsValidateBeforeCall(String apiKey, String apiUsername, String before, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling listLatestPostsAcrossTopics(Async)");
        }

        // verify the required parameter 'apiUsername' is set
        if (apiUsername == null) {
            throw new ApiException("Missing the required parameter 'apiUsername' when calling listLatestPostsAcrossTopics(Async)");
        }

        return listLatestPostsAcrossTopicsCall(apiKey, apiUsername, before, _callback);

    }


    private ApiResponse<PostsListLatestPostsAcrossTopicsResponse> listLatestPostsAcrossTopicsWithHttpInfo(String apiKey, String apiUsername, String before) throws ApiException {
        okhttp3.Call localVarCall = listLatestPostsAcrossTopicsValidateBeforeCall(apiKey, apiUsername, before, null);
        Type localVarReturnType = new TypeToken<PostsListLatestPostsAcrossTopicsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listLatestPostsAcrossTopicsAsync(String apiKey, String apiUsername, String before, final ApiCallback<PostsListLatestPostsAcrossTopicsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listLatestPostsAcrossTopicsValidateBeforeCall(apiKey, apiUsername, before, _callback);
        Type localVarReturnType = new TypeToken<PostsListLatestPostsAcrossTopicsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListLatestPostsAcrossTopicsRequestBuilder {
        private final String apiKey;
        private final String apiUsername;
        private String before;

        private ListLatestPostsAcrossTopicsRequestBuilder(String apiKey, String apiUsername) {
            this.apiKey = apiKey;
            this.apiUsername = apiUsername;
        }

        /**
         * Set before
         * @param before Load posts with an id lower than this value. Useful for pagination. (optional)
         * @return ListLatestPostsAcrossTopicsRequestBuilder
         */
        public ListLatestPostsAcrossTopicsRequestBuilder before(String before) {
            this.before = before;
            return this;
        }
        
        /**
         * Build call for listLatestPostsAcrossTopics
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> latest posts </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listLatestPostsAcrossTopicsCall(apiKey, apiUsername, before, _callback);
        }


        /**
         * Execute listLatestPostsAcrossTopics request
         * @return PostsListLatestPostsAcrossTopicsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> latest posts </td><td>  -  </td></tr>
         </table>
         */
        public PostsListLatestPostsAcrossTopicsResponse execute() throws ApiException {
            ApiResponse<PostsListLatestPostsAcrossTopicsResponse> localVarResp = listLatestPostsAcrossTopicsWithHttpInfo(apiKey, apiUsername, before);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listLatestPostsAcrossTopics request with HTTP info returned
         * @return ApiResponse&lt;PostsListLatestPostsAcrossTopicsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> latest posts </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PostsListLatestPostsAcrossTopicsResponse> executeWithHttpInfo() throws ApiException {
            return listLatestPostsAcrossTopicsWithHttpInfo(apiKey, apiUsername, before);
        }

        /**
         * Execute listLatestPostsAcrossTopics request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> latest posts </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PostsListLatestPostsAcrossTopicsResponse> _callback) throws ApiException {
            return listLatestPostsAcrossTopicsAsync(apiKey, apiUsername, before, _callback);
        }
    }

    /**
     * List latest posts across topics
     * 
     * @param apiKey  (required)
     * @param apiUsername  (required)
     * @return ListLatestPostsAcrossTopicsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> latest posts </td><td>  -  </td></tr>
     </table>
     */
    public ListLatestPostsAcrossTopicsRequestBuilder listLatestPostsAcrossTopics(String apiKey, String apiUsername) throws IllegalArgumentException {
        if (apiKey == null) throw new IllegalArgumentException("\"apiKey\" is required but got null");
            

        if (apiUsername == null) throw new IllegalArgumentException("\"apiUsername\" is required but got null");
            

        return new ListLatestPostsAcrossTopicsRequestBuilder(apiKey, apiUsername);
    }
    private okhttp3.Call listRepliesToPostCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/posts/{id}/replies.json"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listRepliesToPostValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling listRepliesToPost(Async)");
        }

        return listRepliesToPostCall(id, _callback);

    }


    private ApiResponse<Set<PostsListRepliesToPostResponseInner>> listRepliesToPostWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = listRepliesToPostValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Set<PostsListRepliesToPostResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listRepliesToPostAsync(String id, final ApiCallback<Set<PostsListRepliesToPostResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listRepliesToPostValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Set<PostsListRepliesToPostResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListRepliesToPostRequestBuilder {
        private final String id;

        private ListRepliesToPostRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Build call for listRepliesToPost
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> post replies </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listRepliesToPostCall(id, _callback);
        }


        /**
         * Execute listRepliesToPost request
         * @return Set&lt;PostsListRepliesToPostResponseInner&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> post replies </td><td>  -  </td></tr>
         </table>
         */
        public Set<PostsListRepliesToPostResponseInner> execute() throws ApiException {
            ApiResponse<Set<PostsListRepliesToPostResponseInner>> localVarResp = listRepliesToPostWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listRepliesToPost request with HTTP info returned
         * @return ApiResponse&lt;Set&lt;PostsListRepliesToPostResponseInner&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> post replies </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Set<PostsListRepliesToPostResponseInner>> executeWithHttpInfo() throws ApiException {
            return listRepliesToPostWithHttpInfo(id);
        }

        /**
         * Execute listRepliesToPost request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> post replies </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Set<PostsListRepliesToPostResponseInner>> _callback) throws ApiException {
            return listRepliesToPostAsync(id, _callback);
        }
    }

    /**
     * List replies to a post
     * 
     * @param id  (required)
     * @return ListRepliesToPostRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> post replies </td><td>  -  </td></tr>
     </table>
     */
    public ListRepliesToPostRequestBuilder listRepliesToPost(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new ListRepliesToPostRequestBuilder(id);
    }
    private okhttp3.Call lockPostActionCall(String apiKey, String apiUsername, String id, PostsLockPostActionRequest postsLockPostActionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = postsLockPostActionRequest;

        // create path and map variables
        String localVarPath = "/posts/{id}/locked.json"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarHeaderParams.put("Api-Key", localVarApiClient.parameterToString(apiKey));
        }

        if (apiUsername != null) {
            localVarHeaderParams.put("Api-Username", localVarApiClient.parameterToString(apiUsername));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call lockPostActionValidateBeforeCall(String apiKey, String apiUsername, String id, PostsLockPostActionRequest postsLockPostActionRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling lockPostAction(Async)");
        }

        // verify the required parameter 'apiUsername' is set
        if (apiUsername == null) {
            throw new ApiException("Missing the required parameter 'apiUsername' when calling lockPostAction(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling lockPostAction(Async)");
        }

        return lockPostActionCall(apiKey, apiUsername, id, postsLockPostActionRequest, _callback);

    }


    private ApiResponse<PostsLockPostActionResponse> lockPostActionWithHttpInfo(String apiKey, String apiUsername, String id, PostsLockPostActionRequest postsLockPostActionRequest) throws ApiException {
        okhttp3.Call localVarCall = lockPostActionValidateBeforeCall(apiKey, apiUsername, id, postsLockPostActionRequest, null);
        Type localVarReturnType = new TypeToken<PostsLockPostActionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call lockPostActionAsync(String apiKey, String apiUsername, String id, PostsLockPostActionRequest postsLockPostActionRequest, final ApiCallback<PostsLockPostActionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = lockPostActionValidateBeforeCall(apiKey, apiUsername, id, postsLockPostActionRequest, _callback);
        Type localVarReturnType = new TypeToken<PostsLockPostActionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class LockPostActionRequestBuilder {
        private final String locked;
        private final String apiKey;
        private final String apiUsername;
        private final String id;

        private LockPostActionRequestBuilder(String locked, String apiKey, String apiUsername, String id) {
            this.locked = locked;
            this.apiKey = apiKey;
            this.apiUsername = apiUsername;
            this.id = id;
        }

        /**
         * Build call for lockPostAction
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> post updated </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PostsLockPostActionRequest postsLockPostActionRequest = buildBodyParams();
            return lockPostActionCall(apiKey, apiUsername, id, postsLockPostActionRequest, _callback);
        }

        private PostsLockPostActionRequest buildBodyParams() {
            PostsLockPostActionRequest postsLockPostActionRequest = new PostsLockPostActionRequest();
            postsLockPostActionRequest.locked(this.locked);
            return postsLockPostActionRequest;
        }

        /**
         * Execute lockPostAction request
         * @return PostsLockPostActionResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> post updated </td><td>  -  </td></tr>
         </table>
         */
        public PostsLockPostActionResponse execute() throws ApiException {
            PostsLockPostActionRequest postsLockPostActionRequest = buildBodyParams();
            ApiResponse<PostsLockPostActionResponse> localVarResp = lockPostActionWithHttpInfo(apiKey, apiUsername, id, postsLockPostActionRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute lockPostAction request with HTTP info returned
         * @return ApiResponse&lt;PostsLockPostActionResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> post updated </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PostsLockPostActionResponse> executeWithHttpInfo() throws ApiException {
            PostsLockPostActionRequest postsLockPostActionRequest = buildBodyParams();
            return lockPostActionWithHttpInfo(apiKey, apiUsername, id, postsLockPostActionRequest);
        }

        /**
         * Execute lockPostAction request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> post updated </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PostsLockPostActionResponse> _callback) throws ApiException {
            PostsLockPostActionRequest postsLockPostActionRequest = buildBodyParams();
            return lockPostActionAsync(apiKey, apiUsername, id, postsLockPostActionRequest, _callback);
        }
    }

    /**
     * Lock a post from being edited
     * 
     * @param apiKey  (required)
     * @param apiUsername  (required)
     * @param id  (required)
     * @return LockPostActionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> post updated </td><td>  -  </td></tr>
     </table>
     */
    public LockPostActionRequestBuilder lockPostAction(String locked, String apiKey, String apiUsername, String id) throws IllegalArgumentException {
        if (locked == null) throw new IllegalArgumentException("\"locked\" is required but got null");
            

        if (apiKey == null) throw new IllegalArgumentException("\"apiKey\" is required but got null");
            

        if (apiUsername == null) throw new IllegalArgumentException("\"apiUsername\" is required but got null");
            

        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new LockPostActionRequestBuilder(locked, apiKey, apiUsername, id);
    }
    private okhttp3.Call updateSinglePostJsonCall(String id, PostsUpdateSinglePostJsonRequest postsUpdateSinglePostJsonRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = postsUpdateSinglePostJsonRequest;

        // create path and map variables
        String localVarPath = "/posts/{id}.json"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateSinglePostJsonValidateBeforeCall(String id, PostsUpdateSinglePostJsonRequest postsUpdateSinglePostJsonRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateSinglePostJson(Async)");
        }

        return updateSinglePostJsonCall(id, postsUpdateSinglePostJsonRequest, _callback);

    }


    private ApiResponse<PostsUpdateSinglePostJsonResponse> updateSinglePostJsonWithHttpInfo(String id, PostsUpdateSinglePostJsonRequest postsUpdateSinglePostJsonRequest) throws ApiException {
        okhttp3.Call localVarCall = updateSinglePostJsonValidateBeforeCall(id, postsUpdateSinglePostJsonRequest, null);
        Type localVarReturnType = new TypeToken<PostsUpdateSinglePostJsonResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateSinglePostJsonAsync(String id, PostsUpdateSinglePostJsonRequest postsUpdateSinglePostJsonRequest, final ApiCallback<PostsUpdateSinglePostJsonResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateSinglePostJsonValidateBeforeCall(id, postsUpdateSinglePostJsonRequest, _callback);
        Type localVarReturnType = new TypeToken<PostsUpdateSinglePostJsonResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateSinglePostJsonRequestBuilder {
        private final String id;
        private PostsUpdateSinglePostJsonRequestPost post;

        private UpdateSinglePostJsonRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Set post
         * @param post  (optional)
         * @return UpdateSinglePostJsonRequestBuilder
         */
        public UpdateSinglePostJsonRequestBuilder post(PostsUpdateSinglePostJsonRequestPost post) {
            this.post = post;
            return this;
        }
        
        /**
         * Build call for updateSinglePostJson
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> post updated </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PostsUpdateSinglePostJsonRequest postsUpdateSinglePostJsonRequest = buildBodyParams();
            return updateSinglePostJsonCall(id, postsUpdateSinglePostJsonRequest, _callback);
        }

        private PostsUpdateSinglePostJsonRequest buildBodyParams() {
            PostsUpdateSinglePostJsonRequest postsUpdateSinglePostJsonRequest = new PostsUpdateSinglePostJsonRequest();
            postsUpdateSinglePostJsonRequest.post(this.post);
            return postsUpdateSinglePostJsonRequest;
        }

        /**
         * Execute updateSinglePostJson request
         * @return PostsUpdateSinglePostJsonResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> post updated </td><td>  -  </td></tr>
         </table>
         */
        public PostsUpdateSinglePostJsonResponse execute() throws ApiException {
            PostsUpdateSinglePostJsonRequest postsUpdateSinglePostJsonRequest = buildBodyParams();
            ApiResponse<PostsUpdateSinglePostJsonResponse> localVarResp = updateSinglePostJsonWithHttpInfo(id, postsUpdateSinglePostJsonRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateSinglePostJson request with HTTP info returned
         * @return ApiResponse&lt;PostsUpdateSinglePostJsonResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> post updated </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PostsUpdateSinglePostJsonResponse> executeWithHttpInfo() throws ApiException {
            PostsUpdateSinglePostJsonRequest postsUpdateSinglePostJsonRequest = buildBodyParams();
            return updateSinglePostJsonWithHttpInfo(id, postsUpdateSinglePostJsonRequest);
        }

        /**
         * Execute updateSinglePostJson request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> post updated </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PostsUpdateSinglePostJsonResponse> _callback) throws ApiException {
            PostsUpdateSinglePostJsonRequest postsUpdateSinglePostJsonRequest = buildBodyParams();
            return updateSinglePostJsonAsync(id, postsUpdateSinglePostJsonRequest, _callback);
        }
    }

    /**
     * Update a single post
     * 
     * @param id  (required)
     * @return UpdateSinglePostJsonRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> post updated </td><td>  -  </td></tr>
     </table>
     */
    public UpdateSinglePostJsonRequestBuilder updateSinglePostJson(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new UpdateSinglePostJsonRequestBuilder(id);
    }
}
