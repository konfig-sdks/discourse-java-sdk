/*
 * Discourse API Documentation
 * This page contains the documentation on how to use Discourse through API calls.  > Note: For any endpoints not listed you can follow the [reverse engineer the Discourse API](https://meta.discourse.org/t/-/20576) guide to figure out how to use an API endpoint.  ### Request Content-Type  The Content-Type for POST and PUT requests can be set to `application/x-www-form-urlencoded`, `multipart/form-data`, or `application/json`.  ### Endpoint Names and Response Content-Type  Most API endpoints provide the same content as their HTML counterparts. For example the URL `/categories` serves a list of categories, the `/categories.json` API provides the same information in JSON format.  Instead of sending API requests to `/categories.json` you may also send them to `/categories` and add an `Accept: application/json` header to the request to get the JSON response. Sending requests with the `Accept` header is necessary if you want to use URLs for related endpoints returned by the API, such as pagination URLs. These URLs are returned without the `.json` prefix so you need to add the header in order to get the correct response format.  ### Authentication  Some endpoints do not require any authentication, pretty much anything else will require you to be authenticated.  To become authenticated you will need to create an API Key from the admin panel.  Once you have your API Key you can pass it in along with your API Username as an HTTP header like this:  ``` curl -X GET \"http://127.0.0.1:3000/admin/users/list/active.json\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" ```  and this is how POST requests will look:  ``` curl -X POST \"http://127.0.0.1:3000/categories\" \\ -H \"Content-Type: multipart/form-data;\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" \\ -F \"name=89853c20-4409-e91a-a8ea-f6cdff96aaaa\" \\ -F \"color=49d9e9\" \\ -F \"text_color=f0fcfd\" ```  ### Boolean values  If an endpoint accepts a boolean be sure to specify it as a lowercase `true` or `false` value unless noted otherwise. 
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.InvitesCreateInviteRequest;
import com.konfigthis.client.model.InvitesCreateInviteResponse;
import com.konfigthis.client.model.InvitesCreateMultipleInvitesRequest;
import com.konfigthis.client.model.InvitesCreateMultipleInvitesResponse;
import com.konfigthis.client.model.TopicsSendInviteToTopicRequest;
import com.konfigthis.client.model.TopicsSendInviteToTopicResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class InvitesApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public InvitesApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public InvitesApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createInviteCall(String apiKey, String apiUsername, InvitesCreateInviteRequest invitesCreateInviteRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = invitesCreateInviteRequest;

        // create path and map variables
        String localVarPath = "/invites.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarHeaderParams.put("Api-Key", localVarApiClient.parameterToString(apiKey));
        }

        if (apiUsername != null) {
            localVarHeaderParams.put("Api-Username", localVarApiClient.parameterToString(apiUsername));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createInviteValidateBeforeCall(String apiKey, String apiUsername, InvitesCreateInviteRequest invitesCreateInviteRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling createInvite(Async)");
        }

        // verify the required parameter 'apiUsername' is set
        if (apiUsername == null) {
            throw new ApiException("Missing the required parameter 'apiUsername' when calling createInvite(Async)");
        }

        return createInviteCall(apiKey, apiUsername, invitesCreateInviteRequest, _callback);

    }


    private ApiResponse<InvitesCreateInviteResponse> createInviteWithHttpInfo(String apiKey, String apiUsername, InvitesCreateInviteRequest invitesCreateInviteRequest) throws ApiException {
        okhttp3.Call localVarCall = createInviteValidateBeforeCall(apiKey, apiUsername, invitesCreateInviteRequest, null);
        Type localVarReturnType = new TypeToken<InvitesCreateInviteResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createInviteAsync(String apiKey, String apiUsername, InvitesCreateInviteRequest invitesCreateInviteRequest, final ApiCallback<InvitesCreateInviteResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createInviteValidateBeforeCall(apiKey, apiUsername, invitesCreateInviteRequest, _callback);
        Type localVarReturnType = new TypeToken<InvitesCreateInviteResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateInviteRequestBuilder {
        private final String apiKey;
        private final String apiUsername;
        private String email;
        private Boolean skipEmail;
        private String customMessage;
        private Integer maxRedemptionsAllowed;
        private Integer topicId;
        private String groupIds;
        private String groupNames;
        private String expiresAt;

        private CreateInviteRequestBuilder(String apiKey, String apiUsername) {
            this.apiKey = apiKey;
            this.apiUsername = apiUsername;
        }

        /**
         * Set email
         * @param email required for email invites only (optional)
         * @return CreateInviteRequestBuilder
         */
        public CreateInviteRequestBuilder email(String email) {
            this.email = email;
            return this;
        }
        
        /**
         * Set skipEmail
         * @param skipEmail  (optional, default to false)
         * @return CreateInviteRequestBuilder
         */
        public CreateInviteRequestBuilder skipEmail(Boolean skipEmail) {
            this.skipEmail = skipEmail;
            return this;
        }
        
        /**
         * Set customMessage
         * @param customMessage optional, for email invites (optional)
         * @return CreateInviteRequestBuilder
         */
        public CreateInviteRequestBuilder customMessage(String customMessage) {
            this.customMessage = customMessage;
            return this;
        }
        
        /**
         * Set maxRedemptionsAllowed
         * @param maxRedemptionsAllowed optional, for link invites (optional, default to 1)
         * @return CreateInviteRequestBuilder
         */
        public CreateInviteRequestBuilder maxRedemptionsAllowed(Integer maxRedemptionsAllowed) {
            this.maxRedemptionsAllowed = maxRedemptionsAllowed;
            return this;
        }
        
        /**
         * Set topicId
         * @param topicId  (optional)
         * @return CreateInviteRequestBuilder
         */
        public CreateInviteRequestBuilder topicId(Integer topicId) {
            this.topicId = topicId;
            return this;
        }
        
        /**
         * Set groupIds
         * @param groupIds Optional, either this or &#x60;group_names&#x60;. Comma separated list for multiple ids. (optional)
         * @return CreateInviteRequestBuilder
         */
        public CreateInviteRequestBuilder groupIds(String groupIds) {
            this.groupIds = groupIds;
            return this;
        }
        
        /**
         * Set groupNames
         * @param groupNames Optional, either this or &#x60;group_ids&#x60;. Comma separated list for multiple names. (optional)
         * @return CreateInviteRequestBuilder
         */
        public CreateInviteRequestBuilder groupNames(String groupNames) {
            this.groupNames = groupNames;
            return this;
        }
        
        /**
         * Set expiresAt
         * @param expiresAt optional, if not supplied, the invite_expiry_days site setting is used (optional)
         * @return CreateInviteRequestBuilder
         */
        public CreateInviteRequestBuilder expiresAt(String expiresAt) {
            this.expiresAt = expiresAt;
            return this;
        }
        
        /**
         * Build call for createInvite
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> success response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            InvitesCreateInviteRequest invitesCreateInviteRequest = buildBodyParams();
            return createInviteCall(apiKey, apiUsername, invitesCreateInviteRequest, _callback);
        }

        private InvitesCreateInviteRequest buildBodyParams() {
            InvitesCreateInviteRequest invitesCreateInviteRequest = new InvitesCreateInviteRequest();
            invitesCreateInviteRequest.email(this.email);
            invitesCreateInviteRequest.skipEmail(this.skipEmail);
            invitesCreateInviteRequest.customMessage(this.customMessage);
            invitesCreateInviteRequest.maxRedemptionsAllowed(this.maxRedemptionsAllowed);
            invitesCreateInviteRequest.topicId(this.topicId);
            invitesCreateInviteRequest.groupIds(this.groupIds);
            invitesCreateInviteRequest.groupNames(this.groupNames);
            invitesCreateInviteRequest.expiresAt(this.expiresAt);
            return invitesCreateInviteRequest;
        }

        /**
         * Execute createInvite request
         * @return InvitesCreateInviteResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> success response </td><td>  -  </td></tr>
         </table>
         */
        public InvitesCreateInviteResponse execute() throws ApiException {
            InvitesCreateInviteRequest invitesCreateInviteRequest = buildBodyParams();
            ApiResponse<InvitesCreateInviteResponse> localVarResp = createInviteWithHttpInfo(apiKey, apiUsername, invitesCreateInviteRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createInvite request with HTTP info returned
         * @return ApiResponse&lt;InvitesCreateInviteResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> success response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<InvitesCreateInviteResponse> executeWithHttpInfo() throws ApiException {
            InvitesCreateInviteRequest invitesCreateInviteRequest = buildBodyParams();
            return createInviteWithHttpInfo(apiKey, apiUsername, invitesCreateInviteRequest);
        }

        /**
         * Execute createInvite request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> success response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<InvitesCreateInviteResponse> _callback) throws ApiException {
            InvitesCreateInviteRequest invitesCreateInviteRequest = buildBodyParams();
            return createInviteAsync(apiKey, apiUsername, invitesCreateInviteRequest, _callback);
        }
    }

    /**
     * Create an invite
     * 
     * @param apiKey  (required)
     * @param apiUsername  (required)
     * @return CreateInviteRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success response </td><td>  -  </td></tr>
     </table>
     */
    public CreateInviteRequestBuilder createInvite(String apiKey, String apiUsername) throws IllegalArgumentException {
        if (apiKey == null) throw new IllegalArgumentException("\"apiKey\" is required but got null");
            

        if (apiUsername == null) throw new IllegalArgumentException("\"apiUsername\" is required but got null");
            

        return new CreateInviteRequestBuilder(apiKey, apiUsername);
    }
    private okhttp3.Call createMultipleInvitesCall(String apiKey, String apiUsername, InvitesCreateMultipleInvitesRequest invitesCreateMultipleInvitesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = invitesCreateMultipleInvitesRequest;

        // create path and map variables
        String localVarPath = "/invites/create-multiple.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarHeaderParams.put("Api-Key", localVarApiClient.parameterToString(apiKey));
        }

        if (apiUsername != null) {
            localVarHeaderParams.put("Api-Username", localVarApiClient.parameterToString(apiUsername));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createMultipleInvitesValidateBeforeCall(String apiKey, String apiUsername, InvitesCreateMultipleInvitesRequest invitesCreateMultipleInvitesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling createMultipleInvites(Async)");
        }

        // verify the required parameter 'apiUsername' is set
        if (apiUsername == null) {
            throw new ApiException("Missing the required parameter 'apiUsername' when calling createMultipleInvites(Async)");
        }

        return createMultipleInvitesCall(apiKey, apiUsername, invitesCreateMultipleInvitesRequest, _callback);

    }


    private ApiResponse<InvitesCreateMultipleInvitesResponse> createMultipleInvitesWithHttpInfo(String apiKey, String apiUsername, InvitesCreateMultipleInvitesRequest invitesCreateMultipleInvitesRequest) throws ApiException {
        okhttp3.Call localVarCall = createMultipleInvitesValidateBeforeCall(apiKey, apiUsername, invitesCreateMultipleInvitesRequest, null);
        Type localVarReturnType = new TypeToken<InvitesCreateMultipleInvitesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createMultipleInvitesAsync(String apiKey, String apiUsername, InvitesCreateMultipleInvitesRequest invitesCreateMultipleInvitesRequest, final ApiCallback<InvitesCreateMultipleInvitesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createMultipleInvitesValidateBeforeCall(apiKey, apiUsername, invitesCreateMultipleInvitesRequest, _callback);
        Type localVarReturnType = new TypeToken<InvitesCreateMultipleInvitesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateMultipleInvitesRequestBuilder {
        private final String apiKey;
        private final String apiUsername;
        private String email;
        private Boolean skipEmail;
        private String customMessage;
        private Integer maxRedemptionsAllowed;
        private Integer topicId;
        private String groupIds;
        private String groupNames;
        private String expiresAt;

        private CreateMultipleInvitesRequestBuilder(String apiKey, String apiUsername) {
            this.apiKey = apiKey;
            this.apiUsername = apiUsername;
        }

        /**
         * Set email
         * @param email pass 1 email per invite to be generated. other properties will be shared by each invite. (optional)
         * @return CreateMultipleInvitesRequestBuilder
         */
        public CreateMultipleInvitesRequestBuilder email(String email) {
            this.email = email;
            return this;
        }
        
        /**
         * Set skipEmail
         * @param skipEmail  (optional, default to false)
         * @return CreateMultipleInvitesRequestBuilder
         */
        public CreateMultipleInvitesRequestBuilder skipEmail(Boolean skipEmail) {
            this.skipEmail = skipEmail;
            return this;
        }
        
        /**
         * Set customMessage
         * @param customMessage optional, for email invites (optional)
         * @return CreateMultipleInvitesRequestBuilder
         */
        public CreateMultipleInvitesRequestBuilder customMessage(String customMessage) {
            this.customMessage = customMessage;
            return this;
        }
        
        /**
         * Set maxRedemptionsAllowed
         * @param maxRedemptionsAllowed optional, for link invites (optional, default to 1)
         * @return CreateMultipleInvitesRequestBuilder
         */
        public CreateMultipleInvitesRequestBuilder maxRedemptionsAllowed(Integer maxRedemptionsAllowed) {
            this.maxRedemptionsAllowed = maxRedemptionsAllowed;
            return this;
        }
        
        /**
         * Set topicId
         * @param topicId  (optional)
         * @return CreateMultipleInvitesRequestBuilder
         */
        public CreateMultipleInvitesRequestBuilder topicId(Integer topicId) {
            this.topicId = topicId;
            return this;
        }
        
        /**
         * Set groupIds
         * @param groupIds Optional, either this or &#x60;group_names&#x60;. Comma separated list for multiple ids. (optional)
         * @return CreateMultipleInvitesRequestBuilder
         */
        public CreateMultipleInvitesRequestBuilder groupIds(String groupIds) {
            this.groupIds = groupIds;
            return this;
        }
        
        /**
         * Set groupNames
         * @param groupNames Optional, either this or &#x60;group_ids&#x60;. Comma separated list for multiple names. (optional)
         * @return CreateMultipleInvitesRequestBuilder
         */
        public CreateMultipleInvitesRequestBuilder groupNames(String groupNames) {
            this.groupNames = groupNames;
            return this;
        }
        
        /**
         * Set expiresAt
         * @param expiresAt optional, if not supplied, the invite_expiry_days site setting is used (optional)
         * @return CreateMultipleInvitesRequestBuilder
         */
        public CreateMultipleInvitesRequestBuilder expiresAt(String expiresAt) {
            this.expiresAt = expiresAt;
            return this;
        }
        
        /**
         * Build call for createMultipleInvites
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> success response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            InvitesCreateMultipleInvitesRequest invitesCreateMultipleInvitesRequest = buildBodyParams();
            return createMultipleInvitesCall(apiKey, apiUsername, invitesCreateMultipleInvitesRequest, _callback);
        }

        private InvitesCreateMultipleInvitesRequest buildBodyParams() {
            InvitesCreateMultipleInvitesRequest invitesCreateMultipleInvitesRequest = new InvitesCreateMultipleInvitesRequest();
            invitesCreateMultipleInvitesRequest.email(this.email);
            invitesCreateMultipleInvitesRequest.skipEmail(this.skipEmail);
            invitesCreateMultipleInvitesRequest.customMessage(this.customMessage);
            invitesCreateMultipleInvitesRequest.maxRedemptionsAllowed(this.maxRedemptionsAllowed);
            invitesCreateMultipleInvitesRequest.topicId(this.topicId);
            invitesCreateMultipleInvitesRequest.groupIds(this.groupIds);
            invitesCreateMultipleInvitesRequest.groupNames(this.groupNames);
            invitesCreateMultipleInvitesRequest.expiresAt(this.expiresAt);
            return invitesCreateMultipleInvitesRequest;
        }

        /**
         * Execute createMultipleInvites request
         * @return InvitesCreateMultipleInvitesResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> success response </td><td>  -  </td></tr>
         </table>
         */
        public InvitesCreateMultipleInvitesResponse execute() throws ApiException {
            InvitesCreateMultipleInvitesRequest invitesCreateMultipleInvitesRequest = buildBodyParams();
            ApiResponse<InvitesCreateMultipleInvitesResponse> localVarResp = createMultipleInvitesWithHttpInfo(apiKey, apiUsername, invitesCreateMultipleInvitesRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createMultipleInvites request with HTTP info returned
         * @return ApiResponse&lt;InvitesCreateMultipleInvitesResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> success response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<InvitesCreateMultipleInvitesResponse> executeWithHttpInfo() throws ApiException {
            InvitesCreateMultipleInvitesRequest invitesCreateMultipleInvitesRequest = buildBodyParams();
            return createMultipleInvitesWithHttpInfo(apiKey, apiUsername, invitesCreateMultipleInvitesRequest);
        }

        /**
         * Execute createMultipleInvites request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> success response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<InvitesCreateMultipleInvitesResponse> _callback) throws ApiException {
            InvitesCreateMultipleInvitesRequest invitesCreateMultipleInvitesRequest = buildBodyParams();
            return createMultipleInvitesAsync(apiKey, apiUsername, invitesCreateMultipleInvitesRequest, _callback);
        }
    }

    /**
     * Create multiple invites
     * 
     * @param apiKey  (required)
     * @param apiUsername  (required)
     * @return CreateMultipleInvitesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success response </td><td>  -  </td></tr>
     </table>
     */
    public CreateMultipleInvitesRequestBuilder createMultipleInvites(String apiKey, String apiUsername) throws IllegalArgumentException {
        if (apiKey == null) throw new IllegalArgumentException("\"apiKey\" is required but got null");
            

        if (apiUsername == null) throw new IllegalArgumentException("\"apiUsername\" is required but got null");
            

        return new CreateMultipleInvitesRequestBuilder(apiKey, apiUsername);
    }
    private okhttp3.Call sendInviteToTopicCall(String apiKey, String apiUsername, String id, TopicsSendInviteToTopicRequest topicsSendInviteToTopicRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = topicsSendInviteToTopicRequest;

        // create path and map variables
        String localVarPath = "/t/{id}/invite.json"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarHeaderParams.put("Api-Key", localVarApiClient.parameterToString(apiKey));
        }

        if (apiUsername != null) {
            localVarHeaderParams.put("Api-Username", localVarApiClient.parameterToString(apiUsername));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sendInviteToTopicValidateBeforeCall(String apiKey, String apiUsername, String id, TopicsSendInviteToTopicRequest topicsSendInviteToTopicRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling sendInviteToTopic(Async)");
        }

        // verify the required parameter 'apiUsername' is set
        if (apiUsername == null) {
            throw new ApiException("Missing the required parameter 'apiUsername' when calling sendInviteToTopic(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling sendInviteToTopic(Async)");
        }

        return sendInviteToTopicCall(apiKey, apiUsername, id, topicsSendInviteToTopicRequest, _callback);

    }


    private ApiResponse<TopicsSendInviteToTopicResponse> sendInviteToTopicWithHttpInfo(String apiKey, String apiUsername, String id, TopicsSendInviteToTopicRequest topicsSendInviteToTopicRequest) throws ApiException {
        okhttp3.Call localVarCall = sendInviteToTopicValidateBeforeCall(apiKey, apiUsername, id, topicsSendInviteToTopicRequest, null);
        Type localVarReturnType = new TypeToken<TopicsSendInviteToTopicResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call sendInviteToTopicAsync(String apiKey, String apiUsername, String id, TopicsSendInviteToTopicRequest topicsSendInviteToTopicRequest, final ApiCallback<TopicsSendInviteToTopicResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = sendInviteToTopicValidateBeforeCall(apiKey, apiUsername, id, topicsSendInviteToTopicRequest, _callback);
        Type localVarReturnType = new TypeToken<TopicsSendInviteToTopicResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SendInviteToTopicRequestBuilder {
        private final String apiKey;
        private final String apiUsername;
        private final String id;
        private String user;
        private String email;

        private SendInviteToTopicRequestBuilder(String apiKey, String apiUsername, String id) {
            this.apiKey = apiKey;
            this.apiUsername = apiUsername;
            this.id = id;
        }

        /**
         * Set user
         * @param user  (optional)
         * @return SendInviteToTopicRequestBuilder
         */
        public SendInviteToTopicRequestBuilder user(String user) {
            this.user = user;
            return this;
        }
        
        /**
         * Set email
         * @param email  (optional)
         * @return SendInviteToTopicRequestBuilder
         */
        public SendInviteToTopicRequestBuilder email(String email) {
            this.email = email;
            return this;
        }
        
        /**
         * Build call for sendInviteToTopic
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> topic updated </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TopicsSendInviteToTopicRequest topicsSendInviteToTopicRequest = buildBodyParams();
            return sendInviteToTopicCall(apiKey, apiUsername, id, topicsSendInviteToTopicRequest, _callback);
        }

        private TopicsSendInviteToTopicRequest buildBodyParams() {
            TopicsSendInviteToTopicRequest topicsSendInviteToTopicRequest = new TopicsSendInviteToTopicRequest();
            topicsSendInviteToTopicRequest.user(this.user);
            topicsSendInviteToTopicRequest.email(this.email);
            return topicsSendInviteToTopicRequest;
        }

        /**
         * Execute sendInviteToTopic request
         * @return TopicsSendInviteToTopicResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> topic updated </td><td>  -  </td></tr>
         </table>
         */
        public TopicsSendInviteToTopicResponse execute() throws ApiException {
            TopicsSendInviteToTopicRequest topicsSendInviteToTopicRequest = buildBodyParams();
            ApiResponse<TopicsSendInviteToTopicResponse> localVarResp = sendInviteToTopicWithHttpInfo(apiKey, apiUsername, id, topicsSendInviteToTopicRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute sendInviteToTopic request with HTTP info returned
         * @return ApiResponse&lt;TopicsSendInviteToTopicResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> topic updated </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TopicsSendInviteToTopicResponse> executeWithHttpInfo() throws ApiException {
            TopicsSendInviteToTopicRequest topicsSendInviteToTopicRequest = buildBodyParams();
            return sendInviteToTopicWithHttpInfo(apiKey, apiUsername, id, topicsSendInviteToTopicRequest);
        }

        /**
         * Execute sendInviteToTopic request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> topic updated </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TopicsSendInviteToTopicResponse> _callback) throws ApiException {
            TopicsSendInviteToTopicRequest topicsSendInviteToTopicRequest = buildBodyParams();
            return sendInviteToTopicAsync(apiKey, apiUsername, id, topicsSendInviteToTopicRequest, _callback);
        }
    }

    /**
     * Invite to topic
     * 
     * @param apiKey  (required)
     * @param apiUsername  (required)
     * @param id  (required)
     * @return SendInviteToTopicRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> topic updated </td><td>  -  </td></tr>
     </table>
     */
    public SendInviteToTopicRequestBuilder sendInviteToTopic(String apiKey, String apiUsername, String id) throws IllegalArgumentException {
        if (apiKey == null) throw new IllegalArgumentException("\"apiKey\" is required but got null");
            

        if (apiUsername == null) throw new IllegalArgumentException("\"apiUsername\" is required but got null");
            

        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new SendInviteToTopicRequestBuilder(apiKey, apiUsername, id);
    }
}
