/*
 * Discourse API Documentation
 * This page contains the documentation on how to use Discourse through API calls.  > Note: For any endpoints not listed you can follow the [reverse engineer the Discourse API](https://meta.discourse.org/t/-/20576) guide to figure out how to use an API endpoint.  ### Request Content-Type  The Content-Type for POST and PUT requests can be set to `application/x-www-form-urlencoded`, `multipart/form-data`, or `application/json`.  ### Endpoint Names and Response Content-Type  Most API endpoints provide the same content as their HTML counterparts. For example the URL `/categories` serves a list of categories, the `/categories.json` API provides the same information in JSON format.  Instead of sending API requests to `/categories.json` you may also send them to `/categories` and add an `Accept: application/json` header to the request to get the JSON response. Sending requests with the `Accept` header is necessary if you want to use URLs for related endpoints returned by the API, such as pagination URLs. These URLs are returned without the `.json` prefix so you need to add the header in order to get the correct response format.  ### Authentication  Some endpoints do not require any authentication, pretty much anything else will require you to be authenticated.  To become authenticated you will need to create an API Key from the admin panel.  Once you have your API Key you can pass it in along with your API Username as an HTTP header like this:  ``` curl -X GET \"http://127.0.0.1:3000/admin/users/list/active.json\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" ```  and this is how POST requests will look:  ``` curl -X POST \"http://127.0.0.1:3000/categories\" \\ -H \"Content-Type: multipart/form-data;\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" \\ -F \"name=89853c20-4409-e91a-a8ea-f6cdff96aaaa\" \\ -F \"color=49d9e9\" \\ -F \"text_color=f0fcfd\" ```  ### Boolean values  If an endpoint accepts a boolean be sure to specify it as a lowercase `true` or `false` value unless noted otherwise. 
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.PostsCreateTopicPostMessageRequest;
import com.konfigthis.client.model.PostsCreateTopicPostMessageResponse;
import com.konfigthis.client.model.PrivateMessagesListForUserResponse;
import com.konfigthis.client.model.PrivateMessagesListSentForUserResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class PrivateMessagesApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PrivateMessagesApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public PrivateMessagesApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createTopicPostMessageCall(PostsCreateTopicPostMessageRequest postsCreateTopicPostMessageRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = postsCreateTopicPostMessageRequest;

        // create path and map variables
        String localVarPath = "/posts.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createTopicPostMessageValidateBeforeCall(PostsCreateTopicPostMessageRequest postsCreateTopicPostMessageRequest, final ApiCallback _callback) throws ApiException {
        return createTopicPostMessageCall(postsCreateTopicPostMessageRequest, _callback);

    }


    private ApiResponse<PostsCreateTopicPostMessageResponse> createTopicPostMessageWithHttpInfo(PostsCreateTopicPostMessageRequest postsCreateTopicPostMessageRequest) throws ApiException {
        okhttp3.Call localVarCall = createTopicPostMessageValidateBeforeCall(postsCreateTopicPostMessageRequest, null);
        Type localVarReturnType = new TypeToken<PostsCreateTopicPostMessageResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createTopicPostMessageAsync(PostsCreateTopicPostMessageRequest postsCreateTopicPostMessageRequest, final ApiCallback<PostsCreateTopicPostMessageResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createTopicPostMessageValidateBeforeCall(postsCreateTopicPostMessageRequest, _callback);
        Type localVarReturnType = new TypeToken<PostsCreateTopicPostMessageResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateTopicPostMessageRequestBuilder {
        private final String raw;
        private String title;
        private Integer topicId;
        private Integer category;
        private String targetRecipients;
        private String targetUsernames;
        private String archetype;
        private String createdAt;
        private Integer replyToPostNumber;
        private String embedUrl;
        private String externalId;

        private CreateTopicPostMessageRequestBuilder(String raw) {
            this.raw = raw;
        }

        /**
         * Set title
         * @param title Required if creating a new topic or new private message. (optional)
         * @return CreateTopicPostMessageRequestBuilder
         */
        public CreateTopicPostMessageRequestBuilder title(String title) {
            this.title = title;
            return this;
        }
        
        /**
         * Set topicId
         * @param topicId Required if creating a new post. (optional)
         * @return CreateTopicPostMessageRequestBuilder
         */
        public CreateTopicPostMessageRequestBuilder topicId(Integer topicId) {
            this.topicId = topicId;
            return this;
        }
        
        /**
         * Set category
         * @param category Optional if creating a new topic, and ignored if creating a new post. (optional)
         * @return CreateTopicPostMessageRequestBuilder
         */
        public CreateTopicPostMessageRequestBuilder category(Integer category) {
            this.category = category;
            return this;
        }
        
        /**
         * Set targetRecipients
         * @param targetRecipients Required for private message, comma separated. (optional)
         * @return CreateTopicPostMessageRequestBuilder
         */
        public CreateTopicPostMessageRequestBuilder targetRecipients(String targetRecipients) {
            this.targetRecipients = targetRecipients;
            return this;
        }
        
        /**
         * Set targetUsernames
         * @param targetUsernames Deprecated. Use target_recipients instead. (optional)
         * @return CreateTopicPostMessageRequestBuilder
         */
        public CreateTopicPostMessageRequestBuilder targetUsernames(String targetUsernames) {
            this.targetUsernames = targetUsernames;
            return this;
        }
        
        /**
         * Set archetype
         * @param archetype Required for new private message. (optional)
         * @return CreateTopicPostMessageRequestBuilder
         */
        public CreateTopicPostMessageRequestBuilder archetype(String archetype) {
            this.archetype = archetype;
            return this;
        }
        
        /**
         * Set createdAt
         * @param createdAt  (optional)
         * @return CreateTopicPostMessageRequestBuilder
         */
        public CreateTopicPostMessageRequestBuilder createdAt(String createdAt) {
            this.createdAt = createdAt;
            return this;
        }
        
        /**
         * Set replyToPostNumber
         * @param replyToPostNumber Optional, the post number to reply to inside a topic. (optional)
         * @return CreateTopicPostMessageRequestBuilder
         */
        public CreateTopicPostMessageRequestBuilder replyToPostNumber(Integer replyToPostNumber) {
            this.replyToPostNumber = replyToPostNumber;
            return this;
        }
        
        /**
         * Set embedUrl
         * @param embedUrl Provide a URL from a remote system to associate a forum topic with that URL, typically for using Discourse as a comments system for an external blog. (optional)
         * @return CreateTopicPostMessageRequestBuilder
         */
        public CreateTopicPostMessageRequestBuilder embedUrl(String embedUrl) {
            this.embedUrl = embedUrl;
            return this;
        }
        
        /**
         * Set externalId
         * @param externalId Provide an external_id from a remote system to associate a forum topic with that id. (optional)
         * @return CreateTopicPostMessageRequestBuilder
         */
        public CreateTopicPostMessageRequestBuilder externalId(String externalId) {
            this.externalId = externalId;
            return this;
        }
        
        /**
         * Build call for createTopicPostMessage
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> post created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PostsCreateTopicPostMessageRequest postsCreateTopicPostMessageRequest = buildBodyParams();
            return createTopicPostMessageCall(postsCreateTopicPostMessageRequest, _callback);
        }

        private PostsCreateTopicPostMessageRequest buildBodyParams() {
            PostsCreateTopicPostMessageRequest postsCreateTopicPostMessageRequest = new PostsCreateTopicPostMessageRequest();
            postsCreateTopicPostMessageRequest.title(this.title);
            postsCreateTopicPostMessageRequest.raw(this.raw);
            postsCreateTopicPostMessageRequest.topicId(this.topicId);
            postsCreateTopicPostMessageRequest.category(this.category);
            postsCreateTopicPostMessageRequest.targetRecipients(this.targetRecipients);
            postsCreateTopicPostMessageRequest.targetUsernames(this.targetUsernames);
            postsCreateTopicPostMessageRequest.archetype(this.archetype);
            postsCreateTopicPostMessageRequest.createdAt(this.createdAt);
            postsCreateTopicPostMessageRequest.replyToPostNumber(this.replyToPostNumber);
            postsCreateTopicPostMessageRequest.embedUrl(this.embedUrl);
            postsCreateTopicPostMessageRequest.externalId(this.externalId);
            return postsCreateTopicPostMessageRequest;
        }

        /**
         * Execute createTopicPostMessage request
         * @return PostsCreateTopicPostMessageResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> post created </td><td>  -  </td></tr>
         </table>
         */
        public PostsCreateTopicPostMessageResponse execute() throws ApiException {
            PostsCreateTopicPostMessageRequest postsCreateTopicPostMessageRequest = buildBodyParams();
            ApiResponse<PostsCreateTopicPostMessageResponse> localVarResp = createTopicPostMessageWithHttpInfo(postsCreateTopicPostMessageRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createTopicPostMessage request with HTTP info returned
         * @return ApiResponse&lt;PostsCreateTopicPostMessageResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> post created </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PostsCreateTopicPostMessageResponse> executeWithHttpInfo() throws ApiException {
            PostsCreateTopicPostMessageRequest postsCreateTopicPostMessageRequest = buildBodyParams();
            return createTopicPostMessageWithHttpInfo(postsCreateTopicPostMessageRequest);
        }

        /**
         * Execute createTopicPostMessage request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> post created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PostsCreateTopicPostMessageResponse> _callback) throws ApiException {
            PostsCreateTopicPostMessageRequest postsCreateTopicPostMessageRequest = buildBodyParams();
            return createTopicPostMessageAsync(postsCreateTopicPostMessageRequest, _callback);
        }
    }

    /**
     * Creates a new topic, a new post, or a private message
     * 
     * @return CreateTopicPostMessageRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> post created </td><td>  -  </td></tr>
     </table>
     */
    public CreateTopicPostMessageRequestBuilder createTopicPostMessage(String raw) throws IllegalArgumentException {
        if (raw == null) throw new IllegalArgumentException("\"raw\" is required but got null");
            

        return new CreateTopicPostMessageRequestBuilder(raw);
    }
    private okhttp3.Call listForUserCall(String username, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/topics/private-messages/{username}.json"
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listForUserValidateBeforeCall(String username, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling listForUser(Async)");
        }

        return listForUserCall(username, _callback);

    }


    private ApiResponse<PrivateMessagesListForUserResponse> listForUserWithHttpInfo(String username) throws ApiException {
        okhttp3.Call localVarCall = listForUserValidateBeforeCall(username, null);
        Type localVarReturnType = new TypeToken<PrivateMessagesListForUserResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listForUserAsync(String username, final ApiCallback<PrivateMessagesListForUserResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listForUserValidateBeforeCall(username, _callback);
        Type localVarReturnType = new TypeToken<PrivateMessagesListForUserResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListForUserRequestBuilder {
        private final String username;

        private ListForUserRequestBuilder(String username) {
            this.username = username;
        }

        /**
         * Build call for listForUser
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> private messages </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listForUserCall(username, _callback);
        }


        /**
         * Execute listForUser request
         * @return PrivateMessagesListForUserResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> private messages </td><td>  -  </td></tr>
         </table>
         */
        public PrivateMessagesListForUserResponse execute() throws ApiException {
            ApiResponse<PrivateMessagesListForUserResponse> localVarResp = listForUserWithHttpInfo(username);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listForUser request with HTTP info returned
         * @return ApiResponse&lt;PrivateMessagesListForUserResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> private messages </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PrivateMessagesListForUserResponse> executeWithHttpInfo() throws ApiException {
            return listForUserWithHttpInfo(username);
        }

        /**
         * Execute listForUser request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> private messages </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PrivateMessagesListForUserResponse> _callback) throws ApiException {
            return listForUserAsync(username, _callback);
        }
    }

    /**
     * Get a list of private messages for a user
     * 
     * @param username  (required)
     * @return ListForUserRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> private messages </td><td>  -  </td></tr>
     </table>
     */
    public ListForUserRequestBuilder listForUser(String username) throws IllegalArgumentException {
        if (username == null) throw new IllegalArgumentException("\"username\" is required but got null");
            

        return new ListForUserRequestBuilder(username);
    }
    private okhttp3.Call listSentForUserCall(String username, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/topics/private-messages-sent/{username}.json"
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listSentForUserValidateBeforeCall(String username, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling listSentForUser(Async)");
        }

        return listSentForUserCall(username, _callback);

    }


    private ApiResponse<PrivateMessagesListSentForUserResponse> listSentForUserWithHttpInfo(String username) throws ApiException {
        okhttp3.Call localVarCall = listSentForUserValidateBeforeCall(username, null);
        Type localVarReturnType = new TypeToken<PrivateMessagesListSentForUserResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listSentForUserAsync(String username, final ApiCallback<PrivateMessagesListSentForUserResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listSentForUserValidateBeforeCall(username, _callback);
        Type localVarReturnType = new TypeToken<PrivateMessagesListSentForUserResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListSentForUserRequestBuilder {
        private final String username;

        private ListSentForUserRequestBuilder(String username) {
            this.username = username;
        }

        /**
         * Build call for listSentForUser
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> private messages </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listSentForUserCall(username, _callback);
        }


        /**
         * Execute listSentForUser request
         * @return PrivateMessagesListSentForUserResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> private messages </td><td>  -  </td></tr>
         </table>
         */
        public PrivateMessagesListSentForUserResponse execute() throws ApiException {
            ApiResponse<PrivateMessagesListSentForUserResponse> localVarResp = listSentForUserWithHttpInfo(username);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listSentForUser request with HTTP info returned
         * @return ApiResponse&lt;PrivateMessagesListSentForUserResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> private messages </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PrivateMessagesListSentForUserResponse> executeWithHttpInfo() throws ApiException {
            return listSentForUserWithHttpInfo(username);
        }

        /**
         * Execute listSentForUser request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> private messages </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PrivateMessagesListSentForUserResponse> _callback) throws ApiException {
            return listSentForUserAsync(username, _callback);
        }
    }

    /**
     * Get a list of private messages sent for a user
     * 
     * @param username  (required)
     * @return ListSentForUserRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> private messages </td><td>  -  </td></tr>
     </table>
     */
    public ListSentForUserRequestBuilder listSentForUser(String username) throws IllegalArgumentException {
        if (username == null) throw new IllegalArgumentException("\"username\" is required but got null");
            

        return new ListSentForUserRequestBuilder(username);
    }
}
