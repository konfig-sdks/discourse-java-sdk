/*
 * Discourse API Documentation
 * This page contains the documentation on how to use Discourse through API calls.  > Note: For any endpoints not listed you can follow the [reverse engineer the Discourse API](https://meta.discourse.org/t/-/20576) guide to figure out how to use an API endpoint.  ### Request Content-Type  The Content-Type for POST and PUT requests can be set to `application/x-www-form-urlencoded`, `multipart/form-data`, or `application/json`.  ### Endpoint Names and Response Content-Type  Most API endpoints provide the same content as their HTML counterparts. For example the URL `/categories` serves a list of categories, the `/categories.json` API provides the same information in JSON format.  Instead of sending API requests to `/categories.json` you may also send them to `/categories` and add an `Accept: application/json` header to the request to get the JSON response. Sending requests with the `Accept` header is necessary if you want to use URLs for related endpoints returned by the API, such as pagination URLs. These URLs are returned without the `.json` prefix so you need to add the header in order to get the correct response format.  ### Authentication  Some endpoints do not require any authentication, pretty much anything else will require you to be authenticated.  To become authenticated you will need to create an API Key from the admin panel.  Once you have your API Key you can pass it in along with your API Username as an HTTP header like this:  ``` curl -X GET \"http://127.0.0.1:3000/admin/users/list/active.json\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" ```  and this is how POST requests will look:  ``` curl -X POST \"http://127.0.0.1:3000/categories\" \\ -H \"Content-Type: multipart/form-data;\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" \\ -F \"name=89853c20-4409-e91a-a8ea-f6cdff96aaaa\" \\ -F \"color=49d9e9\" \\ -F \"text_color=f0fcfd\" ```  ### Boolean values  If an endpoint accepts a boolean be sure to specify it as a lowercase `true` or `false` value unless noted otherwise. 
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.util.Set;
import com.konfigthis.client.model.UsersActivateUserResponse;
import com.konfigthis.client.model.UsersAnonymizeByIdJsonResponse;
import com.konfigthis.client.model.UsersDeactivateUserResponse;
import com.konfigthis.client.model.UsersDeleteUserByIdJsonRequest;
import com.konfigthis.client.model.UsersDeleteUserByIdJsonResponse;
import com.konfigthis.client.model.UsersGetListOfUsersResponseInner;
import com.konfigthis.client.model.UsersGetUserByIdJsonResponse;
import com.konfigthis.client.model.UsersLogOutUserActionResponse;
import com.konfigthis.client.model.UsersRefreshGravatarPostResponse;
import com.konfigthis.client.model.UsersSilenceByIdRequest;
import com.konfigthis.client.model.UsersSilenceByIdResponse;
import com.konfigthis.client.model.UsersSuspendByIdJsonRequest;
import com.konfigthis.client.model.UsersSuspendByIdJsonResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class AdminApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AdminApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public AdminApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call activateUserCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/users/{id}/activate.json"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call activateUserValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling activateUser(Async)");
        }

        return activateUserCall(id, _callback);

    }


    private ApiResponse<UsersActivateUserResponse> activateUserWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = activateUserValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<UsersActivateUserResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call activateUserAsync(Integer id, final ApiCallback<UsersActivateUserResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = activateUserValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<UsersActivateUserResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ActivateUserRequestBuilder {
        private final Integer id;

        private ActivateUserRequestBuilder(Integer id) {
            this.id = id;
        }

        /**
         * Build call for activateUser
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return activateUserCall(id, _callback);
        }


        /**
         * Execute activateUser request
         * @return UsersActivateUserResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
         </table>
         */
        public UsersActivateUserResponse execute() throws ApiException {
            ApiResponse<UsersActivateUserResponse> localVarResp = activateUserWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute activateUser request with HTTP info returned
         * @return ApiResponse&lt;UsersActivateUserResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UsersActivateUserResponse> executeWithHttpInfo() throws ApiException {
            return activateUserWithHttpInfo(id);
        }

        /**
         * Execute activateUser request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UsersActivateUserResponse> _callback) throws ApiException {
            return activateUserAsync(id, _callback);
        }
    }

    /**
     * Activate a user
     * 
     * @param id  (required)
     * @return ActivateUserRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
     </table>
     */
    public ActivateUserRequestBuilder activateUser(Integer id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        return new ActivateUserRequestBuilder(id);
    }
    private okhttp3.Call anonymizeByIdJsonCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/users/{id}/anonymize.json"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call anonymizeByIdJsonValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling anonymizeByIdJson(Async)");
        }

        return anonymizeByIdJsonCall(id, _callback);

    }


    private ApiResponse<UsersAnonymizeByIdJsonResponse> anonymizeByIdJsonWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = anonymizeByIdJsonValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<UsersAnonymizeByIdJsonResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call anonymizeByIdJsonAsync(Integer id, final ApiCallback<UsersAnonymizeByIdJsonResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = anonymizeByIdJsonValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<UsersAnonymizeByIdJsonResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AnonymizeByIdJsonRequestBuilder {
        private final Integer id;

        private AnonymizeByIdJsonRequestBuilder(Integer id) {
            this.id = id;
        }

        /**
         * Build call for anonymizeByIdJson
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return anonymizeByIdJsonCall(id, _callback);
        }


        /**
         * Execute anonymizeByIdJson request
         * @return UsersAnonymizeByIdJsonResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
         </table>
         */
        public UsersAnonymizeByIdJsonResponse execute() throws ApiException {
            ApiResponse<UsersAnonymizeByIdJsonResponse> localVarResp = anonymizeByIdJsonWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute anonymizeByIdJson request with HTTP info returned
         * @return ApiResponse&lt;UsersAnonymizeByIdJsonResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UsersAnonymizeByIdJsonResponse> executeWithHttpInfo() throws ApiException {
            return anonymizeByIdJsonWithHttpInfo(id);
        }

        /**
         * Execute anonymizeByIdJson request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UsersAnonymizeByIdJsonResponse> _callback) throws ApiException {
            return anonymizeByIdJsonAsync(id, _callback);
        }
    }

    /**
     * Anonymize a user
     * 
     * @param id  (required)
     * @return AnonymizeByIdJsonRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
     </table>
     */
    public AnonymizeByIdJsonRequestBuilder anonymizeByIdJson(Integer id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        return new AnonymizeByIdJsonRequestBuilder(id);
    }
    private okhttp3.Call deactivateUserCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/users/{id}/deactivate.json"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deactivateUserValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deactivateUser(Async)");
        }

        return deactivateUserCall(id, _callback);

    }


    private ApiResponse<UsersDeactivateUserResponse> deactivateUserWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = deactivateUserValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<UsersDeactivateUserResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deactivateUserAsync(Integer id, final ApiCallback<UsersDeactivateUserResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deactivateUserValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<UsersDeactivateUserResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeactivateUserRequestBuilder {
        private final Integer id;

        private DeactivateUserRequestBuilder(Integer id) {
            this.id = id;
        }

        /**
         * Build call for deactivateUser
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deactivateUserCall(id, _callback);
        }


        /**
         * Execute deactivateUser request
         * @return UsersDeactivateUserResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
         </table>
         */
        public UsersDeactivateUserResponse execute() throws ApiException {
            ApiResponse<UsersDeactivateUserResponse> localVarResp = deactivateUserWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute deactivateUser request with HTTP info returned
         * @return ApiResponse&lt;UsersDeactivateUserResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UsersDeactivateUserResponse> executeWithHttpInfo() throws ApiException {
            return deactivateUserWithHttpInfo(id);
        }

        /**
         * Execute deactivateUser request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UsersDeactivateUserResponse> _callback) throws ApiException {
            return deactivateUserAsync(id, _callback);
        }
    }

    /**
     * Deactivate a user
     * 
     * @param id  (required)
     * @return DeactivateUserRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
     </table>
     */
    public DeactivateUserRequestBuilder deactivateUser(Integer id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        return new DeactivateUserRequestBuilder(id);
    }
    private okhttp3.Call deleteUserByIdJsonCall(Integer id, UsersDeleteUserByIdJsonRequest usersDeleteUserByIdJsonRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = usersDeleteUserByIdJsonRequest;

        // create path and map variables
        String localVarPath = "/admin/users/{id}.json"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteUserByIdJsonValidateBeforeCall(Integer id, UsersDeleteUserByIdJsonRequest usersDeleteUserByIdJsonRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteUserByIdJson(Async)");
        }

        return deleteUserByIdJsonCall(id, usersDeleteUserByIdJsonRequest, _callback);

    }


    private ApiResponse<UsersDeleteUserByIdJsonResponse> deleteUserByIdJsonWithHttpInfo(Integer id, UsersDeleteUserByIdJsonRequest usersDeleteUserByIdJsonRequest) throws ApiException {
        okhttp3.Call localVarCall = deleteUserByIdJsonValidateBeforeCall(id, usersDeleteUserByIdJsonRequest, null);
        Type localVarReturnType = new TypeToken<UsersDeleteUserByIdJsonResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteUserByIdJsonAsync(Integer id, UsersDeleteUserByIdJsonRequest usersDeleteUserByIdJsonRequest, final ApiCallback<UsersDeleteUserByIdJsonResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteUserByIdJsonValidateBeforeCall(id, usersDeleteUserByIdJsonRequest, _callback);
        Type localVarReturnType = new TypeToken<UsersDeleteUserByIdJsonResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeleteUserByIdJsonRequestBuilder {
        private final Integer id;
        private Boolean deletePosts;
        private Boolean blockEmail;
        private Boolean blockUrls;
        private Boolean blockIp;

        private DeleteUserByIdJsonRequestBuilder(Integer id) {
            this.id = id;
        }

        /**
         * Set deletePosts
         * @param deletePosts  (optional)
         * @return DeleteUserByIdJsonRequestBuilder
         */
        public DeleteUserByIdJsonRequestBuilder deletePosts(Boolean deletePosts) {
            this.deletePosts = deletePosts;
            return this;
        }
        
        /**
         * Set blockEmail
         * @param blockEmail  (optional)
         * @return DeleteUserByIdJsonRequestBuilder
         */
        public DeleteUserByIdJsonRequestBuilder blockEmail(Boolean blockEmail) {
            this.blockEmail = blockEmail;
            return this;
        }
        
        /**
         * Set blockUrls
         * @param blockUrls  (optional)
         * @return DeleteUserByIdJsonRequestBuilder
         */
        public DeleteUserByIdJsonRequestBuilder blockUrls(Boolean blockUrls) {
            this.blockUrls = blockUrls;
            return this;
        }
        
        /**
         * Set blockIp
         * @param blockIp  (optional)
         * @return DeleteUserByIdJsonRequestBuilder
         */
        public DeleteUserByIdJsonRequestBuilder blockIp(Boolean blockIp) {
            this.blockIp = blockIp;
            return this;
        }
        
        /**
         * Build call for deleteUserByIdJson
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UsersDeleteUserByIdJsonRequest usersDeleteUserByIdJsonRequest = buildBodyParams();
            return deleteUserByIdJsonCall(id, usersDeleteUserByIdJsonRequest, _callback);
        }

        private UsersDeleteUserByIdJsonRequest buildBodyParams() {
            UsersDeleteUserByIdJsonRequest usersDeleteUserByIdJsonRequest = new UsersDeleteUserByIdJsonRequest();
            usersDeleteUserByIdJsonRequest.deletePosts(this.deletePosts);
            usersDeleteUserByIdJsonRequest.blockEmail(this.blockEmail);
            usersDeleteUserByIdJsonRequest.blockUrls(this.blockUrls);
            usersDeleteUserByIdJsonRequest.blockIp(this.blockIp);
            return usersDeleteUserByIdJsonRequest;
        }

        /**
         * Execute deleteUserByIdJson request
         * @return UsersDeleteUserByIdJsonResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
         </table>
         */
        public UsersDeleteUserByIdJsonResponse execute() throws ApiException {
            UsersDeleteUserByIdJsonRequest usersDeleteUserByIdJsonRequest = buildBodyParams();
            ApiResponse<UsersDeleteUserByIdJsonResponse> localVarResp = deleteUserByIdJsonWithHttpInfo(id, usersDeleteUserByIdJsonRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute deleteUserByIdJson request with HTTP info returned
         * @return ApiResponse&lt;UsersDeleteUserByIdJsonResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UsersDeleteUserByIdJsonResponse> executeWithHttpInfo() throws ApiException {
            UsersDeleteUserByIdJsonRequest usersDeleteUserByIdJsonRequest = buildBodyParams();
            return deleteUserByIdJsonWithHttpInfo(id, usersDeleteUserByIdJsonRequest);
        }

        /**
         * Execute deleteUserByIdJson request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UsersDeleteUserByIdJsonResponse> _callback) throws ApiException {
            UsersDeleteUserByIdJsonRequest usersDeleteUserByIdJsonRequest = buildBodyParams();
            return deleteUserByIdJsonAsync(id, usersDeleteUserByIdJsonRequest, _callback);
        }
    }

    /**
     * Delete a user
     * 
     * @param id  (required)
     * @return DeleteUserByIdJsonRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
     </table>
     */
    public DeleteUserByIdJsonRequestBuilder deleteUserByIdJson(Integer id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        return new DeleteUserByIdJsonRequestBuilder(id);
    }
    private okhttp3.Call getListOfUsersCall(String flag, String order, String asc, Integer page, Boolean showEmails, Boolean stats, String email, String ip, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/users/list/{flag}.json"
            .replace("{" + "flag" + "}", localVarApiClient.escapeString(flag.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        if (asc != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asc", asc));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (showEmails != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("show_emails", showEmails));
        }

        if (stats != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("stats", stats));
        }

        if (email != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("email", email));
        }

        if (ip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ip", ip));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getListOfUsersValidateBeforeCall(String flag, String order, String asc, Integer page, Boolean showEmails, Boolean stats, String email, String ip, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'flag' is set
        if (flag == null) {
            throw new ApiException("Missing the required parameter 'flag' when calling getListOfUsers(Async)");
        }

        return getListOfUsersCall(flag, order, asc, page, showEmails, stats, email, ip, _callback);

    }


    private ApiResponse<Set<UsersGetListOfUsersResponseInner>> getListOfUsersWithHttpInfo(String flag, String order, String asc, Integer page, Boolean showEmails, Boolean stats, String email, String ip) throws ApiException {
        okhttp3.Call localVarCall = getListOfUsersValidateBeforeCall(flag, order, asc, page, showEmails, stats, email, ip, null);
        Type localVarReturnType = new TypeToken<Set<UsersGetListOfUsersResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getListOfUsersAsync(String flag, String order, String asc, Integer page, Boolean showEmails, Boolean stats, String email, String ip, final ApiCallback<Set<UsersGetListOfUsersResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getListOfUsersValidateBeforeCall(flag, order, asc, page, showEmails, stats, email, ip, _callback);
        Type localVarReturnType = new TypeToken<Set<UsersGetListOfUsersResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetListOfUsersRequestBuilder {
        private final String flag;
        private String order;
        private String asc;
        private Integer page;
        private Boolean showEmails;
        private Boolean stats;
        private String email;
        private String ip;

        private GetListOfUsersRequestBuilder(String flag) {
            this.flag = flag;
        }

        /**
         * Set order
         * @param order  (optional)
         * @return GetListOfUsersRequestBuilder
         */
        public GetListOfUsersRequestBuilder order(String order) {
            this.order = order;
            return this;
        }
        
        /**
         * Set asc
         * @param asc  (optional)
         * @return GetListOfUsersRequestBuilder
         */
        public GetListOfUsersRequestBuilder asc(String asc) {
            this.asc = asc;
            return this;
        }
        
        /**
         * Set page
         * @param page  (optional)
         * @return GetListOfUsersRequestBuilder
         */
        public GetListOfUsersRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set showEmails
         * @param showEmails Include user email addresses in response. These requests will be logged in the staff action logs. (optional)
         * @return GetListOfUsersRequestBuilder
         */
        public GetListOfUsersRequestBuilder showEmails(Boolean showEmails) {
            this.showEmails = showEmails;
            return this;
        }
        
        /**
         * Set stats
         * @param stats Include user stats information (optional)
         * @return GetListOfUsersRequestBuilder
         */
        public GetListOfUsersRequestBuilder stats(Boolean stats) {
            this.stats = stats;
            return this;
        }
        
        /**
         * Set email
         * @param email Filter to the user with this email address (optional)
         * @return GetListOfUsersRequestBuilder
         */
        public GetListOfUsersRequestBuilder email(String email) {
            this.email = email;
            return this;
        }
        
        /**
         * Set ip
         * @param ip Filter to users with this IP address (optional)
         * @return GetListOfUsersRequestBuilder
         */
        public GetListOfUsersRequestBuilder ip(String ip) {
            this.ip = ip;
            return this;
        }
        
        /**
         * Build call for getListOfUsers
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getListOfUsersCall(flag, order, asc, page, showEmails, stats, email, ip, _callback);
        }


        /**
         * Execute getListOfUsers request
         * @return Set&lt;UsersGetListOfUsersResponseInner&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
         </table>
         */
        public Set<UsersGetListOfUsersResponseInner> execute() throws ApiException {
            ApiResponse<Set<UsersGetListOfUsersResponseInner>> localVarResp = getListOfUsersWithHttpInfo(flag, order, asc, page, showEmails, stats, email, ip);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getListOfUsers request with HTTP info returned
         * @return ApiResponse&lt;Set&lt;UsersGetListOfUsersResponseInner&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Set<UsersGetListOfUsersResponseInner>> executeWithHttpInfo() throws ApiException {
            return getListOfUsersWithHttpInfo(flag, order, asc, page, showEmails, stats, email, ip);
        }

        /**
         * Execute getListOfUsers request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Set<UsersGetListOfUsersResponseInner>> _callback) throws ApiException {
            return getListOfUsersAsync(flag, order, asc, page, showEmails, stats, email, ip, _callback);
        }
    }

    /**
     * Get a list of users
     * 
     * @param flag  (required)
     * @return GetListOfUsersRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
     </table>
     */
    public GetListOfUsersRequestBuilder getListOfUsers(String flag) throws IllegalArgumentException {
        if (flag == null) throw new IllegalArgumentException("\"flag\" is required but got null");
            

        return new GetListOfUsersRequestBuilder(flag);
    }
    private okhttp3.Call getUserByIdJsonCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/users/{id}.json"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserByIdJsonValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getUserByIdJson(Async)");
        }

        return getUserByIdJsonCall(id, _callback);

    }


    private ApiResponse<UsersGetUserByIdJsonResponse> getUserByIdJsonWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = getUserByIdJsonValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<UsersGetUserByIdJsonResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getUserByIdJsonAsync(Integer id, final ApiCallback<UsersGetUserByIdJsonResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserByIdJsonValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<UsersGetUserByIdJsonResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetUserByIdJsonRequestBuilder {
        private final Integer id;

        private GetUserByIdJsonRequestBuilder(Integer id) {
            this.id = id;
        }

        /**
         * Build call for getUserByIdJson
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getUserByIdJsonCall(id, _callback);
        }


        /**
         * Execute getUserByIdJson request
         * @return UsersGetUserByIdJsonResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
         </table>
         */
        public UsersGetUserByIdJsonResponse execute() throws ApiException {
            ApiResponse<UsersGetUserByIdJsonResponse> localVarResp = getUserByIdJsonWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getUserByIdJson request with HTTP info returned
         * @return ApiResponse&lt;UsersGetUserByIdJsonResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UsersGetUserByIdJsonResponse> executeWithHttpInfo() throws ApiException {
            return getUserByIdJsonWithHttpInfo(id);
        }

        /**
         * Execute getUserByIdJson request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UsersGetUserByIdJsonResponse> _callback) throws ApiException {
            return getUserByIdJsonAsync(id, _callback);
        }
    }

    /**
     * Get a user by id
     * 
     * @param id  (required)
     * @return GetUserByIdJsonRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
     </table>
     */
    public GetUserByIdJsonRequestBuilder getUserByIdJson(Integer id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        return new GetUserByIdJsonRequestBuilder(id);
    }
    private okhttp3.Call logOutUserActionCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/users/{id}/log_out.json"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call logOutUserActionValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling logOutUserAction(Async)");
        }

        return logOutUserActionCall(id, _callback);

    }


    private ApiResponse<UsersLogOutUserActionResponse> logOutUserActionWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = logOutUserActionValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<UsersLogOutUserActionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call logOutUserActionAsync(Integer id, final ApiCallback<UsersLogOutUserActionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = logOutUserActionValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<UsersLogOutUserActionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class LogOutUserActionRequestBuilder {
        private final Integer id;

        private LogOutUserActionRequestBuilder(Integer id) {
            this.id = id;
        }

        /**
         * Build call for logOutUserAction
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return logOutUserActionCall(id, _callback);
        }


        /**
         * Execute logOutUserAction request
         * @return UsersLogOutUserActionResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
         </table>
         */
        public UsersLogOutUserActionResponse execute() throws ApiException {
            ApiResponse<UsersLogOutUserActionResponse> localVarResp = logOutUserActionWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute logOutUserAction request with HTTP info returned
         * @return ApiResponse&lt;UsersLogOutUserActionResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UsersLogOutUserActionResponse> executeWithHttpInfo() throws ApiException {
            return logOutUserActionWithHttpInfo(id);
        }

        /**
         * Execute logOutUserAction request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UsersLogOutUserActionResponse> _callback) throws ApiException {
            return logOutUserActionAsync(id, _callback);
        }
    }

    /**
     * Log a user out
     * 
     * @param id  (required)
     * @return LogOutUserActionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
     </table>
     */
    public LogOutUserActionRequestBuilder logOutUserAction(Integer id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        return new LogOutUserActionRequestBuilder(id);
    }
    private okhttp3.Call refreshGravatarPostCall(String username, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user_avatar/{username}/refresh_gravatar.json"
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call refreshGravatarPostValidateBeforeCall(String username, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling refreshGravatarPost(Async)");
        }

        return refreshGravatarPostCall(username, _callback);

    }


    private ApiResponse<UsersRefreshGravatarPostResponse> refreshGravatarPostWithHttpInfo(String username) throws ApiException {
        okhttp3.Call localVarCall = refreshGravatarPostValidateBeforeCall(username, null);
        Type localVarReturnType = new TypeToken<UsersRefreshGravatarPostResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call refreshGravatarPostAsync(String username, final ApiCallback<UsersRefreshGravatarPostResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = refreshGravatarPostValidateBeforeCall(username, _callback);
        Type localVarReturnType = new TypeToken<UsersRefreshGravatarPostResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RefreshGravatarPostRequestBuilder {
        private final String username;

        private RefreshGravatarPostRequestBuilder(String username) {
            this.username = username;
        }

        /**
         * Build call for refreshGravatarPost
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return refreshGravatarPostCall(username, _callback);
        }


        /**
         * Execute refreshGravatarPost request
         * @return UsersRefreshGravatarPostResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
         </table>
         */
        public UsersRefreshGravatarPostResponse execute() throws ApiException {
            ApiResponse<UsersRefreshGravatarPostResponse> localVarResp = refreshGravatarPostWithHttpInfo(username);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute refreshGravatarPost request with HTTP info returned
         * @return ApiResponse&lt;UsersRefreshGravatarPostResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UsersRefreshGravatarPostResponse> executeWithHttpInfo() throws ApiException {
            return refreshGravatarPostWithHttpInfo(username);
        }

        /**
         * Execute refreshGravatarPost request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UsersRefreshGravatarPostResponse> _callback) throws ApiException {
            return refreshGravatarPostAsync(username, _callback);
        }
    }

    /**
     * Refresh gravatar
     * 
     * @param username  (required)
     * @return RefreshGravatarPostRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
     </table>
     */
    public RefreshGravatarPostRequestBuilder refreshGravatarPost(String username) throws IllegalArgumentException {
        if (username == null) throw new IllegalArgumentException("\"username\" is required but got null");
            

        return new RefreshGravatarPostRequestBuilder(username);
    }
    private okhttp3.Call silenceByIdCall(Integer id, UsersSilenceByIdRequest usersSilenceByIdRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = usersSilenceByIdRequest;

        // create path and map variables
        String localVarPath = "/admin/users/{id}/silence.json"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call silenceByIdValidateBeforeCall(Integer id, UsersSilenceByIdRequest usersSilenceByIdRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling silenceById(Async)");
        }

        return silenceByIdCall(id, usersSilenceByIdRequest, _callback);

    }


    private ApiResponse<UsersSilenceByIdResponse> silenceByIdWithHttpInfo(Integer id, UsersSilenceByIdRequest usersSilenceByIdRequest) throws ApiException {
        okhttp3.Call localVarCall = silenceByIdValidateBeforeCall(id, usersSilenceByIdRequest, null);
        Type localVarReturnType = new TypeToken<UsersSilenceByIdResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call silenceByIdAsync(Integer id, UsersSilenceByIdRequest usersSilenceByIdRequest, final ApiCallback<UsersSilenceByIdResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = silenceByIdValidateBeforeCall(id, usersSilenceByIdRequest, _callback);
        Type localVarReturnType = new TypeToken<UsersSilenceByIdResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SilenceByIdRequestBuilder {
        private final Integer id;
        private String silencedTill;
        private String reason;
        private String message;
        private String postAction;

        private SilenceByIdRequestBuilder(Integer id) {
            this.id = id;
        }

        /**
         * Set silencedTill
         * @param silencedTill  (optional)
         * @return SilenceByIdRequestBuilder
         */
        public SilenceByIdRequestBuilder silencedTill(String silencedTill) {
            this.silencedTill = silencedTill;
            return this;
        }
        
        /**
         * Set reason
         * @param reason  (optional)
         * @return SilenceByIdRequestBuilder
         */
        public SilenceByIdRequestBuilder reason(String reason) {
            this.reason = reason;
            return this;
        }
        
        /**
         * Set message
         * @param message Will send an email with this message when present (optional)
         * @return SilenceByIdRequestBuilder
         */
        public SilenceByIdRequestBuilder message(String message) {
            this.message = message;
            return this;
        }
        
        /**
         * Set postAction
         * @param postAction  (optional)
         * @return SilenceByIdRequestBuilder
         */
        public SilenceByIdRequestBuilder postAction(String postAction) {
            this.postAction = postAction;
            return this;
        }
        
        /**
         * Build call for silenceById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UsersSilenceByIdRequest usersSilenceByIdRequest = buildBodyParams();
            return silenceByIdCall(id, usersSilenceByIdRequest, _callback);
        }

        private UsersSilenceByIdRequest buildBodyParams() {
            UsersSilenceByIdRequest usersSilenceByIdRequest = new UsersSilenceByIdRequest();
            usersSilenceByIdRequest.silencedTill(this.silencedTill);
            usersSilenceByIdRequest.reason(this.reason);
            usersSilenceByIdRequest.message(this.message);
            usersSilenceByIdRequest.postAction(this.postAction);
            return usersSilenceByIdRequest;
        }

        /**
         * Execute silenceById request
         * @return UsersSilenceByIdResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
         </table>
         */
        public UsersSilenceByIdResponse execute() throws ApiException {
            UsersSilenceByIdRequest usersSilenceByIdRequest = buildBodyParams();
            ApiResponse<UsersSilenceByIdResponse> localVarResp = silenceByIdWithHttpInfo(id, usersSilenceByIdRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute silenceById request with HTTP info returned
         * @return ApiResponse&lt;UsersSilenceByIdResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UsersSilenceByIdResponse> executeWithHttpInfo() throws ApiException {
            UsersSilenceByIdRequest usersSilenceByIdRequest = buildBodyParams();
            return silenceByIdWithHttpInfo(id, usersSilenceByIdRequest);
        }

        /**
         * Execute silenceById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UsersSilenceByIdResponse> _callback) throws ApiException {
            UsersSilenceByIdRequest usersSilenceByIdRequest = buildBodyParams();
            return silenceByIdAsync(id, usersSilenceByIdRequest, _callback);
        }
    }

    /**
     * Silence a user
     * 
     * @param id  (required)
     * @return SilenceByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
     </table>
     */
    public SilenceByIdRequestBuilder silenceById(Integer id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        return new SilenceByIdRequestBuilder(id);
    }
    private okhttp3.Call suspendByIdJsonCall(Integer id, UsersSuspendByIdJsonRequest usersSuspendByIdJsonRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = usersSuspendByIdJsonRequest;

        // create path and map variables
        String localVarPath = "/admin/users/{id}/suspend.json"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call suspendByIdJsonValidateBeforeCall(Integer id, UsersSuspendByIdJsonRequest usersSuspendByIdJsonRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling suspendByIdJson(Async)");
        }

        return suspendByIdJsonCall(id, usersSuspendByIdJsonRequest, _callback);

    }


    private ApiResponse<UsersSuspendByIdJsonResponse> suspendByIdJsonWithHttpInfo(Integer id, UsersSuspendByIdJsonRequest usersSuspendByIdJsonRequest) throws ApiException {
        okhttp3.Call localVarCall = suspendByIdJsonValidateBeforeCall(id, usersSuspendByIdJsonRequest, null);
        Type localVarReturnType = new TypeToken<UsersSuspendByIdJsonResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call suspendByIdJsonAsync(Integer id, UsersSuspendByIdJsonRequest usersSuspendByIdJsonRequest, final ApiCallback<UsersSuspendByIdJsonResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = suspendByIdJsonValidateBeforeCall(id, usersSuspendByIdJsonRequest, _callback);
        Type localVarReturnType = new TypeToken<UsersSuspendByIdJsonResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SuspendByIdJsonRequestBuilder {
        private final String suspendUntil;
        private final String reason;
        private final Integer id;
        private String message;
        private String postAction;

        private SuspendByIdJsonRequestBuilder(String suspendUntil, String reason, Integer id) {
            this.suspendUntil = suspendUntil;
            this.reason = reason;
            this.id = id;
        }

        /**
         * Set message
         * @param message Will send an email with this message when present (optional)
         * @return SuspendByIdJsonRequestBuilder
         */
        public SuspendByIdJsonRequestBuilder message(String message) {
            this.message = message;
            return this;
        }
        
        /**
         * Set postAction
         * @param postAction  (optional)
         * @return SuspendByIdJsonRequestBuilder
         */
        public SuspendByIdJsonRequestBuilder postAction(String postAction) {
            this.postAction = postAction;
            return this;
        }
        
        /**
         * Build call for suspendByIdJson
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UsersSuspendByIdJsonRequest usersSuspendByIdJsonRequest = buildBodyParams();
            return suspendByIdJsonCall(id, usersSuspendByIdJsonRequest, _callback);
        }

        private UsersSuspendByIdJsonRequest buildBodyParams() {
            UsersSuspendByIdJsonRequest usersSuspendByIdJsonRequest = new UsersSuspendByIdJsonRequest();
            usersSuspendByIdJsonRequest.suspendUntil(this.suspendUntil);
            usersSuspendByIdJsonRequest.reason(this.reason);
            usersSuspendByIdJsonRequest.message(this.message);
            usersSuspendByIdJsonRequest.postAction(this.postAction);
            return usersSuspendByIdJsonRequest;
        }

        /**
         * Execute suspendByIdJson request
         * @return UsersSuspendByIdJsonResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
         </table>
         */
        public UsersSuspendByIdJsonResponse execute() throws ApiException {
            UsersSuspendByIdJsonRequest usersSuspendByIdJsonRequest = buildBodyParams();
            ApiResponse<UsersSuspendByIdJsonResponse> localVarResp = suspendByIdJsonWithHttpInfo(id, usersSuspendByIdJsonRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute suspendByIdJson request with HTTP info returned
         * @return ApiResponse&lt;UsersSuspendByIdJsonResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UsersSuspendByIdJsonResponse> executeWithHttpInfo() throws ApiException {
            UsersSuspendByIdJsonRequest usersSuspendByIdJsonRequest = buildBodyParams();
            return suspendByIdJsonWithHttpInfo(id, usersSuspendByIdJsonRequest);
        }

        /**
         * Execute suspendByIdJson request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UsersSuspendByIdJsonResponse> _callback) throws ApiException {
            UsersSuspendByIdJsonRequest usersSuspendByIdJsonRequest = buildBodyParams();
            return suspendByIdJsonAsync(id, usersSuspendByIdJsonRequest, _callback);
        }
    }

    /**
     * Suspend a user
     * 
     * @param id  (required)
     * @return SuspendByIdJsonRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
     </table>
     */
    public SuspendByIdJsonRequestBuilder suspendByIdJson(String suspendUntil, String reason, Integer id) throws IllegalArgumentException {
        if (suspendUntil == null) throw new IllegalArgumentException("\"suspendUntil\" is required but got null");
            

        if (reason == null) throw new IllegalArgumentException("\"reason\" is required but got null");
            

        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        return new SuspendByIdJsonRequestBuilder(suspendUntil, reason, id);
    }
}
