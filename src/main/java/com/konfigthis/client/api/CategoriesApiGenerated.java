/*
 * Discourse API Documentation
 * This page contains the documentation on how to use Discourse through API calls.  > Note: For any endpoints not listed you can follow the [reverse engineer the Discourse API](https://meta.discourse.org/t/-/20576) guide to figure out how to use an API endpoint.  ### Request Content-Type  The Content-Type for POST and PUT requests can be set to `application/x-www-form-urlencoded`, `multipart/form-data`, or `application/json`.  ### Endpoint Names and Response Content-Type  Most API endpoints provide the same content as their HTML counterparts. For example the URL `/categories` serves a list of categories, the `/categories.json` API provides the same information in JSON format.  Instead of sending API requests to `/categories.json` you may also send them to `/categories` and add an `Accept: application/json` header to the request to get the JSON response. Sending requests with the `Accept` header is necessary if you want to use URLs for related endpoints returned by the API, such as pagination URLs. These URLs are returned without the `.json` prefix so you need to add the header in order to get the correct response format.  ### Authentication  Some endpoints do not require any authentication, pretty much anything else will require you to be authenticated.  To become authenticated you will need to create an API Key from the admin panel.  Once you have your API Key you can pass it in along with your API Username as an HTTP header like this:  ``` curl -X GET \"http://127.0.0.1:3000/admin/users/list/active.json\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" ```  and this is how POST requests will look:  ``` curl -X POST \"http://127.0.0.1:3000/categories\" \\ -H \"Content-Type: multipart/form-data;\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" \\ -F \"name=89853c20-4409-e91a-a8ea-f6cdff96aaaa\" \\ -F \"color=49d9e9\" \\ -F \"text_color=f0fcfd\" ```  ### Boolean values  If an endpoint accepts a boolean be sure to specify it as a lowercase `true` or `false` value unless noted otherwise. 
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.CategoriesCreateCategoryRequestRequest;
import com.konfigthis.client.model.CategoriesCreateCategoryRequestRequestPermissions;
import com.konfigthis.client.model.CategoriesCreateCategoryRequestResponse;
import com.konfigthis.client.model.CategoriesGetCategoryByIdJsonResponse;
import com.konfigthis.client.model.CategoriesListResponse;
import com.konfigthis.client.model.CategoriesListTopicsResponse;
import com.konfigthis.client.model.CategoriesUpdateCategoryByIdJsonRequest;
import com.konfigthis.client.model.CategoriesUpdateCategoryByIdJsonRequestPermissions;
import com.konfigthis.client.model.CategoriesUpdateCategoryByIdJsonResponse;
import com.konfigthis.client.model.SiteGetCategoriesAndSubcategoriesResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class CategoriesApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CategoriesApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public CategoriesApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createCategoryRequestCall(CategoriesCreateCategoryRequestRequest categoriesCreateCategoryRequestRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = categoriesCreateCategoryRequestRequest;

        // create path and map variables
        String localVarPath = "/categories.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createCategoryRequestValidateBeforeCall(CategoriesCreateCategoryRequestRequest categoriesCreateCategoryRequestRequest, final ApiCallback _callback) throws ApiException {
        return createCategoryRequestCall(categoriesCreateCategoryRequestRequest, _callback);

    }


    private ApiResponse<CategoriesCreateCategoryRequestResponse> createCategoryRequestWithHttpInfo(CategoriesCreateCategoryRequestRequest categoriesCreateCategoryRequestRequest) throws ApiException {
        okhttp3.Call localVarCall = createCategoryRequestValidateBeforeCall(categoriesCreateCategoryRequestRequest, null);
        Type localVarReturnType = new TypeToken<CategoriesCreateCategoryRequestResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createCategoryRequestAsync(CategoriesCreateCategoryRequestRequest categoriesCreateCategoryRequestRequest, final ApiCallback<CategoriesCreateCategoryRequestResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createCategoryRequestValidateBeforeCall(categoriesCreateCategoryRequestRequest, _callback);
        Type localVarReturnType = new TypeToken<CategoriesCreateCategoryRequestResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateCategoryRequestRequestBuilder {
        private final String name;
        private String color;
        private String textColor;
        private Integer parentCategoryId;
        private Boolean allowBadges;
        private String slug;
        private Boolean topicFeaturedLinksAllowed;
        private CategoriesCreateCategoryRequestRequestPermissions permissions;
        private Integer searchPriority;
        private List<Object> formTemplateIds;

        private CreateCategoryRequestRequestBuilder(String name) {
            this.name = name;
        }

        /**
         * Set color
         * @param color  (optional)
         * @return CreateCategoryRequestRequestBuilder
         */
        public CreateCategoryRequestRequestBuilder color(String color) {
            this.color = color;
            return this;
        }
        
        /**
         * Set textColor
         * @param textColor  (optional)
         * @return CreateCategoryRequestRequestBuilder
         */
        public CreateCategoryRequestRequestBuilder textColor(String textColor) {
            this.textColor = textColor;
            return this;
        }
        
        /**
         * Set parentCategoryId
         * @param parentCategoryId  (optional)
         * @return CreateCategoryRequestRequestBuilder
         */
        public CreateCategoryRequestRequestBuilder parentCategoryId(Integer parentCategoryId) {
            this.parentCategoryId = parentCategoryId;
            return this;
        }
        
        /**
         * Set allowBadges
         * @param allowBadges  (optional)
         * @return CreateCategoryRequestRequestBuilder
         */
        public CreateCategoryRequestRequestBuilder allowBadges(Boolean allowBadges) {
            this.allowBadges = allowBadges;
            return this;
        }
        
        /**
         * Set slug
         * @param slug  (optional)
         * @return CreateCategoryRequestRequestBuilder
         */
        public CreateCategoryRequestRequestBuilder slug(String slug) {
            this.slug = slug;
            return this;
        }
        
        /**
         * Set topicFeaturedLinksAllowed
         * @param topicFeaturedLinksAllowed  (optional)
         * @return CreateCategoryRequestRequestBuilder
         */
        public CreateCategoryRequestRequestBuilder topicFeaturedLinksAllowed(Boolean topicFeaturedLinksAllowed) {
            this.topicFeaturedLinksAllowed = topicFeaturedLinksAllowed;
            return this;
        }
        
        /**
         * Set permissions
         * @param permissions  (optional)
         * @return CreateCategoryRequestRequestBuilder
         */
        public CreateCategoryRequestRequestBuilder permissions(CategoriesCreateCategoryRequestRequestPermissions permissions) {
            this.permissions = permissions;
            return this;
        }
        
        /**
         * Set searchPriority
         * @param searchPriority  (optional)
         * @return CreateCategoryRequestRequestBuilder
         */
        public CreateCategoryRequestRequestBuilder searchPriority(Integer searchPriority) {
            this.searchPriority = searchPriority;
            return this;
        }
        
        /**
         * Set formTemplateIds
         * @param formTemplateIds  (optional)
         * @return CreateCategoryRequestRequestBuilder
         */
        public CreateCategoryRequestRequestBuilder formTemplateIds(List<Object> formTemplateIds) {
            this.formTemplateIds = formTemplateIds;
            return this;
        }
        
        /**
         * Build call for createCategoryRequest
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> success response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CategoriesCreateCategoryRequestRequest categoriesCreateCategoryRequestRequest = buildBodyParams();
            return createCategoryRequestCall(categoriesCreateCategoryRequestRequest, _callback);
        }

        private CategoriesCreateCategoryRequestRequest buildBodyParams() {
            CategoriesCreateCategoryRequestRequest categoriesCreateCategoryRequestRequest = new CategoriesCreateCategoryRequestRequest();
            categoriesCreateCategoryRequestRequest.name(this.name);
            categoriesCreateCategoryRequestRequest.color(this.color);
            categoriesCreateCategoryRequestRequest.textColor(this.textColor);
            categoriesCreateCategoryRequestRequest.parentCategoryId(this.parentCategoryId);
            categoriesCreateCategoryRequestRequest.allowBadges(this.allowBadges);
            categoriesCreateCategoryRequestRequest.slug(this.slug);
            categoriesCreateCategoryRequestRequest.topicFeaturedLinksAllowed(this.topicFeaturedLinksAllowed);
            categoriesCreateCategoryRequestRequest.permissions(this.permissions);
            categoriesCreateCategoryRequestRequest.searchPriority(this.searchPriority);
            categoriesCreateCategoryRequestRequest.formTemplateIds(this.formTemplateIds);
            return categoriesCreateCategoryRequestRequest;
        }

        /**
         * Execute createCategoryRequest request
         * @return CategoriesCreateCategoryRequestResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> success response </td><td>  -  </td></tr>
         </table>
         */
        public CategoriesCreateCategoryRequestResponse execute() throws ApiException {
            CategoriesCreateCategoryRequestRequest categoriesCreateCategoryRequestRequest = buildBodyParams();
            ApiResponse<CategoriesCreateCategoryRequestResponse> localVarResp = createCategoryRequestWithHttpInfo(categoriesCreateCategoryRequestRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createCategoryRequest request with HTTP info returned
         * @return ApiResponse&lt;CategoriesCreateCategoryRequestResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> success response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CategoriesCreateCategoryRequestResponse> executeWithHttpInfo() throws ApiException {
            CategoriesCreateCategoryRequestRequest categoriesCreateCategoryRequestRequest = buildBodyParams();
            return createCategoryRequestWithHttpInfo(categoriesCreateCategoryRequestRequest);
        }

        /**
         * Execute createCategoryRequest request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> success response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CategoriesCreateCategoryRequestResponse> _callback) throws ApiException {
            CategoriesCreateCategoryRequestRequest categoriesCreateCategoryRequestRequest = buildBodyParams();
            return createCategoryRequestAsync(categoriesCreateCategoryRequestRequest, _callback);
        }
    }

    /**
     * Creates a category
     * 
     * @return CreateCategoryRequestRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success response </td><td>  -  </td></tr>
     </table>
     */
    public CreateCategoryRequestRequestBuilder createCategoryRequest(String name) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        return new CreateCategoryRequestRequestBuilder(name);
    }
    private okhttp3.Call getCategoriesAndSubcategoriesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/site.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCategoriesAndSubcategoriesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getCategoriesAndSubcategoriesCall(_callback);

    }


    private ApiResponse<SiteGetCategoriesAndSubcategoriesResponse> getCategoriesAndSubcategoriesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getCategoriesAndSubcategoriesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<SiteGetCategoriesAndSubcategoriesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCategoriesAndSubcategoriesAsync(final ApiCallback<SiteGetCategoriesAndSubcategoriesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCategoriesAndSubcategoriesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<SiteGetCategoriesAndSubcategoriesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCategoriesAndSubcategoriesRequestBuilder {

        private GetCategoriesAndSubcategoriesRequestBuilder() {
        }

        /**
         * Build call for getCategoriesAndSubcategories
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> success response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCategoriesAndSubcategoriesCall(_callback);
        }


        /**
         * Execute getCategoriesAndSubcategories request
         * @return SiteGetCategoriesAndSubcategoriesResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> success response </td><td>  -  </td></tr>
         </table>
         */
        public SiteGetCategoriesAndSubcategoriesResponse execute() throws ApiException {
            ApiResponse<SiteGetCategoriesAndSubcategoriesResponse> localVarResp = getCategoriesAndSubcategoriesWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCategoriesAndSubcategories request with HTTP info returned
         * @return ApiResponse&lt;SiteGetCategoriesAndSubcategoriesResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> success response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SiteGetCategoriesAndSubcategoriesResponse> executeWithHttpInfo() throws ApiException {
            return getCategoriesAndSubcategoriesWithHttpInfo();
        }

        /**
         * Execute getCategoriesAndSubcategories request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> success response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SiteGetCategoriesAndSubcategoriesResponse> _callback) throws ApiException {
            return getCategoriesAndSubcategoriesAsync(_callback);
        }
    }

    /**
     * Get site info
     * Can be used to fetch all categories and subcategories
     * @return GetCategoriesAndSubcategoriesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success response </td><td>  -  </td></tr>
     </table>
     */
    public GetCategoriesAndSubcategoriesRequestBuilder getCategoriesAndSubcategories() throws IllegalArgumentException {
        return new GetCategoriesAndSubcategoriesRequestBuilder();
    }
    private okhttp3.Call getCategoryByIdJsonCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/c/{id}/show.json"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCategoryByIdJsonValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getCategoryByIdJson(Async)");
        }

        return getCategoryByIdJsonCall(id, _callback);

    }


    private ApiResponse<CategoriesGetCategoryByIdJsonResponse> getCategoryByIdJsonWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = getCategoryByIdJsonValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<CategoriesGetCategoryByIdJsonResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCategoryByIdJsonAsync(Integer id, final ApiCallback<CategoriesGetCategoryByIdJsonResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCategoryByIdJsonValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<CategoriesGetCategoryByIdJsonResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCategoryByIdJsonRequestBuilder {
        private final Integer id;

        private GetCategoryByIdJsonRequestBuilder(Integer id) {
            this.id = id;
        }

        /**
         * Build call for getCategoryByIdJson
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCategoryByIdJsonCall(id, _callback);
        }


        /**
         * Execute getCategoryByIdJson request
         * @return CategoriesGetCategoryByIdJsonResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
         </table>
         */
        public CategoriesGetCategoryByIdJsonResponse execute() throws ApiException {
            ApiResponse<CategoriesGetCategoryByIdJsonResponse> localVarResp = getCategoryByIdJsonWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCategoryByIdJson request with HTTP info returned
         * @return ApiResponse&lt;CategoriesGetCategoryByIdJsonResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CategoriesGetCategoryByIdJsonResponse> executeWithHttpInfo() throws ApiException {
            return getCategoryByIdJsonWithHttpInfo(id);
        }

        /**
         * Execute getCategoryByIdJson request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CategoriesGetCategoryByIdJsonResponse> _callback) throws ApiException {
            return getCategoryByIdJsonAsync(id, _callback);
        }
    }

    /**
     * Show category
     * 
     * @param id  (required)
     * @return GetCategoryByIdJsonRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
     </table>
     */
    public GetCategoryByIdJsonRequestBuilder getCategoryByIdJson(Integer id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        return new GetCategoryByIdJsonRequestBuilder(id);
    }
    private okhttp3.Call listCall(Boolean includeSubcategories, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/categories.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (includeSubcategories != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_subcategories", includeSubcategories));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listValidateBeforeCall(Boolean includeSubcategories, final ApiCallback _callback) throws ApiException {
        return listCall(includeSubcategories, _callback);

    }


    private ApiResponse<CategoriesListResponse> listWithHttpInfo(Boolean includeSubcategories) throws ApiException {
        okhttp3.Call localVarCall = listValidateBeforeCall(includeSubcategories, null);
        Type localVarReturnType = new TypeToken<CategoriesListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAsync(Boolean includeSubcategories, final ApiCallback<CategoriesListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listValidateBeforeCall(includeSubcategories, _callback);
        Type localVarReturnType = new TypeToken<CategoriesListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListRequestBuilder {
        private Boolean includeSubcategories;

        private ListRequestBuilder() {
        }

        /**
         * Set includeSubcategories
         * @param includeSubcategories  (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder includeSubcategories(Boolean includeSubcategories) {
            this.includeSubcategories = includeSubcategories;
            return this;
        }
        
        /**
         * Build call for list
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> success response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listCall(includeSubcategories, _callback);
        }


        /**
         * Execute list request
         * @return CategoriesListResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> success response </td><td>  -  </td></tr>
         </table>
         */
        public CategoriesListResponse execute() throws ApiException {
            ApiResponse<CategoriesListResponse> localVarResp = listWithHttpInfo(includeSubcategories);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute list request with HTTP info returned
         * @return ApiResponse&lt;CategoriesListResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> success response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CategoriesListResponse> executeWithHttpInfo() throws ApiException {
            return listWithHttpInfo(includeSubcategories);
        }

        /**
         * Execute list request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> success response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CategoriesListResponse> _callback) throws ApiException {
            return listAsync(includeSubcategories, _callback);
        }
    }

    /**
     * Retrieves a list of categories
     * 
     * @return ListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success response </td><td>  -  </td></tr>
     </table>
     */
    public ListRequestBuilder list() throws IllegalArgumentException {
        return new ListRequestBuilder();
    }
    private okhttp3.Call listTopicsCall(String slug, Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/c/{slug}/{id}.json"
            .replace("{" + "slug" + "}", localVarApiClient.escapeString(slug.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listTopicsValidateBeforeCall(String slug, Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'slug' is set
        if (slug == null) {
            throw new ApiException("Missing the required parameter 'slug' when calling listTopics(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling listTopics(Async)");
        }

        return listTopicsCall(slug, id, _callback);

    }


    private ApiResponse<CategoriesListTopicsResponse> listTopicsWithHttpInfo(String slug, Integer id) throws ApiException {
        okhttp3.Call localVarCall = listTopicsValidateBeforeCall(slug, id, null);
        Type localVarReturnType = new TypeToken<CategoriesListTopicsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listTopicsAsync(String slug, Integer id, final ApiCallback<CategoriesListTopicsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listTopicsValidateBeforeCall(slug, id, _callback);
        Type localVarReturnType = new TypeToken<CategoriesListTopicsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListTopicsRequestBuilder {
        private final String slug;
        private final Integer id;

        private ListTopicsRequestBuilder(String slug, Integer id) {
            this.slug = slug;
            this.id = id;
        }

        /**
         * Build call for listTopics
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> success response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listTopicsCall(slug, id, _callback);
        }


        /**
         * Execute listTopics request
         * @return CategoriesListTopicsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> success response </td><td>  -  </td></tr>
         </table>
         */
        public CategoriesListTopicsResponse execute() throws ApiException {
            ApiResponse<CategoriesListTopicsResponse> localVarResp = listTopicsWithHttpInfo(slug, id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listTopics request with HTTP info returned
         * @return ApiResponse&lt;CategoriesListTopicsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> success response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CategoriesListTopicsResponse> executeWithHttpInfo() throws ApiException {
            return listTopicsWithHttpInfo(slug, id);
        }

        /**
         * Execute listTopics request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> success response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CategoriesListTopicsResponse> _callback) throws ApiException {
            return listTopicsAsync(slug, id, _callback);
        }
    }

    /**
     * List topics
     * 
     * @param slug  (required)
     * @param id  (required)
     * @return ListTopicsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success response </td><td>  -  </td></tr>
     </table>
     */
    public ListTopicsRequestBuilder listTopics(String slug, Integer id) throws IllegalArgumentException {
        if (slug == null) throw new IllegalArgumentException("\"slug\" is required but got null");
            

        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        return new ListTopicsRequestBuilder(slug, id);
    }
    private okhttp3.Call updateCategoryByIdJsonCall(Integer id, CategoriesUpdateCategoryByIdJsonRequest categoriesUpdateCategoryByIdJsonRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = categoriesUpdateCategoryByIdJsonRequest;

        // create path and map variables
        String localVarPath = "/categories/{id}.json"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateCategoryByIdJsonValidateBeforeCall(Integer id, CategoriesUpdateCategoryByIdJsonRequest categoriesUpdateCategoryByIdJsonRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateCategoryByIdJson(Async)");
        }

        return updateCategoryByIdJsonCall(id, categoriesUpdateCategoryByIdJsonRequest, _callback);

    }


    private ApiResponse<CategoriesUpdateCategoryByIdJsonResponse> updateCategoryByIdJsonWithHttpInfo(Integer id, CategoriesUpdateCategoryByIdJsonRequest categoriesUpdateCategoryByIdJsonRequest) throws ApiException {
        okhttp3.Call localVarCall = updateCategoryByIdJsonValidateBeforeCall(id, categoriesUpdateCategoryByIdJsonRequest, null);
        Type localVarReturnType = new TypeToken<CategoriesUpdateCategoryByIdJsonResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateCategoryByIdJsonAsync(Integer id, CategoriesUpdateCategoryByIdJsonRequest categoriesUpdateCategoryByIdJsonRequest, final ApiCallback<CategoriesUpdateCategoryByIdJsonResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateCategoryByIdJsonValidateBeforeCall(id, categoriesUpdateCategoryByIdJsonRequest, _callback);
        Type localVarReturnType = new TypeToken<CategoriesUpdateCategoryByIdJsonResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateCategoryByIdJsonRequestBuilder {
        private final String name;
        private final Integer id;
        private String color;
        private String textColor;
        private Integer parentCategoryId;
        private Boolean allowBadges;
        private String slug;
        private Boolean topicFeaturedLinksAllowed;
        private CategoriesUpdateCategoryByIdJsonRequestPermissions permissions;
        private Integer searchPriority;
        private List<Object> formTemplateIds;

        private UpdateCategoryByIdJsonRequestBuilder(String name, Integer id) {
            this.name = name;
            this.id = id;
        }

        /**
         * Set color
         * @param color  (optional)
         * @return UpdateCategoryByIdJsonRequestBuilder
         */
        public UpdateCategoryByIdJsonRequestBuilder color(String color) {
            this.color = color;
            return this;
        }
        
        /**
         * Set textColor
         * @param textColor  (optional)
         * @return UpdateCategoryByIdJsonRequestBuilder
         */
        public UpdateCategoryByIdJsonRequestBuilder textColor(String textColor) {
            this.textColor = textColor;
            return this;
        }
        
        /**
         * Set parentCategoryId
         * @param parentCategoryId  (optional)
         * @return UpdateCategoryByIdJsonRequestBuilder
         */
        public UpdateCategoryByIdJsonRequestBuilder parentCategoryId(Integer parentCategoryId) {
            this.parentCategoryId = parentCategoryId;
            return this;
        }
        
        /**
         * Set allowBadges
         * @param allowBadges  (optional)
         * @return UpdateCategoryByIdJsonRequestBuilder
         */
        public UpdateCategoryByIdJsonRequestBuilder allowBadges(Boolean allowBadges) {
            this.allowBadges = allowBadges;
            return this;
        }
        
        /**
         * Set slug
         * @param slug  (optional)
         * @return UpdateCategoryByIdJsonRequestBuilder
         */
        public UpdateCategoryByIdJsonRequestBuilder slug(String slug) {
            this.slug = slug;
            return this;
        }
        
        /**
         * Set topicFeaturedLinksAllowed
         * @param topicFeaturedLinksAllowed  (optional)
         * @return UpdateCategoryByIdJsonRequestBuilder
         */
        public UpdateCategoryByIdJsonRequestBuilder topicFeaturedLinksAllowed(Boolean topicFeaturedLinksAllowed) {
            this.topicFeaturedLinksAllowed = topicFeaturedLinksAllowed;
            return this;
        }
        
        /**
         * Set permissions
         * @param permissions  (optional)
         * @return UpdateCategoryByIdJsonRequestBuilder
         */
        public UpdateCategoryByIdJsonRequestBuilder permissions(CategoriesUpdateCategoryByIdJsonRequestPermissions permissions) {
            this.permissions = permissions;
            return this;
        }
        
        /**
         * Set searchPriority
         * @param searchPriority  (optional)
         * @return UpdateCategoryByIdJsonRequestBuilder
         */
        public UpdateCategoryByIdJsonRequestBuilder searchPriority(Integer searchPriority) {
            this.searchPriority = searchPriority;
            return this;
        }
        
        /**
         * Set formTemplateIds
         * @param formTemplateIds  (optional)
         * @return UpdateCategoryByIdJsonRequestBuilder
         */
        public UpdateCategoryByIdJsonRequestBuilder formTemplateIds(List<Object> formTemplateIds) {
            this.formTemplateIds = formTemplateIds;
            return this;
        }
        
        /**
         * Build call for updateCategoryByIdJson
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> success response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CategoriesUpdateCategoryByIdJsonRequest categoriesUpdateCategoryByIdJsonRequest = buildBodyParams();
            return updateCategoryByIdJsonCall(id, categoriesUpdateCategoryByIdJsonRequest, _callback);
        }

        private CategoriesUpdateCategoryByIdJsonRequest buildBodyParams() {
            CategoriesUpdateCategoryByIdJsonRequest categoriesUpdateCategoryByIdJsonRequest = new CategoriesUpdateCategoryByIdJsonRequest();
            categoriesUpdateCategoryByIdJsonRequest.name(this.name);
            categoriesUpdateCategoryByIdJsonRequest.color(this.color);
            categoriesUpdateCategoryByIdJsonRequest.textColor(this.textColor);
            categoriesUpdateCategoryByIdJsonRequest.parentCategoryId(this.parentCategoryId);
            categoriesUpdateCategoryByIdJsonRequest.allowBadges(this.allowBadges);
            categoriesUpdateCategoryByIdJsonRequest.slug(this.slug);
            categoriesUpdateCategoryByIdJsonRequest.topicFeaturedLinksAllowed(this.topicFeaturedLinksAllowed);
            categoriesUpdateCategoryByIdJsonRequest.permissions(this.permissions);
            categoriesUpdateCategoryByIdJsonRequest.searchPriority(this.searchPriority);
            categoriesUpdateCategoryByIdJsonRequest.formTemplateIds(this.formTemplateIds);
            return categoriesUpdateCategoryByIdJsonRequest;
        }

        /**
         * Execute updateCategoryByIdJson request
         * @return CategoriesUpdateCategoryByIdJsonResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> success response </td><td>  -  </td></tr>
         </table>
         */
        public CategoriesUpdateCategoryByIdJsonResponse execute() throws ApiException {
            CategoriesUpdateCategoryByIdJsonRequest categoriesUpdateCategoryByIdJsonRequest = buildBodyParams();
            ApiResponse<CategoriesUpdateCategoryByIdJsonResponse> localVarResp = updateCategoryByIdJsonWithHttpInfo(id, categoriesUpdateCategoryByIdJsonRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateCategoryByIdJson request with HTTP info returned
         * @return ApiResponse&lt;CategoriesUpdateCategoryByIdJsonResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> success response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CategoriesUpdateCategoryByIdJsonResponse> executeWithHttpInfo() throws ApiException {
            CategoriesUpdateCategoryByIdJsonRequest categoriesUpdateCategoryByIdJsonRequest = buildBodyParams();
            return updateCategoryByIdJsonWithHttpInfo(id, categoriesUpdateCategoryByIdJsonRequest);
        }

        /**
         * Execute updateCategoryByIdJson request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> success response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CategoriesUpdateCategoryByIdJsonResponse> _callback) throws ApiException {
            CategoriesUpdateCategoryByIdJsonRequest categoriesUpdateCategoryByIdJsonRequest = buildBodyParams();
            return updateCategoryByIdJsonAsync(id, categoriesUpdateCategoryByIdJsonRequest, _callback);
        }
    }

    /**
     * Updates a category
     * 
     * @param id  (required)
     * @return UpdateCategoryByIdJsonRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success response </td><td>  -  </td></tr>
     </table>
     */
    public UpdateCategoryByIdJsonRequestBuilder updateCategoryByIdJson(String name, Integer id) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        return new UpdateCategoryByIdJsonRequestBuilder(name, id);
    }
}
