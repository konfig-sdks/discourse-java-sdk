/*
 * Discourse API Documentation
 * This page contains the documentation on how to use Discourse through API calls.  > Note: For any endpoints not listed you can follow the [reverse engineer the Discourse API](https://meta.discourse.org/t/-/20576) guide to figure out how to use an API endpoint.  ### Request Content-Type  The Content-Type for POST and PUT requests can be set to `application/x-www-form-urlencoded`, `multipart/form-data`, or `application/json`.  ### Endpoint Names and Response Content-Type  Most API endpoints provide the same content as their HTML counterparts. For example the URL `/categories` serves a list of categories, the `/categories.json` API provides the same information in JSON format.  Instead of sending API requests to `/categories.json` you may also send them to `/categories` and add an `Accept: application/json` header to the request to get the JSON response. Sending requests with the `Accept` header is necessary if you want to use URLs for related endpoints returned by the API, such as pagination URLs. These URLs are returned without the `.json` prefix so you need to add the header in order to get the correct response format.  ### Authentication  Some endpoints do not require any authentication, pretty much anything else will require you to be authenticated.  To become authenticated you will need to create an API Key from the admin panel.  Once you have your API Key you can pass it in along with your API Username as an HTTP header like this:  ``` curl -X GET \"http://127.0.0.1:3000/admin/users/list/active.json\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" ```  and this is how POST requests will look:  ``` curl -X POST \"http://127.0.0.1:3000/categories\" \\ -H \"Content-Type: multipart/form-data;\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" \\ -F \"name=89853c20-4409-e91a-a8ea-f6cdff96aaaa\" \\ -F \"color=49d9e9\" \\ -F \"text_color=f0fcfd\" ```  ### Boolean values  If an endpoint accepts a boolean be sure to specify it as a lowercase `true` or `false` value unless noted otherwise. 
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.BadgesCreateBadgeRequest;
import com.konfigthis.client.model.BadgesCreateBadgeResponse;
import com.konfigthis.client.model.BadgesListResponse;
import com.konfigthis.client.model.BadgesListUserBadgesResponse;
import com.konfigthis.client.model.BadgesUpdateBadgeByIdJsonRequest;
import com.konfigthis.client.model.BadgesUpdateBadgeByIdJsonResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class BadgesApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public BadgesApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public BadgesApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createBadgeCall(BadgesCreateBadgeRequest badgesCreateBadgeRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = badgesCreateBadgeRequest;

        // create path and map variables
        String localVarPath = "/admin/badges.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createBadgeValidateBeforeCall(BadgesCreateBadgeRequest badgesCreateBadgeRequest, final ApiCallback _callback) throws ApiException {
        return createBadgeCall(badgesCreateBadgeRequest, _callback);

    }


    private ApiResponse<BadgesCreateBadgeResponse> createBadgeWithHttpInfo(BadgesCreateBadgeRequest badgesCreateBadgeRequest) throws ApiException {
        okhttp3.Call localVarCall = createBadgeValidateBeforeCall(badgesCreateBadgeRequest, null);
        Type localVarReturnType = new TypeToken<BadgesCreateBadgeResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createBadgeAsync(BadgesCreateBadgeRequest badgesCreateBadgeRequest, final ApiCallback<BadgesCreateBadgeResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createBadgeValidateBeforeCall(badgesCreateBadgeRequest, _callback);
        Type localVarReturnType = new TypeToken<BadgesCreateBadgeResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateBadgeRequestBuilder {
        private final String name;
        private final Integer badgeTypeId;

        private CreateBadgeRequestBuilder(String name, Integer badgeTypeId) {
            this.name = name;
            this.badgeTypeId = badgeTypeId;
        }

        /**
         * Build call for createBadge
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> success response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            BadgesCreateBadgeRequest badgesCreateBadgeRequest = buildBodyParams();
            return createBadgeCall(badgesCreateBadgeRequest, _callback);
        }

        private BadgesCreateBadgeRequest buildBodyParams() {
            BadgesCreateBadgeRequest badgesCreateBadgeRequest = new BadgesCreateBadgeRequest();
            badgesCreateBadgeRequest.name(this.name);
            badgesCreateBadgeRequest.badgeTypeId(this.badgeTypeId);
            return badgesCreateBadgeRequest;
        }

        /**
         * Execute createBadge request
         * @return BadgesCreateBadgeResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> success response </td><td>  -  </td></tr>
         </table>
         */
        public BadgesCreateBadgeResponse execute() throws ApiException {
            BadgesCreateBadgeRequest badgesCreateBadgeRequest = buildBodyParams();
            ApiResponse<BadgesCreateBadgeResponse> localVarResp = createBadgeWithHttpInfo(badgesCreateBadgeRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createBadge request with HTTP info returned
         * @return ApiResponse&lt;BadgesCreateBadgeResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> success response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<BadgesCreateBadgeResponse> executeWithHttpInfo() throws ApiException {
            BadgesCreateBadgeRequest badgesCreateBadgeRequest = buildBodyParams();
            return createBadgeWithHttpInfo(badgesCreateBadgeRequest);
        }

        /**
         * Execute createBadge request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> success response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<BadgesCreateBadgeResponse> _callback) throws ApiException {
            BadgesCreateBadgeRequest badgesCreateBadgeRequest = buildBodyParams();
            return createBadgeAsync(badgesCreateBadgeRequest, _callback);
        }
    }

    /**
     * Create badge
     * 
     * @return CreateBadgeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success response </td><td>  -  </td></tr>
     </table>
     */
    public CreateBadgeRequestBuilder createBadge(String name, Integer badgeTypeId) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        if (badgeTypeId == null) throw new IllegalArgumentException("\"badgeTypeId\" is required but got null");
        return new CreateBadgeRequestBuilder(name, badgeTypeId);
    }
    private okhttp3.Call deleteByIdJsonCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/badges/{id}.json"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteByIdJsonValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteByIdJson(Async)");
        }

        return deleteByIdJsonCall(id, _callback);

    }


    private ApiResponse<Void> deleteByIdJsonWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = deleteByIdJsonValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteByIdJsonAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteByIdJsonValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteByIdJsonRequestBuilder {
        private final Integer id;

        private DeleteByIdJsonRequestBuilder(Integer id) {
            this.id = id;
        }

        /**
         * Build call for deleteByIdJson
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> success response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteByIdJsonCall(id, _callback);
        }


        /**
         * Execute deleteByIdJson request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> success response </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteByIdJsonWithHttpInfo(id);
        }

        /**
         * Execute deleteByIdJson request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> success response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteByIdJsonWithHttpInfo(id);
        }

        /**
         * Execute deleteByIdJson request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> success response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteByIdJsonAsync(id, _callback);
        }
    }

    /**
     * Delete badge
     * 
     * @param id  (required)
     * @return DeleteByIdJsonRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success response </td><td>  -  </td></tr>
     </table>
     */
    public DeleteByIdJsonRequestBuilder deleteByIdJson(Integer id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        return new DeleteByIdJsonRequestBuilder(id);
    }
    private okhttp3.Call listCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin/badges.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return listCall(_callback);

    }


    private ApiResponse<BadgesListResponse> listWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = listValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<BadgesListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAsync(final ApiCallback<BadgesListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<BadgesListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListRequestBuilder {

        private ListRequestBuilder() {
        }

        /**
         * Build call for list
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> success response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listCall(_callback);
        }


        /**
         * Execute list request
         * @return BadgesListResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> success response </td><td>  -  </td></tr>
         </table>
         */
        public BadgesListResponse execute() throws ApiException {
            ApiResponse<BadgesListResponse> localVarResp = listWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute list request with HTTP info returned
         * @return ApiResponse&lt;BadgesListResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> success response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<BadgesListResponse> executeWithHttpInfo() throws ApiException {
            return listWithHttpInfo();
        }

        /**
         * Execute list request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> success response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<BadgesListResponse> _callback) throws ApiException {
            return listAsync(_callback);
        }
    }

    /**
     * List badges
     * 
     * @return ListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success response </td><td>  -  </td></tr>
     </table>
     */
    public ListRequestBuilder list() throws IllegalArgumentException {
        return new ListRequestBuilder();
    }
    private okhttp3.Call listUserBadgesCall(String username, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user-badges/{username}.json"
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listUserBadgesValidateBeforeCall(String username, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling listUserBadges(Async)");
        }

        return listUserBadgesCall(username, _callback);

    }


    private ApiResponse<BadgesListUserBadgesResponse> listUserBadgesWithHttpInfo(String username) throws ApiException {
        okhttp3.Call localVarCall = listUserBadgesValidateBeforeCall(username, null);
        Type localVarReturnType = new TypeToken<BadgesListUserBadgesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listUserBadgesAsync(String username, final ApiCallback<BadgesListUserBadgesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listUserBadgesValidateBeforeCall(username, _callback);
        Type localVarReturnType = new TypeToken<BadgesListUserBadgesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListUserBadgesRequestBuilder {
        private final String username;

        private ListUserBadgesRequestBuilder(String username) {
            this.username = username;
        }

        /**
         * Build call for listUserBadges
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> success response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listUserBadgesCall(username, _callback);
        }


        /**
         * Execute listUserBadges request
         * @return BadgesListUserBadgesResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> success response </td><td>  -  </td></tr>
         </table>
         */
        public BadgesListUserBadgesResponse execute() throws ApiException {
            ApiResponse<BadgesListUserBadgesResponse> localVarResp = listUserBadgesWithHttpInfo(username);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listUserBadges request with HTTP info returned
         * @return ApiResponse&lt;BadgesListUserBadgesResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> success response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<BadgesListUserBadgesResponse> executeWithHttpInfo() throws ApiException {
            return listUserBadgesWithHttpInfo(username);
        }

        /**
         * Execute listUserBadges request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> success response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<BadgesListUserBadgesResponse> _callback) throws ApiException {
            return listUserBadgesAsync(username, _callback);
        }
    }

    /**
     * List badges for a user
     * 
     * @param username  (required)
     * @return ListUserBadgesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success response </td><td>  -  </td></tr>
     </table>
     */
    public ListUserBadgesRequestBuilder listUserBadges(String username) throws IllegalArgumentException {
        if (username == null) throw new IllegalArgumentException("\"username\" is required but got null");
            

        return new ListUserBadgesRequestBuilder(username);
    }
    private okhttp3.Call updateBadgeByIdJsonCall(Integer id, BadgesUpdateBadgeByIdJsonRequest badgesUpdateBadgeByIdJsonRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = badgesUpdateBadgeByIdJsonRequest;

        // create path and map variables
        String localVarPath = "/admin/badges/{id}.json"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateBadgeByIdJsonValidateBeforeCall(Integer id, BadgesUpdateBadgeByIdJsonRequest badgesUpdateBadgeByIdJsonRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateBadgeByIdJson(Async)");
        }

        return updateBadgeByIdJsonCall(id, badgesUpdateBadgeByIdJsonRequest, _callback);

    }


    private ApiResponse<BadgesUpdateBadgeByIdJsonResponse> updateBadgeByIdJsonWithHttpInfo(Integer id, BadgesUpdateBadgeByIdJsonRequest badgesUpdateBadgeByIdJsonRequest) throws ApiException {
        okhttp3.Call localVarCall = updateBadgeByIdJsonValidateBeforeCall(id, badgesUpdateBadgeByIdJsonRequest, null);
        Type localVarReturnType = new TypeToken<BadgesUpdateBadgeByIdJsonResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateBadgeByIdJsonAsync(Integer id, BadgesUpdateBadgeByIdJsonRequest badgesUpdateBadgeByIdJsonRequest, final ApiCallback<BadgesUpdateBadgeByIdJsonResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateBadgeByIdJsonValidateBeforeCall(id, badgesUpdateBadgeByIdJsonRequest, _callback);
        Type localVarReturnType = new TypeToken<BadgesUpdateBadgeByIdJsonResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateBadgeByIdJsonRequestBuilder {
        private final String name;
        private final Integer badgeTypeId;
        private final Integer id;

        private UpdateBadgeByIdJsonRequestBuilder(String name, Integer badgeTypeId, Integer id) {
            this.name = name;
            this.badgeTypeId = badgeTypeId;
            this.id = id;
        }

        /**
         * Build call for updateBadgeByIdJson
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> success response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            BadgesUpdateBadgeByIdJsonRequest badgesUpdateBadgeByIdJsonRequest = buildBodyParams();
            return updateBadgeByIdJsonCall(id, badgesUpdateBadgeByIdJsonRequest, _callback);
        }

        private BadgesUpdateBadgeByIdJsonRequest buildBodyParams() {
            BadgesUpdateBadgeByIdJsonRequest badgesUpdateBadgeByIdJsonRequest = new BadgesUpdateBadgeByIdJsonRequest();
            badgesUpdateBadgeByIdJsonRequest.name(this.name);
            badgesUpdateBadgeByIdJsonRequest.badgeTypeId(this.badgeTypeId);
            return badgesUpdateBadgeByIdJsonRequest;
        }

        /**
         * Execute updateBadgeByIdJson request
         * @return BadgesUpdateBadgeByIdJsonResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> success response </td><td>  -  </td></tr>
         </table>
         */
        public BadgesUpdateBadgeByIdJsonResponse execute() throws ApiException {
            BadgesUpdateBadgeByIdJsonRequest badgesUpdateBadgeByIdJsonRequest = buildBodyParams();
            ApiResponse<BadgesUpdateBadgeByIdJsonResponse> localVarResp = updateBadgeByIdJsonWithHttpInfo(id, badgesUpdateBadgeByIdJsonRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateBadgeByIdJson request with HTTP info returned
         * @return ApiResponse&lt;BadgesUpdateBadgeByIdJsonResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> success response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<BadgesUpdateBadgeByIdJsonResponse> executeWithHttpInfo() throws ApiException {
            BadgesUpdateBadgeByIdJsonRequest badgesUpdateBadgeByIdJsonRequest = buildBodyParams();
            return updateBadgeByIdJsonWithHttpInfo(id, badgesUpdateBadgeByIdJsonRequest);
        }

        /**
         * Execute updateBadgeByIdJson request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> success response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<BadgesUpdateBadgeByIdJsonResponse> _callback) throws ApiException {
            BadgesUpdateBadgeByIdJsonRequest badgesUpdateBadgeByIdJsonRequest = buildBodyParams();
            return updateBadgeByIdJsonAsync(id, badgesUpdateBadgeByIdJsonRequest, _callback);
        }
    }

    /**
     * Update badge
     * 
     * @param id  (required)
     * @return UpdateBadgeByIdJsonRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success response </td><td>  -  </td></tr>
     </table>
     */
    public UpdateBadgeByIdJsonRequestBuilder updateBadgeByIdJson(String name, Integer badgeTypeId, Integer id) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        if (badgeTypeId == null) throw new IllegalArgumentException("\"badgeTypeId\" is required but got null");
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
        return new UpdateBadgeByIdJsonRequestBuilder(name, badgeTypeId, id);
    }
}
