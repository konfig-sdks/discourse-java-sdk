/*
 * Discourse API Documentation
 * This page contains the documentation on how to use Discourse through API calls.  > Note: For any endpoints not listed you can follow the [reverse engineer the Discourse API](https://meta.discourse.org/t/-/20576) guide to figure out how to use an API endpoint.  ### Request Content-Type  The Content-Type for POST and PUT requests can be set to `application/x-www-form-urlencoded`, `multipart/form-data`, or `application/json`.  ### Endpoint Names and Response Content-Type  Most API endpoints provide the same content as their HTML counterparts. For example the URL `/categories` serves a list of categories, the `/categories.json` API provides the same information in JSON format.  Instead of sending API requests to `/categories.json` you may also send them to `/categories` and add an `Accept: application/json` header to the request to get the JSON response. Sending requests with the `Accept` header is necessary if you want to use URLs for related endpoints returned by the API, such as pagination URLs. These URLs are returned without the `.json` prefix so you need to add the header in order to get the correct response format.  ### Authentication  Some endpoints do not require any authentication, pretty much anything else will require you to be authenticated.  To become authenticated you will need to create an API Key from the admin panel.  Once you have your API Key you can pass it in along with your API Username as an HTTP header like this:  ``` curl -X GET \"http://127.0.0.1:3000/admin/users/list/active.json\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" ```  and this is how POST requests will look:  ``` curl -X POST \"http://127.0.0.1:3000/categories\" \\ -H \"Content-Type: multipart/form-data;\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" \\ -F \"name=89853c20-4409-e91a-a8ea-f6cdff96aaaa\" \\ -F \"color=49d9e9\" \\ -F \"text_color=f0fcfd\" ```  ### Boolean values  If an endpoint accepts a boolean be sure to specify it as a lowercase `true` or `false` value unless noted otherwise. 
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.PostsCreateTopicPostMessageRequest;
import com.konfigthis.client.model.PostsCreateTopicPostMessageResponse;
import com.konfigthis.client.model.TopicsCreateTopicTimerRequest;
import com.konfigthis.client.model.TopicsCreateTopicTimerResponse;
import com.konfigthis.client.model.TopicsGetLatestTopicsResponse;
import com.konfigthis.client.model.TopicsGetSingleTopicResponse;
import com.konfigthis.client.model.TopicsGetSpecificPostsRequest;
import com.konfigthis.client.model.TopicsGetSpecificPostsResponse;
import com.konfigthis.client.model.TopicsGetTopTopicsByPeriodResponse;
import com.konfigthis.client.model.TopicsSendInviteToTopicRequest;
import com.konfigthis.client.model.TopicsSendInviteToTopicResponse;
import com.konfigthis.client.model.TopicsSetNotificationLevelRequest;
import com.konfigthis.client.model.TopicsSetNotificationLevelResponse;
import com.konfigthis.client.model.TopicsUpdateStatusOfTopicRequest;
import com.konfigthis.client.model.TopicsUpdateStatusOfTopicResponse;
import com.konfigthis.client.model.TopicsUpdateTimestampJsonRequest;
import com.konfigthis.client.model.TopicsUpdateTimestampJsonResponse;
import com.konfigthis.client.model.TopicsUpdateTopicByIdJsonRequest;
import com.konfigthis.client.model.TopicsUpdateTopicByIdJsonRequestTopic;
import com.konfigthis.client.model.TopicsUpdateTopicByIdJsonResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class TopicsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TopicsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public TopicsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createTopicPostMessageCall(PostsCreateTopicPostMessageRequest postsCreateTopicPostMessageRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = postsCreateTopicPostMessageRequest;

        // create path and map variables
        String localVarPath = "/posts.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createTopicPostMessageValidateBeforeCall(PostsCreateTopicPostMessageRequest postsCreateTopicPostMessageRequest, final ApiCallback _callback) throws ApiException {
        return createTopicPostMessageCall(postsCreateTopicPostMessageRequest, _callback);

    }


    private ApiResponse<PostsCreateTopicPostMessageResponse> createTopicPostMessageWithHttpInfo(PostsCreateTopicPostMessageRequest postsCreateTopicPostMessageRequest) throws ApiException {
        okhttp3.Call localVarCall = createTopicPostMessageValidateBeforeCall(postsCreateTopicPostMessageRequest, null);
        Type localVarReturnType = new TypeToken<PostsCreateTopicPostMessageResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createTopicPostMessageAsync(PostsCreateTopicPostMessageRequest postsCreateTopicPostMessageRequest, final ApiCallback<PostsCreateTopicPostMessageResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createTopicPostMessageValidateBeforeCall(postsCreateTopicPostMessageRequest, _callback);
        Type localVarReturnType = new TypeToken<PostsCreateTopicPostMessageResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateTopicPostMessageRequestBuilder {
        private final String raw;
        private String title;
        private Integer topicId;
        private Integer category;
        private String targetRecipients;
        private String targetUsernames;
        private String archetype;
        private String createdAt;
        private Integer replyToPostNumber;
        private String embedUrl;
        private String externalId;

        private CreateTopicPostMessageRequestBuilder(String raw) {
            this.raw = raw;
        }

        /**
         * Set title
         * @param title Required if creating a new topic or new private message. (optional)
         * @return CreateTopicPostMessageRequestBuilder
         */
        public CreateTopicPostMessageRequestBuilder title(String title) {
            this.title = title;
            return this;
        }
        
        /**
         * Set topicId
         * @param topicId Required if creating a new post. (optional)
         * @return CreateTopicPostMessageRequestBuilder
         */
        public CreateTopicPostMessageRequestBuilder topicId(Integer topicId) {
            this.topicId = topicId;
            return this;
        }
        
        /**
         * Set category
         * @param category Optional if creating a new topic, and ignored if creating a new post. (optional)
         * @return CreateTopicPostMessageRequestBuilder
         */
        public CreateTopicPostMessageRequestBuilder category(Integer category) {
            this.category = category;
            return this;
        }
        
        /**
         * Set targetRecipients
         * @param targetRecipients Required for private message, comma separated. (optional)
         * @return CreateTopicPostMessageRequestBuilder
         */
        public CreateTopicPostMessageRequestBuilder targetRecipients(String targetRecipients) {
            this.targetRecipients = targetRecipients;
            return this;
        }
        
        /**
         * Set targetUsernames
         * @param targetUsernames Deprecated. Use target_recipients instead. (optional)
         * @return CreateTopicPostMessageRequestBuilder
         */
        public CreateTopicPostMessageRequestBuilder targetUsernames(String targetUsernames) {
            this.targetUsernames = targetUsernames;
            return this;
        }
        
        /**
         * Set archetype
         * @param archetype Required for new private message. (optional)
         * @return CreateTopicPostMessageRequestBuilder
         */
        public CreateTopicPostMessageRequestBuilder archetype(String archetype) {
            this.archetype = archetype;
            return this;
        }
        
        /**
         * Set createdAt
         * @param createdAt  (optional)
         * @return CreateTopicPostMessageRequestBuilder
         */
        public CreateTopicPostMessageRequestBuilder createdAt(String createdAt) {
            this.createdAt = createdAt;
            return this;
        }
        
        /**
         * Set replyToPostNumber
         * @param replyToPostNumber Optional, the post number to reply to inside a topic. (optional)
         * @return CreateTopicPostMessageRequestBuilder
         */
        public CreateTopicPostMessageRequestBuilder replyToPostNumber(Integer replyToPostNumber) {
            this.replyToPostNumber = replyToPostNumber;
            return this;
        }
        
        /**
         * Set embedUrl
         * @param embedUrl Provide a URL from a remote system to associate a forum topic with that URL, typically for using Discourse as a comments system for an external blog. (optional)
         * @return CreateTopicPostMessageRequestBuilder
         */
        public CreateTopicPostMessageRequestBuilder embedUrl(String embedUrl) {
            this.embedUrl = embedUrl;
            return this;
        }
        
        /**
         * Set externalId
         * @param externalId Provide an external_id from a remote system to associate a forum topic with that id. (optional)
         * @return CreateTopicPostMessageRequestBuilder
         */
        public CreateTopicPostMessageRequestBuilder externalId(String externalId) {
            this.externalId = externalId;
            return this;
        }
        
        /**
         * Build call for createTopicPostMessage
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> post created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PostsCreateTopicPostMessageRequest postsCreateTopicPostMessageRequest = buildBodyParams();
            return createTopicPostMessageCall(postsCreateTopicPostMessageRequest, _callback);
        }

        private PostsCreateTopicPostMessageRequest buildBodyParams() {
            PostsCreateTopicPostMessageRequest postsCreateTopicPostMessageRequest = new PostsCreateTopicPostMessageRequest();
            postsCreateTopicPostMessageRequest.title(this.title);
            postsCreateTopicPostMessageRequest.raw(this.raw);
            postsCreateTopicPostMessageRequest.topicId(this.topicId);
            postsCreateTopicPostMessageRequest.category(this.category);
            postsCreateTopicPostMessageRequest.targetRecipients(this.targetRecipients);
            postsCreateTopicPostMessageRequest.targetUsernames(this.targetUsernames);
            postsCreateTopicPostMessageRequest.archetype(this.archetype);
            postsCreateTopicPostMessageRequest.createdAt(this.createdAt);
            postsCreateTopicPostMessageRequest.replyToPostNumber(this.replyToPostNumber);
            postsCreateTopicPostMessageRequest.embedUrl(this.embedUrl);
            postsCreateTopicPostMessageRequest.externalId(this.externalId);
            return postsCreateTopicPostMessageRequest;
        }

        /**
         * Execute createTopicPostMessage request
         * @return PostsCreateTopicPostMessageResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> post created </td><td>  -  </td></tr>
         </table>
         */
        public PostsCreateTopicPostMessageResponse execute() throws ApiException {
            PostsCreateTopicPostMessageRequest postsCreateTopicPostMessageRequest = buildBodyParams();
            ApiResponse<PostsCreateTopicPostMessageResponse> localVarResp = createTopicPostMessageWithHttpInfo(postsCreateTopicPostMessageRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createTopicPostMessage request with HTTP info returned
         * @return ApiResponse&lt;PostsCreateTopicPostMessageResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> post created </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PostsCreateTopicPostMessageResponse> executeWithHttpInfo() throws ApiException {
            PostsCreateTopicPostMessageRequest postsCreateTopicPostMessageRequest = buildBodyParams();
            return createTopicPostMessageWithHttpInfo(postsCreateTopicPostMessageRequest);
        }

        /**
         * Execute createTopicPostMessage request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> post created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PostsCreateTopicPostMessageResponse> _callback) throws ApiException {
            PostsCreateTopicPostMessageRequest postsCreateTopicPostMessageRequest = buildBodyParams();
            return createTopicPostMessageAsync(postsCreateTopicPostMessageRequest, _callback);
        }
    }

    /**
     * Creates a new topic, a new post, or a private message
     * 
     * @return CreateTopicPostMessageRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> post created </td><td>  -  </td></tr>
     </table>
     */
    public CreateTopicPostMessageRequestBuilder createTopicPostMessage(String raw) throws IllegalArgumentException {
        if (raw == null) throw new IllegalArgumentException("\"raw\" is required but got null");
            

        return new CreateTopicPostMessageRequestBuilder(raw);
    }
    private okhttp3.Call createTopicTimerCall(String apiKey, String apiUsername, String id, TopicsCreateTopicTimerRequest topicsCreateTopicTimerRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = topicsCreateTopicTimerRequest;

        // create path and map variables
        String localVarPath = "/t/{id}/timer.json"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarHeaderParams.put("Api-Key", localVarApiClient.parameterToString(apiKey));
        }

        if (apiUsername != null) {
            localVarHeaderParams.put("Api-Username", localVarApiClient.parameterToString(apiUsername));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createTopicTimerValidateBeforeCall(String apiKey, String apiUsername, String id, TopicsCreateTopicTimerRequest topicsCreateTopicTimerRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling createTopicTimer(Async)");
        }

        // verify the required parameter 'apiUsername' is set
        if (apiUsername == null) {
            throw new ApiException("Missing the required parameter 'apiUsername' when calling createTopicTimer(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling createTopicTimer(Async)");
        }

        return createTopicTimerCall(apiKey, apiUsername, id, topicsCreateTopicTimerRequest, _callback);

    }


    private ApiResponse<TopicsCreateTopicTimerResponse> createTopicTimerWithHttpInfo(String apiKey, String apiUsername, String id, TopicsCreateTopicTimerRequest topicsCreateTopicTimerRequest) throws ApiException {
        okhttp3.Call localVarCall = createTopicTimerValidateBeforeCall(apiKey, apiUsername, id, topicsCreateTopicTimerRequest, null);
        Type localVarReturnType = new TypeToken<TopicsCreateTopicTimerResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createTopicTimerAsync(String apiKey, String apiUsername, String id, TopicsCreateTopicTimerRequest topicsCreateTopicTimerRequest, final ApiCallback<TopicsCreateTopicTimerResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createTopicTimerValidateBeforeCall(apiKey, apiUsername, id, topicsCreateTopicTimerRequest, _callback);
        Type localVarReturnType = new TypeToken<TopicsCreateTopicTimerResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateTopicTimerRequestBuilder {
        private final String apiKey;
        private final String apiUsername;
        private final String id;
        private String time;
        private String statusType;
        private Boolean basedOnLastPost;
        private Integer categoryId;

        private CreateTopicTimerRequestBuilder(String apiKey, String apiUsername, String id) {
            this.apiKey = apiKey;
            this.apiUsername = apiUsername;
            this.id = id;
        }

        /**
         * Set time
         * @param time  (optional)
         * @return CreateTopicTimerRequestBuilder
         */
        public CreateTopicTimerRequestBuilder time(String time) {
            this.time = time;
            return this;
        }
        
        /**
         * Set statusType
         * @param statusType  (optional)
         * @return CreateTopicTimerRequestBuilder
         */
        public CreateTopicTimerRequestBuilder statusType(String statusType) {
            this.statusType = statusType;
            return this;
        }
        
        /**
         * Set basedOnLastPost
         * @param basedOnLastPost  (optional)
         * @return CreateTopicTimerRequestBuilder
         */
        public CreateTopicTimerRequestBuilder basedOnLastPost(Boolean basedOnLastPost) {
            this.basedOnLastPost = basedOnLastPost;
            return this;
        }
        
        /**
         * Set categoryId
         * @param categoryId  (optional)
         * @return CreateTopicTimerRequestBuilder
         */
        public CreateTopicTimerRequestBuilder categoryId(Integer categoryId) {
            this.categoryId = categoryId;
            return this;
        }
        
        /**
         * Build call for createTopicTimer
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> topic updated </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TopicsCreateTopicTimerRequest topicsCreateTopicTimerRequest = buildBodyParams();
            return createTopicTimerCall(apiKey, apiUsername, id, topicsCreateTopicTimerRequest, _callback);
        }

        private TopicsCreateTopicTimerRequest buildBodyParams() {
            TopicsCreateTopicTimerRequest topicsCreateTopicTimerRequest = new TopicsCreateTopicTimerRequest();
            topicsCreateTopicTimerRequest.time(this.time);
            topicsCreateTopicTimerRequest.statusType(this.statusType);
            topicsCreateTopicTimerRequest.basedOnLastPost(this.basedOnLastPost);
            topicsCreateTopicTimerRequest.categoryId(this.categoryId);
            return topicsCreateTopicTimerRequest;
        }

        /**
         * Execute createTopicTimer request
         * @return TopicsCreateTopicTimerResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> topic updated </td><td>  -  </td></tr>
         </table>
         */
        public TopicsCreateTopicTimerResponse execute() throws ApiException {
            TopicsCreateTopicTimerRequest topicsCreateTopicTimerRequest = buildBodyParams();
            ApiResponse<TopicsCreateTopicTimerResponse> localVarResp = createTopicTimerWithHttpInfo(apiKey, apiUsername, id, topicsCreateTopicTimerRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createTopicTimer request with HTTP info returned
         * @return ApiResponse&lt;TopicsCreateTopicTimerResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> topic updated </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TopicsCreateTopicTimerResponse> executeWithHttpInfo() throws ApiException {
            TopicsCreateTopicTimerRequest topicsCreateTopicTimerRequest = buildBodyParams();
            return createTopicTimerWithHttpInfo(apiKey, apiUsername, id, topicsCreateTopicTimerRequest);
        }

        /**
         * Execute createTopicTimer request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> topic updated </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TopicsCreateTopicTimerResponse> _callback) throws ApiException {
            TopicsCreateTopicTimerRequest topicsCreateTopicTimerRequest = buildBodyParams();
            return createTopicTimerAsync(apiKey, apiUsername, id, topicsCreateTopicTimerRequest, _callback);
        }
    }

    /**
     * Create topic timer
     * 
     * @param apiKey  (required)
     * @param apiUsername  (required)
     * @param id  (required)
     * @return CreateTopicTimerRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> topic updated </td><td>  -  </td></tr>
     </table>
     */
    public CreateTopicTimerRequestBuilder createTopicTimer(String apiKey, String apiUsername, String id) throws IllegalArgumentException {
        if (apiKey == null) throw new IllegalArgumentException("\"apiKey\" is required but got null");
            

        if (apiUsername == null) throw new IllegalArgumentException("\"apiUsername\" is required but got null");
            

        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new CreateTopicTimerRequestBuilder(apiKey, apiUsername, id);
    }
    private okhttp3.Call getByExternalIdCall(String externalId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/t/external_id/{external_id}.json"
            .replace("{" + "external_id" + "}", localVarApiClient.escapeString(externalId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByExternalIdValidateBeforeCall(String externalId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'externalId' is set
        if (externalId == null) {
            throw new ApiException("Missing the required parameter 'externalId' when calling getByExternalId(Async)");
        }

        return getByExternalIdCall(externalId, _callback);

    }


    private ApiResponse<Void> getByExternalIdWithHttpInfo(String externalId) throws ApiException {
        okhttp3.Call localVarCall = getByExternalIdValidateBeforeCall(externalId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getByExternalIdAsync(String externalId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByExternalIdValidateBeforeCall(externalId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetByExternalIdRequestBuilder {
        private final String externalId;

        private GetByExternalIdRequestBuilder(String externalId) {
            this.externalId = externalId;
        }

        /**
         * Build call for getByExternalId
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> redirects to /t/{topic_id}.json </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByExternalIdCall(externalId, _callback);
        }


        /**
         * Execute getByExternalId request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> redirects to /t/{topic_id}.json </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getByExternalIdWithHttpInfo(externalId);
        }

        /**
         * Execute getByExternalId request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> redirects to /t/{topic_id}.json </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getByExternalIdWithHttpInfo(externalId);
        }

        /**
         * Execute getByExternalId request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> redirects to /t/{topic_id}.json </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getByExternalIdAsync(externalId, _callback);
        }
    }

    /**
     * Get topic by external_id
     * 
     * @param externalId  (required)
     * @return GetByExternalIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> redirects to /t/{topic_id}.json </td><td>  -  </td></tr>
     </table>
     */
    public GetByExternalIdRequestBuilder getByExternalId(String externalId) throws IllegalArgumentException {
        if (externalId == null) throw new IllegalArgumentException("\"externalId\" is required but got null");
            

        return new GetByExternalIdRequestBuilder(externalId);
    }
    private okhttp3.Call getLatestTopicsCall(String apiKey, String apiUsername, String order, String ascending, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/latest.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        if (ascending != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ascending", ascending));
        }

        if (apiKey != null) {
            localVarHeaderParams.put("Api-Key", localVarApiClient.parameterToString(apiKey));
        }

        if (apiUsername != null) {
            localVarHeaderParams.put("Api-Username", localVarApiClient.parameterToString(apiUsername));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLatestTopicsValidateBeforeCall(String apiKey, String apiUsername, String order, String ascending, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling getLatestTopics(Async)");
        }

        // verify the required parameter 'apiUsername' is set
        if (apiUsername == null) {
            throw new ApiException("Missing the required parameter 'apiUsername' when calling getLatestTopics(Async)");
        }

        return getLatestTopicsCall(apiKey, apiUsername, order, ascending, _callback);

    }


    private ApiResponse<TopicsGetLatestTopicsResponse> getLatestTopicsWithHttpInfo(String apiKey, String apiUsername, String order, String ascending) throws ApiException {
        okhttp3.Call localVarCall = getLatestTopicsValidateBeforeCall(apiKey, apiUsername, order, ascending, null);
        Type localVarReturnType = new TypeToken<TopicsGetLatestTopicsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getLatestTopicsAsync(String apiKey, String apiUsername, String order, String ascending, final ApiCallback<TopicsGetLatestTopicsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLatestTopicsValidateBeforeCall(apiKey, apiUsername, order, ascending, _callback);
        Type localVarReturnType = new TypeToken<TopicsGetLatestTopicsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetLatestTopicsRequestBuilder {
        private final String apiKey;
        private final String apiUsername;
        private String order;
        private String ascending;

        private GetLatestTopicsRequestBuilder(String apiKey, String apiUsername) {
            this.apiKey = apiKey;
            this.apiUsername = apiUsername;
        }

        /**
         * Set order
         * @param order Enum: &#x60;default&#x60;, &#x60;created&#x60;, &#x60;activity&#x60;, &#x60;views&#x60;, &#x60;posts&#x60;, &#x60;category&#x60;, &#x60;likes&#x60;, &#x60;op_likes&#x60;, &#x60;posters&#x60; (optional)
         * @return GetLatestTopicsRequestBuilder
         */
        public GetLatestTopicsRequestBuilder order(String order) {
            this.order = order;
            return this;
        }
        
        /**
         * Set ascending
         * @param ascending Defaults to &#x60;desc&#x60;, add &#x60;ascending&#x3D;true&#x60; to sort asc (optional)
         * @return GetLatestTopicsRequestBuilder
         */
        public GetLatestTopicsRequestBuilder ascending(String ascending) {
            this.ascending = ascending;
            return this;
        }
        
        /**
         * Build call for getLatestTopics
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> topic updated </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getLatestTopicsCall(apiKey, apiUsername, order, ascending, _callback);
        }


        /**
         * Execute getLatestTopics request
         * @return TopicsGetLatestTopicsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> topic updated </td><td>  -  </td></tr>
         </table>
         */
        public TopicsGetLatestTopicsResponse execute() throws ApiException {
            ApiResponse<TopicsGetLatestTopicsResponse> localVarResp = getLatestTopicsWithHttpInfo(apiKey, apiUsername, order, ascending);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getLatestTopics request with HTTP info returned
         * @return ApiResponse&lt;TopicsGetLatestTopicsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> topic updated </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TopicsGetLatestTopicsResponse> executeWithHttpInfo() throws ApiException {
            return getLatestTopicsWithHttpInfo(apiKey, apiUsername, order, ascending);
        }

        /**
         * Execute getLatestTopics request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> topic updated </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TopicsGetLatestTopicsResponse> _callback) throws ApiException {
            return getLatestTopicsAsync(apiKey, apiUsername, order, ascending, _callback);
        }
    }

    /**
     * Get the latest topics
     * 
     * @param apiKey  (required)
     * @param apiUsername  (required)
     * @return GetLatestTopicsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> topic updated </td><td>  -  </td></tr>
     </table>
     */
    public GetLatestTopicsRequestBuilder getLatestTopics(String apiKey, String apiUsername) throws IllegalArgumentException {
        if (apiKey == null) throw new IllegalArgumentException("\"apiKey\" is required but got null");
            

        if (apiUsername == null) throw new IllegalArgumentException("\"apiUsername\" is required but got null");
            

        return new GetLatestTopicsRequestBuilder(apiKey, apiUsername);
    }
    private okhttp3.Call getSingleTopicCall(String apiKey, String apiUsername, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/t/{id}.json"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarHeaderParams.put("Api-Key", localVarApiClient.parameterToString(apiKey));
        }

        if (apiUsername != null) {
            localVarHeaderParams.put("Api-Username", localVarApiClient.parameterToString(apiUsername));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSingleTopicValidateBeforeCall(String apiKey, String apiUsername, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling getSingleTopic(Async)");
        }

        // verify the required parameter 'apiUsername' is set
        if (apiUsername == null) {
            throw new ApiException("Missing the required parameter 'apiUsername' when calling getSingleTopic(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getSingleTopic(Async)");
        }

        return getSingleTopicCall(apiKey, apiUsername, id, _callback);

    }


    private ApiResponse<TopicsGetSingleTopicResponse> getSingleTopicWithHttpInfo(String apiKey, String apiUsername, String id) throws ApiException {
        okhttp3.Call localVarCall = getSingleTopicValidateBeforeCall(apiKey, apiUsername, id, null);
        Type localVarReturnType = new TypeToken<TopicsGetSingleTopicResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSingleTopicAsync(String apiKey, String apiUsername, String id, final ApiCallback<TopicsGetSingleTopicResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSingleTopicValidateBeforeCall(apiKey, apiUsername, id, _callback);
        Type localVarReturnType = new TypeToken<TopicsGetSingleTopicResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSingleTopicRequestBuilder {
        private final String apiKey;
        private final String apiUsername;
        private final String id;

        private GetSingleTopicRequestBuilder(String apiKey, String apiUsername, String id) {
            this.apiKey = apiKey;
            this.apiUsername = apiUsername;
            this.id = id;
        }

        /**
         * Build call for getSingleTopic
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> specific posts </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSingleTopicCall(apiKey, apiUsername, id, _callback);
        }


        /**
         * Execute getSingleTopic request
         * @return TopicsGetSingleTopicResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> specific posts </td><td>  -  </td></tr>
         </table>
         */
        public TopicsGetSingleTopicResponse execute() throws ApiException {
            ApiResponse<TopicsGetSingleTopicResponse> localVarResp = getSingleTopicWithHttpInfo(apiKey, apiUsername, id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSingleTopic request with HTTP info returned
         * @return ApiResponse&lt;TopicsGetSingleTopicResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> specific posts </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TopicsGetSingleTopicResponse> executeWithHttpInfo() throws ApiException {
            return getSingleTopicWithHttpInfo(apiKey, apiUsername, id);
        }

        /**
         * Execute getSingleTopic request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> specific posts </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TopicsGetSingleTopicResponse> _callback) throws ApiException {
            return getSingleTopicAsync(apiKey, apiUsername, id, _callback);
        }
    }

    /**
     * Get a single topic
     * 
     * @param apiKey  (required)
     * @param apiUsername  (required)
     * @param id  (required)
     * @return GetSingleTopicRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> specific posts </td><td>  -  </td></tr>
     </table>
     */
    public GetSingleTopicRequestBuilder getSingleTopic(String apiKey, String apiUsername, String id) throws IllegalArgumentException {
        if (apiKey == null) throw new IllegalArgumentException("\"apiKey\" is required but got null");
            

        if (apiUsername == null) throw new IllegalArgumentException("\"apiUsername\" is required but got null");
            

        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new GetSingleTopicRequestBuilder(apiKey, apiUsername, id);
    }
    private okhttp3.Call getSpecificPostsCall(String apiKey, String apiUsername, String id, TopicsGetSpecificPostsRequest topicsGetSpecificPostsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = topicsGetSpecificPostsRequest;

        // create path and map variables
        String localVarPath = "/t/{id}/posts.json"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarHeaderParams.put("Api-Key", localVarApiClient.parameterToString(apiKey));
        }

        if (apiUsername != null) {
            localVarHeaderParams.put("Api-Username", localVarApiClient.parameterToString(apiUsername));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSpecificPostsValidateBeforeCall(String apiKey, String apiUsername, String id, TopicsGetSpecificPostsRequest topicsGetSpecificPostsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling getSpecificPosts(Async)");
        }

        // verify the required parameter 'apiUsername' is set
        if (apiUsername == null) {
            throw new ApiException("Missing the required parameter 'apiUsername' when calling getSpecificPosts(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getSpecificPosts(Async)");
        }

        return getSpecificPostsCall(apiKey, apiUsername, id, topicsGetSpecificPostsRequest, _callback);

    }


    private ApiResponse<TopicsGetSpecificPostsResponse> getSpecificPostsWithHttpInfo(String apiKey, String apiUsername, String id, TopicsGetSpecificPostsRequest topicsGetSpecificPostsRequest) throws ApiException {
        okhttp3.Call localVarCall = getSpecificPostsValidateBeforeCall(apiKey, apiUsername, id, topicsGetSpecificPostsRequest, null);
        Type localVarReturnType = new TypeToken<TopicsGetSpecificPostsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSpecificPostsAsync(String apiKey, String apiUsername, String id, TopicsGetSpecificPostsRequest topicsGetSpecificPostsRequest, final ApiCallback<TopicsGetSpecificPostsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSpecificPostsValidateBeforeCall(apiKey, apiUsername, id, topicsGetSpecificPostsRequest, _callback);
        Type localVarReturnType = new TypeToken<TopicsGetSpecificPostsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSpecificPostsRequestBuilder {
        private final Integer postIds;
        private final String apiKey;
        private final String apiUsername;
        private final String id;

        private GetSpecificPostsRequestBuilder(Integer postIds, String apiKey, String apiUsername, String id) {
            this.postIds = postIds;
            this.apiKey = apiKey;
            this.apiUsername = apiUsername;
            this.id = id;
        }

        /**
         * Build call for getSpecificPosts
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> specific posts </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TopicsGetSpecificPostsRequest topicsGetSpecificPostsRequest = buildBodyParams();
            return getSpecificPostsCall(apiKey, apiUsername, id, topicsGetSpecificPostsRequest, _callback);
        }

        private TopicsGetSpecificPostsRequest buildBodyParams() {
            TopicsGetSpecificPostsRequest topicsGetSpecificPostsRequest = new TopicsGetSpecificPostsRequest();
            topicsGetSpecificPostsRequest.postIds(this.postIds);
            return topicsGetSpecificPostsRequest;
        }

        /**
         * Execute getSpecificPosts request
         * @return TopicsGetSpecificPostsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> specific posts </td><td>  -  </td></tr>
         </table>
         */
        public TopicsGetSpecificPostsResponse execute() throws ApiException {
            TopicsGetSpecificPostsRequest topicsGetSpecificPostsRequest = buildBodyParams();
            ApiResponse<TopicsGetSpecificPostsResponse> localVarResp = getSpecificPostsWithHttpInfo(apiKey, apiUsername, id, topicsGetSpecificPostsRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSpecificPosts request with HTTP info returned
         * @return ApiResponse&lt;TopicsGetSpecificPostsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> specific posts </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TopicsGetSpecificPostsResponse> executeWithHttpInfo() throws ApiException {
            TopicsGetSpecificPostsRequest topicsGetSpecificPostsRequest = buildBodyParams();
            return getSpecificPostsWithHttpInfo(apiKey, apiUsername, id, topicsGetSpecificPostsRequest);
        }

        /**
         * Execute getSpecificPosts request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> specific posts </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TopicsGetSpecificPostsResponse> _callback) throws ApiException {
            TopicsGetSpecificPostsRequest topicsGetSpecificPostsRequest = buildBodyParams();
            return getSpecificPostsAsync(apiKey, apiUsername, id, topicsGetSpecificPostsRequest, _callback);
        }
    }

    /**
     * Get specific posts from a topic
     * 
     * @param apiKey  (required)
     * @param apiUsername  (required)
     * @param id  (required)
     * @return GetSpecificPostsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> specific posts </td><td>  -  </td></tr>
     </table>
     */
    public GetSpecificPostsRequestBuilder getSpecificPosts(Integer postIds, String apiKey, String apiUsername, String id) throws IllegalArgumentException {
        if (postIds == null) throw new IllegalArgumentException("\"postIds\" is required but got null");
        if (apiKey == null) throw new IllegalArgumentException("\"apiKey\" is required but got null");
            

        if (apiUsername == null) throw new IllegalArgumentException("\"apiUsername\" is required but got null");
            

        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new GetSpecificPostsRequestBuilder(postIds, apiKey, apiUsername, id);
    }
    private okhttp3.Call getTopTopicsByPeriodCall(String apiKey, String apiUsername, String period, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/top.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (period != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("period", period));
        }

        if (apiKey != null) {
            localVarHeaderParams.put("Api-Key", localVarApiClient.parameterToString(apiKey));
        }

        if (apiUsername != null) {
            localVarHeaderParams.put("Api-Username", localVarApiClient.parameterToString(apiUsername));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTopTopicsByPeriodValidateBeforeCall(String apiKey, String apiUsername, String period, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling getTopTopicsByPeriod(Async)");
        }

        // verify the required parameter 'apiUsername' is set
        if (apiUsername == null) {
            throw new ApiException("Missing the required parameter 'apiUsername' when calling getTopTopicsByPeriod(Async)");
        }

        return getTopTopicsByPeriodCall(apiKey, apiUsername, period, _callback);

    }


    private ApiResponse<TopicsGetTopTopicsByPeriodResponse> getTopTopicsByPeriodWithHttpInfo(String apiKey, String apiUsername, String period) throws ApiException {
        okhttp3.Call localVarCall = getTopTopicsByPeriodValidateBeforeCall(apiKey, apiUsername, period, null);
        Type localVarReturnType = new TypeToken<TopicsGetTopTopicsByPeriodResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getTopTopicsByPeriodAsync(String apiKey, String apiUsername, String period, final ApiCallback<TopicsGetTopTopicsByPeriodResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTopTopicsByPeriodValidateBeforeCall(apiKey, apiUsername, period, _callback);
        Type localVarReturnType = new TypeToken<TopicsGetTopTopicsByPeriodResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetTopTopicsByPeriodRequestBuilder {
        private final String apiKey;
        private final String apiUsername;
        private String period;

        private GetTopTopicsByPeriodRequestBuilder(String apiKey, String apiUsername) {
            this.apiKey = apiKey;
            this.apiUsername = apiUsername;
        }

        /**
         * Set period
         * @param period Enum: &#x60;all&#x60;, &#x60;yearly&#x60;, &#x60;quarterly&#x60;, &#x60;monthly&#x60;, &#x60;weekly&#x60;, &#x60;daily&#x60; (optional)
         * @return GetTopTopicsByPeriodRequestBuilder
         */
        public GetTopTopicsByPeriodRequestBuilder period(String period) {
            this.period = period;
            return this;
        }
        
        /**
         * Build call for getTopTopicsByPeriod
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getTopTopicsByPeriodCall(apiKey, apiUsername, period, _callback);
        }


        /**
         * Execute getTopTopicsByPeriod request
         * @return TopicsGetTopTopicsByPeriodResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
         </table>
         */
        public TopicsGetTopTopicsByPeriodResponse execute() throws ApiException {
            ApiResponse<TopicsGetTopTopicsByPeriodResponse> localVarResp = getTopTopicsByPeriodWithHttpInfo(apiKey, apiUsername, period);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getTopTopicsByPeriod request with HTTP info returned
         * @return ApiResponse&lt;TopicsGetTopTopicsByPeriodResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TopicsGetTopTopicsByPeriodResponse> executeWithHttpInfo() throws ApiException {
            return getTopTopicsByPeriodWithHttpInfo(apiKey, apiUsername, period);
        }

        /**
         * Execute getTopTopicsByPeriod request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TopicsGetTopTopicsByPeriodResponse> _callback) throws ApiException {
            return getTopTopicsByPeriodAsync(apiKey, apiUsername, period, _callback);
        }
    }

    /**
     * Get the top topics filtered by period
     * 
     * @param apiKey  (required)
     * @param apiUsername  (required)
     * @return GetTopTopicsByPeriodRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> response </td><td>  -  </td></tr>
     </table>
     */
    public GetTopTopicsByPeriodRequestBuilder getTopTopicsByPeriod(String apiKey, String apiUsername) throws IllegalArgumentException {
        if (apiKey == null) throw new IllegalArgumentException("\"apiKey\" is required but got null");
            

        if (apiUsername == null) throw new IllegalArgumentException("\"apiUsername\" is required but got null");
            

        return new GetTopTopicsByPeriodRequestBuilder(apiKey, apiUsername);
    }
    private okhttp3.Call removeTopicByIdCall(String apiKey, String apiUsername, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/t/{id}.json"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarHeaderParams.put("Api-Key", localVarApiClient.parameterToString(apiKey));
        }

        if (apiUsername != null) {
            localVarHeaderParams.put("Api-Username", localVarApiClient.parameterToString(apiUsername));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeTopicByIdValidateBeforeCall(String apiKey, String apiUsername, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling removeTopicById(Async)");
        }

        // verify the required parameter 'apiUsername' is set
        if (apiUsername == null) {
            throw new ApiException("Missing the required parameter 'apiUsername' when calling removeTopicById(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling removeTopicById(Async)");
        }

        return removeTopicByIdCall(apiKey, apiUsername, id, _callback);

    }


    private ApiResponse<Void> removeTopicByIdWithHttpInfo(String apiKey, String apiUsername, String id) throws ApiException {
        okhttp3.Call localVarCall = removeTopicByIdValidateBeforeCall(apiKey, apiUsername, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeTopicByIdAsync(String apiKey, String apiUsername, String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeTopicByIdValidateBeforeCall(apiKey, apiUsername, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveTopicByIdRequestBuilder {
        private final String apiKey;
        private final String apiUsername;
        private final String id;

        private RemoveTopicByIdRequestBuilder(String apiKey, String apiUsername, String id) {
            this.apiKey = apiKey;
            this.apiUsername = apiUsername;
            this.id = id;
        }

        /**
         * Build call for removeTopicById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> specific posts </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeTopicByIdCall(apiKey, apiUsername, id, _callback);
        }


        /**
         * Execute removeTopicById request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> specific posts </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removeTopicByIdWithHttpInfo(apiKey, apiUsername, id);
        }

        /**
         * Execute removeTopicById request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> specific posts </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removeTopicByIdWithHttpInfo(apiKey, apiUsername, id);
        }

        /**
         * Execute removeTopicById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> specific posts </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removeTopicByIdAsync(apiKey, apiUsername, id, _callback);
        }
    }

    /**
     * Remove a topic
     * 
     * @param apiKey  (required)
     * @param apiUsername  (required)
     * @param id  (required)
     * @return RemoveTopicByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> specific posts </td><td>  -  </td></tr>
     </table>
     */
    public RemoveTopicByIdRequestBuilder removeTopicById(String apiKey, String apiUsername, String id) throws IllegalArgumentException {
        if (apiKey == null) throw new IllegalArgumentException("\"apiKey\" is required but got null");
            

        if (apiUsername == null) throw new IllegalArgumentException("\"apiUsername\" is required but got null");
            

        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new RemoveTopicByIdRequestBuilder(apiKey, apiUsername, id);
    }
    private okhttp3.Call sendInviteToTopicCall(String apiKey, String apiUsername, String id, TopicsSendInviteToTopicRequest topicsSendInviteToTopicRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = topicsSendInviteToTopicRequest;

        // create path and map variables
        String localVarPath = "/t/{id}/invite.json"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarHeaderParams.put("Api-Key", localVarApiClient.parameterToString(apiKey));
        }

        if (apiUsername != null) {
            localVarHeaderParams.put("Api-Username", localVarApiClient.parameterToString(apiUsername));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sendInviteToTopicValidateBeforeCall(String apiKey, String apiUsername, String id, TopicsSendInviteToTopicRequest topicsSendInviteToTopicRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling sendInviteToTopic(Async)");
        }

        // verify the required parameter 'apiUsername' is set
        if (apiUsername == null) {
            throw new ApiException("Missing the required parameter 'apiUsername' when calling sendInviteToTopic(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling sendInviteToTopic(Async)");
        }

        return sendInviteToTopicCall(apiKey, apiUsername, id, topicsSendInviteToTopicRequest, _callback);

    }


    private ApiResponse<TopicsSendInviteToTopicResponse> sendInviteToTopicWithHttpInfo(String apiKey, String apiUsername, String id, TopicsSendInviteToTopicRequest topicsSendInviteToTopicRequest) throws ApiException {
        okhttp3.Call localVarCall = sendInviteToTopicValidateBeforeCall(apiKey, apiUsername, id, topicsSendInviteToTopicRequest, null);
        Type localVarReturnType = new TypeToken<TopicsSendInviteToTopicResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call sendInviteToTopicAsync(String apiKey, String apiUsername, String id, TopicsSendInviteToTopicRequest topicsSendInviteToTopicRequest, final ApiCallback<TopicsSendInviteToTopicResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = sendInviteToTopicValidateBeforeCall(apiKey, apiUsername, id, topicsSendInviteToTopicRequest, _callback);
        Type localVarReturnType = new TypeToken<TopicsSendInviteToTopicResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SendInviteToTopicRequestBuilder {
        private final String apiKey;
        private final String apiUsername;
        private final String id;
        private String user;
        private String email;

        private SendInviteToTopicRequestBuilder(String apiKey, String apiUsername, String id) {
            this.apiKey = apiKey;
            this.apiUsername = apiUsername;
            this.id = id;
        }

        /**
         * Set user
         * @param user  (optional)
         * @return SendInviteToTopicRequestBuilder
         */
        public SendInviteToTopicRequestBuilder user(String user) {
            this.user = user;
            return this;
        }
        
        /**
         * Set email
         * @param email  (optional)
         * @return SendInviteToTopicRequestBuilder
         */
        public SendInviteToTopicRequestBuilder email(String email) {
            this.email = email;
            return this;
        }
        
        /**
         * Build call for sendInviteToTopic
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> topic updated </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TopicsSendInviteToTopicRequest topicsSendInviteToTopicRequest = buildBodyParams();
            return sendInviteToTopicCall(apiKey, apiUsername, id, topicsSendInviteToTopicRequest, _callback);
        }

        private TopicsSendInviteToTopicRequest buildBodyParams() {
            TopicsSendInviteToTopicRequest topicsSendInviteToTopicRequest = new TopicsSendInviteToTopicRequest();
            topicsSendInviteToTopicRequest.user(this.user);
            topicsSendInviteToTopicRequest.email(this.email);
            return topicsSendInviteToTopicRequest;
        }

        /**
         * Execute sendInviteToTopic request
         * @return TopicsSendInviteToTopicResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> topic updated </td><td>  -  </td></tr>
         </table>
         */
        public TopicsSendInviteToTopicResponse execute() throws ApiException {
            TopicsSendInviteToTopicRequest topicsSendInviteToTopicRequest = buildBodyParams();
            ApiResponse<TopicsSendInviteToTopicResponse> localVarResp = sendInviteToTopicWithHttpInfo(apiKey, apiUsername, id, topicsSendInviteToTopicRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute sendInviteToTopic request with HTTP info returned
         * @return ApiResponse&lt;TopicsSendInviteToTopicResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> topic updated </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TopicsSendInviteToTopicResponse> executeWithHttpInfo() throws ApiException {
            TopicsSendInviteToTopicRequest topicsSendInviteToTopicRequest = buildBodyParams();
            return sendInviteToTopicWithHttpInfo(apiKey, apiUsername, id, topicsSendInviteToTopicRequest);
        }

        /**
         * Execute sendInviteToTopic request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> topic updated </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TopicsSendInviteToTopicResponse> _callback) throws ApiException {
            TopicsSendInviteToTopicRequest topicsSendInviteToTopicRequest = buildBodyParams();
            return sendInviteToTopicAsync(apiKey, apiUsername, id, topicsSendInviteToTopicRequest, _callback);
        }
    }

    /**
     * Invite to topic
     * 
     * @param apiKey  (required)
     * @param apiUsername  (required)
     * @param id  (required)
     * @return SendInviteToTopicRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> topic updated </td><td>  -  </td></tr>
     </table>
     */
    public SendInviteToTopicRequestBuilder sendInviteToTopic(String apiKey, String apiUsername, String id) throws IllegalArgumentException {
        if (apiKey == null) throw new IllegalArgumentException("\"apiKey\" is required but got null");
            

        if (apiUsername == null) throw new IllegalArgumentException("\"apiUsername\" is required but got null");
            

        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new SendInviteToTopicRequestBuilder(apiKey, apiUsername, id);
    }
    private okhttp3.Call setNotificationLevelCall(String apiKey, String apiUsername, String id, TopicsSetNotificationLevelRequest topicsSetNotificationLevelRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = topicsSetNotificationLevelRequest;

        // create path and map variables
        String localVarPath = "/t/{id}/notifications.json"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarHeaderParams.put("Api-Key", localVarApiClient.parameterToString(apiKey));
        }

        if (apiUsername != null) {
            localVarHeaderParams.put("Api-Username", localVarApiClient.parameterToString(apiUsername));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setNotificationLevelValidateBeforeCall(String apiKey, String apiUsername, String id, TopicsSetNotificationLevelRequest topicsSetNotificationLevelRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling setNotificationLevel(Async)");
        }

        // verify the required parameter 'apiUsername' is set
        if (apiUsername == null) {
            throw new ApiException("Missing the required parameter 'apiUsername' when calling setNotificationLevel(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling setNotificationLevel(Async)");
        }

        return setNotificationLevelCall(apiKey, apiUsername, id, topicsSetNotificationLevelRequest, _callback);

    }


    private ApiResponse<TopicsSetNotificationLevelResponse> setNotificationLevelWithHttpInfo(String apiKey, String apiUsername, String id, TopicsSetNotificationLevelRequest topicsSetNotificationLevelRequest) throws ApiException {
        okhttp3.Call localVarCall = setNotificationLevelValidateBeforeCall(apiKey, apiUsername, id, topicsSetNotificationLevelRequest, null);
        Type localVarReturnType = new TypeToken<TopicsSetNotificationLevelResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call setNotificationLevelAsync(String apiKey, String apiUsername, String id, TopicsSetNotificationLevelRequest topicsSetNotificationLevelRequest, final ApiCallback<TopicsSetNotificationLevelResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = setNotificationLevelValidateBeforeCall(apiKey, apiUsername, id, topicsSetNotificationLevelRequest, _callback);
        Type localVarReturnType = new TypeToken<TopicsSetNotificationLevelResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SetNotificationLevelRequestBuilder {
        private final String notificationLevel;
        private final String apiKey;
        private final String apiUsername;
        private final String id;

        private SetNotificationLevelRequestBuilder(String notificationLevel, String apiKey, String apiUsername, String id) {
            this.notificationLevel = notificationLevel;
            this.apiKey = apiKey;
            this.apiUsername = apiUsername;
            this.id = id;
        }

        /**
         * Build call for setNotificationLevel
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> topic updated </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TopicsSetNotificationLevelRequest topicsSetNotificationLevelRequest = buildBodyParams();
            return setNotificationLevelCall(apiKey, apiUsername, id, topicsSetNotificationLevelRequest, _callback);
        }

        private TopicsSetNotificationLevelRequest buildBodyParams() {
            TopicsSetNotificationLevelRequest topicsSetNotificationLevelRequest = new TopicsSetNotificationLevelRequest();
            if (this.notificationLevel != null)
            topicsSetNotificationLevelRequest.notificationLevel(TopicsSetNotificationLevelRequest.NotificationLevelEnum.fromValue(this.notificationLevel));
            return topicsSetNotificationLevelRequest;
        }

        /**
         * Execute setNotificationLevel request
         * @return TopicsSetNotificationLevelResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> topic updated </td><td>  -  </td></tr>
         </table>
         */
        public TopicsSetNotificationLevelResponse execute() throws ApiException {
            TopicsSetNotificationLevelRequest topicsSetNotificationLevelRequest = buildBodyParams();
            ApiResponse<TopicsSetNotificationLevelResponse> localVarResp = setNotificationLevelWithHttpInfo(apiKey, apiUsername, id, topicsSetNotificationLevelRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute setNotificationLevel request with HTTP info returned
         * @return ApiResponse&lt;TopicsSetNotificationLevelResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> topic updated </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TopicsSetNotificationLevelResponse> executeWithHttpInfo() throws ApiException {
            TopicsSetNotificationLevelRequest topicsSetNotificationLevelRequest = buildBodyParams();
            return setNotificationLevelWithHttpInfo(apiKey, apiUsername, id, topicsSetNotificationLevelRequest);
        }

        /**
         * Execute setNotificationLevel request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> topic updated </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TopicsSetNotificationLevelResponse> _callback) throws ApiException {
            TopicsSetNotificationLevelRequest topicsSetNotificationLevelRequest = buildBodyParams();
            return setNotificationLevelAsync(apiKey, apiUsername, id, topicsSetNotificationLevelRequest, _callback);
        }
    }

    /**
     * Set notification level
     * 
     * @param apiKey  (required)
     * @param apiUsername  (required)
     * @param id  (required)
     * @return SetNotificationLevelRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> topic updated </td><td>  -  </td></tr>
     </table>
     */
    public SetNotificationLevelRequestBuilder setNotificationLevel(String notificationLevel, String apiKey, String apiUsername, String id) throws IllegalArgumentException {
        if (notificationLevel == null) throw new IllegalArgumentException("\"notificationLevel\" is required but got null");
            

        if (apiKey == null) throw new IllegalArgumentException("\"apiKey\" is required but got null");
            

        if (apiUsername == null) throw new IllegalArgumentException("\"apiUsername\" is required but got null");
            

        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new SetNotificationLevelRequestBuilder(notificationLevel, apiKey, apiUsername, id);
    }
    private okhttp3.Call updateBookmarkCall(String apiKey, String apiUsername, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/t/{id}/bookmark.json"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarHeaderParams.put("Api-Key", localVarApiClient.parameterToString(apiKey));
        }

        if (apiUsername != null) {
            localVarHeaderParams.put("Api-Username", localVarApiClient.parameterToString(apiUsername));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateBookmarkValidateBeforeCall(String apiKey, String apiUsername, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling updateBookmark(Async)");
        }

        // verify the required parameter 'apiUsername' is set
        if (apiUsername == null) {
            throw new ApiException("Missing the required parameter 'apiUsername' when calling updateBookmark(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateBookmark(Async)");
        }

        return updateBookmarkCall(apiKey, apiUsername, id, _callback);

    }


    private ApiResponse<Void> updateBookmarkWithHttpInfo(String apiKey, String apiUsername, String id) throws ApiException {
        okhttp3.Call localVarCall = updateBookmarkValidateBeforeCall(apiKey, apiUsername, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateBookmarkAsync(String apiKey, String apiUsername, String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateBookmarkValidateBeforeCall(apiKey, apiUsername, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateBookmarkRequestBuilder {
        private final String apiKey;
        private final String apiUsername;
        private final String id;

        private UpdateBookmarkRequestBuilder(String apiKey, String apiUsername, String id) {
            this.apiKey = apiKey;
            this.apiUsername = apiUsername;
            this.id = id;
        }

        /**
         * Build call for updateBookmark
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> topic updated </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return updateBookmarkCall(apiKey, apiUsername, id, _callback);
        }


        /**
         * Execute updateBookmark request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> topic updated </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            updateBookmarkWithHttpInfo(apiKey, apiUsername, id);
        }

        /**
         * Execute updateBookmark request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> topic updated </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return updateBookmarkWithHttpInfo(apiKey, apiUsername, id);
        }

        /**
         * Execute updateBookmark request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> topic updated </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return updateBookmarkAsync(apiKey, apiUsername, id, _callback);
        }
    }

    /**
     * Bookmark topic
     * 
     * @param apiKey  (required)
     * @param apiUsername  (required)
     * @param id  (required)
     * @return UpdateBookmarkRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> topic updated </td><td>  -  </td></tr>
     </table>
     */
    public UpdateBookmarkRequestBuilder updateBookmark(String apiKey, String apiUsername, String id) throws IllegalArgumentException {
        if (apiKey == null) throw new IllegalArgumentException("\"apiKey\" is required but got null");
            

        if (apiUsername == null) throw new IllegalArgumentException("\"apiUsername\" is required but got null");
            

        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new UpdateBookmarkRequestBuilder(apiKey, apiUsername, id);
    }
    private okhttp3.Call updateStatusOfTopicCall(String apiKey, String apiUsername, String id, TopicsUpdateStatusOfTopicRequest topicsUpdateStatusOfTopicRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = topicsUpdateStatusOfTopicRequest;

        // create path and map variables
        String localVarPath = "/t/{id}/status.json"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarHeaderParams.put("Api-Key", localVarApiClient.parameterToString(apiKey));
        }

        if (apiUsername != null) {
            localVarHeaderParams.put("Api-Username", localVarApiClient.parameterToString(apiUsername));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateStatusOfTopicValidateBeforeCall(String apiKey, String apiUsername, String id, TopicsUpdateStatusOfTopicRequest topicsUpdateStatusOfTopicRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling updateStatusOfTopic(Async)");
        }

        // verify the required parameter 'apiUsername' is set
        if (apiUsername == null) {
            throw new ApiException("Missing the required parameter 'apiUsername' when calling updateStatusOfTopic(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateStatusOfTopic(Async)");
        }

        return updateStatusOfTopicCall(apiKey, apiUsername, id, topicsUpdateStatusOfTopicRequest, _callback);

    }


    private ApiResponse<TopicsUpdateStatusOfTopicResponse> updateStatusOfTopicWithHttpInfo(String apiKey, String apiUsername, String id, TopicsUpdateStatusOfTopicRequest topicsUpdateStatusOfTopicRequest) throws ApiException {
        okhttp3.Call localVarCall = updateStatusOfTopicValidateBeforeCall(apiKey, apiUsername, id, topicsUpdateStatusOfTopicRequest, null);
        Type localVarReturnType = new TypeToken<TopicsUpdateStatusOfTopicResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateStatusOfTopicAsync(String apiKey, String apiUsername, String id, TopicsUpdateStatusOfTopicRequest topicsUpdateStatusOfTopicRequest, final ApiCallback<TopicsUpdateStatusOfTopicResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateStatusOfTopicValidateBeforeCall(apiKey, apiUsername, id, topicsUpdateStatusOfTopicRequest, _callback);
        Type localVarReturnType = new TypeToken<TopicsUpdateStatusOfTopicResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateStatusOfTopicRequestBuilder {
        private final String status;
        private final String enabled;
        private final String apiKey;
        private final String apiUsername;
        private final String id;
        private String until;

        private UpdateStatusOfTopicRequestBuilder(String status, String enabled, String apiKey, String apiUsername, String id) {
            this.status = status;
            this.enabled = enabled;
            this.apiKey = apiKey;
            this.apiUsername = apiUsername;
            this.id = id;
        }

        /**
         * Set until
         * @param until Only required for &#x60;pinned&#x60; and &#x60;pinned_globally&#x60; (optional)
         * @return UpdateStatusOfTopicRequestBuilder
         */
        public UpdateStatusOfTopicRequestBuilder until(String until) {
            this.until = until;
            return this;
        }
        
        /**
         * Build call for updateStatusOfTopic
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> topic updated </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TopicsUpdateStatusOfTopicRequest topicsUpdateStatusOfTopicRequest = buildBodyParams();
            return updateStatusOfTopicCall(apiKey, apiUsername, id, topicsUpdateStatusOfTopicRequest, _callback);
        }

        private TopicsUpdateStatusOfTopicRequest buildBodyParams() {
            TopicsUpdateStatusOfTopicRequest topicsUpdateStatusOfTopicRequest = new TopicsUpdateStatusOfTopicRequest();
            if (this.status != null)
            topicsUpdateStatusOfTopicRequest.status(TopicsUpdateStatusOfTopicRequest.StatusEnum.fromValue(this.status));
            if (this.enabled != null)
            topicsUpdateStatusOfTopicRequest.enabled(TopicsUpdateStatusOfTopicRequest.EnabledEnum.fromValue(this.enabled));
            topicsUpdateStatusOfTopicRequest.until(this.until);
            return topicsUpdateStatusOfTopicRequest;
        }

        /**
         * Execute updateStatusOfTopic request
         * @return TopicsUpdateStatusOfTopicResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> topic updated </td><td>  -  </td></tr>
         </table>
         */
        public TopicsUpdateStatusOfTopicResponse execute() throws ApiException {
            TopicsUpdateStatusOfTopicRequest topicsUpdateStatusOfTopicRequest = buildBodyParams();
            ApiResponse<TopicsUpdateStatusOfTopicResponse> localVarResp = updateStatusOfTopicWithHttpInfo(apiKey, apiUsername, id, topicsUpdateStatusOfTopicRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateStatusOfTopic request with HTTP info returned
         * @return ApiResponse&lt;TopicsUpdateStatusOfTopicResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> topic updated </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TopicsUpdateStatusOfTopicResponse> executeWithHttpInfo() throws ApiException {
            TopicsUpdateStatusOfTopicRequest topicsUpdateStatusOfTopicRequest = buildBodyParams();
            return updateStatusOfTopicWithHttpInfo(apiKey, apiUsername, id, topicsUpdateStatusOfTopicRequest);
        }

        /**
         * Execute updateStatusOfTopic request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> topic updated </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TopicsUpdateStatusOfTopicResponse> _callback) throws ApiException {
            TopicsUpdateStatusOfTopicRequest topicsUpdateStatusOfTopicRequest = buildBodyParams();
            return updateStatusOfTopicAsync(apiKey, apiUsername, id, topicsUpdateStatusOfTopicRequest, _callback);
        }
    }

    /**
     * Update the status of a topic
     * 
     * @param apiKey  (required)
     * @param apiUsername  (required)
     * @param id  (required)
     * @return UpdateStatusOfTopicRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> topic updated </td><td>  -  </td></tr>
     </table>
     */
    public UpdateStatusOfTopicRequestBuilder updateStatusOfTopic(String status, String enabled, String apiKey, String apiUsername, String id) throws IllegalArgumentException {
        if (status == null) throw new IllegalArgumentException("\"status\" is required but got null");
            

        if (enabled == null) throw new IllegalArgumentException("\"enabled\" is required but got null");
            

        if (apiKey == null) throw new IllegalArgumentException("\"apiKey\" is required but got null");
            

        if (apiUsername == null) throw new IllegalArgumentException("\"apiUsername\" is required but got null");
            

        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new UpdateStatusOfTopicRequestBuilder(status, enabled, apiKey, apiUsername, id);
    }
    private okhttp3.Call updateTimestampJsonCall(String apiKey, String apiUsername, String id, TopicsUpdateTimestampJsonRequest topicsUpdateTimestampJsonRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = topicsUpdateTimestampJsonRequest;

        // create path and map variables
        String localVarPath = "/t/{id}/change-timestamp.json"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarHeaderParams.put("Api-Key", localVarApiClient.parameterToString(apiKey));
        }

        if (apiUsername != null) {
            localVarHeaderParams.put("Api-Username", localVarApiClient.parameterToString(apiUsername));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateTimestampJsonValidateBeforeCall(String apiKey, String apiUsername, String id, TopicsUpdateTimestampJsonRequest topicsUpdateTimestampJsonRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling updateTimestampJson(Async)");
        }

        // verify the required parameter 'apiUsername' is set
        if (apiUsername == null) {
            throw new ApiException("Missing the required parameter 'apiUsername' when calling updateTimestampJson(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateTimestampJson(Async)");
        }

        return updateTimestampJsonCall(apiKey, apiUsername, id, topicsUpdateTimestampJsonRequest, _callback);

    }


    private ApiResponse<TopicsUpdateTimestampJsonResponse> updateTimestampJsonWithHttpInfo(String apiKey, String apiUsername, String id, TopicsUpdateTimestampJsonRequest topicsUpdateTimestampJsonRequest) throws ApiException {
        okhttp3.Call localVarCall = updateTimestampJsonValidateBeforeCall(apiKey, apiUsername, id, topicsUpdateTimestampJsonRequest, null);
        Type localVarReturnType = new TypeToken<TopicsUpdateTimestampJsonResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateTimestampJsonAsync(String apiKey, String apiUsername, String id, TopicsUpdateTimestampJsonRequest topicsUpdateTimestampJsonRequest, final ApiCallback<TopicsUpdateTimestampJsonResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateTimestampJsonValidateBeforeCall(apiKey, apiUsername, id, topicsUpdateTimestampJsonRequest, _callback);
        Type localVarReturnType = new TypeToken<TopicsUpdateTimestampJsonResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateTimestampJsonRequestBuilder {
        private final String timestamp;
        private final String apiKey;
        private final String apiUsername;
        private final String id;

        private UpdateTimestampJsonRequestBuilder(String timestamp, String apiKey, String apiUsername, String id) {
            this.timestamp = timestamp;
            this.apiKey = apiKey;
            this.apiUsername = apiUsername;
            this.id = id;
        }

        /**
         * Build call for updateTimestampJson
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> topic updated </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TopicsUpdateTimestampJsonRequest topicsUpdateTimestampJsonRequest = buildBodyParams();
            return updateTimestampJsonCall(apiKey, apiUsername, id, topicsUpdateTimestampJsonRequest, _callback);
        }

        private TopicsUpdateTimestampJsonRequest buildBodyParams() {
            TopicsUpdateTimestampJsonRequest topicsUpdateTimestampJsonRequest = new TopicsUpdateTimestampJsonRequest();
            topicsUpdateTimestampJsonRequest.timestamp(this.timestamp);
            return topicsUpdateTimestampJsonRequest;
        }

        /**
         * Execute updateTimestampJson request
         * @return TopicsUpdateTimestampJsonResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> topic updated </td><td>  -  </td></tr>
         </table>
         */
        public TopicsUpdateTimestampJsonResponse execute() throws ApiException {
            TopicsUpdateTimestampJsonRequest topicsUpdateTimestampJsonRequest = buildBodyParams();
            ApiResponse<TopicsUpdateTimestampJsonResponse> localVarResp = updateTimestampJsonWithHttpInfo(apiKey, apiUsername, id, topicsUpdateTimestampJsonRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateTimestampJson request with HTTP info returned
         * @return ApiResponse&lt;TopicsUpdateTimestampJsonResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> topic updated </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TopicsUpdateTimestampJsonResponse> executeWithHttpInfo() throws ApiException {
            TopicsUpdateTimestampJsonRequest topicsUpdateTimestampJsonRequest = buildBodyParams();
            return updateTimestampJsonWithHttpInfo(apiKey, apiUsername, id, topicsUpdateTimestampJsonRequest);
        }

        /**
         * Execute updateTimestampJson request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> topic updated </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TopicsUpdateTimestampJsonResponse> _callback) throws ApiException {
            TopicsUpdateTimestampJsonRequest topicsUpdateTimestampJsonRequest = buildBodyParams();
            return updateTimestampJsonAsync(apiKey, apiUsername, id, topicsUpdateTimestampJsonRequest, _callback);
        }
    }

    /**
     * Update topic timestamp
     * 
     * @param apiKey  (required)
     * @param apiUsername  (required)
     * @param id  (required)
     * @return UpdateTimestampJsonRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> topic updated </td><td>  -  </td></tr>
     </table>
     */
    public UpdateTimestampJsonRequestBuilder updateTimestampJson(String timestamp, String apiKey, String apiUsername, String id) throws IllegalArgumentException {
        if (timestamp == null) throw new IllegalArgumentException("\"timestamp\" is required but got null");
            

        if (apiKey == null) throw new IllegalArgumentException("\"apiKey\" is required but got null");
            

        if (apiUsername == null) throw new IllegalArgumentException("\"apiUsername\" is required but got null");
            

        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new UpdateTimestampJsonRequestBuilder(timestamp, apiKey, apiUsername, id);
    }
    private okhttp3.Call updateTopicByIdJsonCall(String apiKey, String apiUsername, String id, TopicsUpdateTopicByIdJsonRequest topicsUpdateTopicByIdJsonRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = topicsUpdateTopicByIdJsonRequest;

        // create path and map variables
        String localVarPath = "/t/-/{id}.json"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarHeaderParams.put("Api-Key", localVarApiClient.parameterToString(apiKey));
        }

        if (apiUsername != null) {
            localVarHeaderParams.put("Api-Username", localVarApiClient.parameterToString(apiUsername));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateTopicByIdJsonValidateBeforeCall(String apiKey, String apiUsername, String id, TopicsUpdateTopicByIdJsonRequest topicsUpdateTopicByIdJsonRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling updateTopicByIdJson(Async)");
        }

        // verify the required parameter 'apiUsername' is set
        if (apiUsername == null) {
            throw new ApiException("Missing the required parameter 'apiUsername' when calling updateTopicByIdJson(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateTopicByIdJson(Async)");
        }

        return updateTopicByIdJsonCall(apiKey, apiUsername, id, topicsUpdateTopicByIdJsonRequest, _callback);

    }


    private ApiResponse<TopicsUpdateTopicByIdJsonResponse> updateTopicByIdJsonWithHttpInfo(String apiKey, String apiUsername, String id, TopicsUpdateTopicByIdJsonRequest topicsUpdateTopicByIdJsonRequest) throws ApiException {
        okhttp3.Call localVarCall = updateTopicByIdJsonValidateBeforeCall(apiKey, apiUsername, id, topicsUpdateTopicByIdJsonRequest, null);
        Type localVarReturnType = new TypeToken<TopicsUpdateTopicByIdJsonResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateTopicByIdJsonAsync(String apiKey, String apiUsername, String id, TopicsUpdateTopicByIdJsonRequest topicsUpdateTopicByIdJsonRequest, final ApiCallback<TopicsUpdateTopicByIdJsonResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateTopicByIdJsonValidateBeforeCall(apiKey, apiUsername, id, topicsUpdateTopicByIdJsonRequest, _callback);
        Type localVarReturnType = new TypeToken<TopicsUpdateTopicByIdJsonResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateTopicByIdJsonRequestBuilder {
        private final String apiKey;
        private final String apiUsername;
        private final String id;
        private TopicsUpdateTopicByIdJsonRequestTopic topic;

        private UpdateTopicByIdJsonRequestBuilder(String apiKey, String apiUsername, String id) {
            this.apiKey = apiKey;
            this.apiUsername = apiUsername;
            this.id = id;
        }

        /**
         * Set topic
         * @param topic  (optional)
         * @return UpdateTopicByIdJsonRequestBuilder
         */
        public UpdateTopicByIdJsonRequestBuilder topic(TopicsUpdateTopicByIdJsonRequestTopic topic) {
            this.topic = topic;
            return this;
        }
        
        /**
         * Build call for updateTopicByIdJson
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> topic updated </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TopicsUpdateTopicByIdJsonRequest topicsUpdateTopicByIdJsonRequest = buildBodyParams();
            return updateTopicByIdJsonCall(apiKey, apiUsername, id, topicsUpdateTopicByIdJsonRequest, _callback);
        }

        private TopicsUpdateTopicByIdJsonRequest buildBodyParams() {
            TopicsUpdateTopicByIdJsonRequest topicsUpdateTopicByIdJsonRequest = new TopicsUpdateTopicByIdJsonRequest();
            topicsUpdateTopicByIdJsonRequest.topic(this.topic);
            return topicsUpdateTopicByIdJsonRequest;
        }

        /**
         * Execute updateTopicByIdJson request
         * @return TopicsUpdateTopicByIdJsonResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> topic updated </td><td>  -  </td></tr>
         </table>
         */
        public TopicsUpdateTopicByIdJsonResponse execute() throws ApiException {
            TopicsUpdateTopicByIdJsonRequest topicsUpdateTopicByIdJsonRequest = buildBodyParams();
            ApiResponse<TopicsUpdateTopicByIdJsonResponse> localVarResp = updateTopicByIdJsonWithHttpInfo(apiKey, apiUsername, id, topicsUpdateTopicByIdJsonRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateTopicByIdJson request with HTTP info returned
         * @return ApiResponse&lt;TopicsUpdateTopicByIdJsonResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> topic updated </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TopicsUpdateTopicByIdJsonResponse> executeWithHttpInfo() throws ApiException {
            TopicsUpdateTopicByIdJsonRequest topicsUpdateTopicByIdJsonRequest = buildBodyParams();
            return updateTopicByIdJsonWithHttpInfo(apiKey, apiUsername, id, topicsUpdateTopicByIdJsonRequest);
        }

        /**
         * Execute updateTopicByIdJson request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> topic updated </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TopicsUpdateTopicByIdJsonResponse> _callback) throws ApiException {
            TopicsUpdateTopicByIdJsonRequest topicsUpdateTopicByIdJsonRequest = buildBodyParams();
            return updateTopicByIdJsonAsync(apiKey, apiUsername, id, topicsUpdateTopicByIdJsonRequest, _callback);
        }
    }

    /**
     * Update a topic
     * 
     * @param apiKey  (required)
     * @param apiUsername  (required)
     * @param id  (required)
     * @return UpdateTopicByIdJsonRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> topic updated </td><td>  -  </td></tr>
     </table>
     */
    public UpdateTopicByIdJsonRequestBuilder updateTopicByIdJson(String apiKey, String apiUsername, String id) throws IllegalArgumentException {
        if (apiKey == null) throw new IllegalArgumentException("\"apiKey\" is required but got null");
            

        if (apiUsername == null) throw new IllegalArgumentException("\"apiUsername\" is required but got null");
            

        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new UpdateTopicByIdJsonRequestBuilder(apiKey, apiUsername, id);
    }
}
