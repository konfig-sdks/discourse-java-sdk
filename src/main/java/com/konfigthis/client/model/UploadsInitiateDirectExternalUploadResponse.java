/*
 * Discourse API Documentation
 * This page contains the documentation on how to use Discourse through API calls.  > Note: For any endpoints not listed you can follow the [reverse engineer the Discourse API](https://meta.discourse.org/t/-/20576) guide to figure out how to use an API endpoint.  ### Request Content-Type  The Content-Type for POST and PUT requests can be set to `application/x-www-form-urlencoded`, `multipart/form-data`, or `application/json`.  ### Endpoint Names and Response Content-Type  Most API endpoints provide the same content as their HTML counterparts. For example the URL `/categories` serves a list of categories, the `/categories.json` API provides the same information in JSON format.  Instead of sending API requests to `/categories.json` you may also send them to `/categories` and add an `Accept: application/json` header to the request to get the JSON response. Sending requests with the `Accept` header is necessary if you want to use URLs for related endpoints returned by the API, such as pagination URLs. These URLs are returned without the `.json` prefix so you need to add the header in order to get the correct response format.  ### Authentication  Some endpoints do not require any authentication, pretty much anything else will require you to be authenticated.  To become authenticated you will need to create an API Key from the admin panel.  Once you have your API Key you can pass it in along with your API Username as an HTTP header like this:  ``` curl -X GET \"http://127.0.0.1:3000/admin/users/list/active.json\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" ```  and this is how POST requests will look:  ``` curl -X POST \"http://127.0.0.1:3000/categories\" \\ -H \"Content-Type: multipart/form-data;\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" \\ -F \"name=89853c20-4409-e91a-a8ea-f6cdff96aaaa\" \\ -F \"color=49d9e9\" \\ -F \"text_color=f0fcfd\" ```  ### Boolean values  If an endpoint accepts a boolean be sure to specify it as a lowercase `true` or `false` value unless noted otherwise. 
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * UploadsInitiateDirectExternalUploadResponse
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class UploadsInitiateDirectExternalUploadResponse {
  public static final String SERIALIZED_NAME_KEY = "key";
  @SerializedName(SERIALIZED_NAME_KEY)
  private String key;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public static final String SERIALIZED_NAME_SIGNED_HEADERS = "signed_headers";
  @SerializedName(SERIALIZED_NAME_SIGNED_HEADERS)
  private Object signedHeaders;

  public static final String SERIALIZED_NAME_UNIQUE_IDENTIFIER = "unique_identifier";
  @SerializedName(SERIALIZED_NAME_UNIQUE_IDENTIFIER)
  private String uniqueIdentifier;

  public UploadsInitiateDirectExternalUploadResponse() {
  }

  public UploadsInitiateDirectExternalUploadResponse key(String key) {
    
    
    
    
    this.key = key;
    return this;
  }

   /**
   * The path of the temporary file on the external storage service.
   * @return key
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "temp/site/uploads/default/12345/67890.jpg", value = "The path of the temporary file on the external storage service.")

  public String getKey() {
    return key;
  }


  public void setKey(String key) {
    
    
    
    this.key = key;
  }


  public UploadsInitiateDirectExternalUploadResponse url(String url) {
    
    
    
    
    this.url = url;
    return this;
  }

   /**
   * A presigned PUT URL which must be used to upload the file binary blob to.
   * @return url
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "https://file-uploads.s3.us-west-2.amazonaws.com/temp/site/uploads/default/123/456.jpg?x-amz-acl=private&x-amz-meta-sha1-checksum=sha1&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AAAAus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20211221T011246Z&X-Amz-Expires=600&X-Amz-SignedHeaders=host&X-Amz-Signature=12345678", value = "A presigned PUT URL which must be used to upload the file binary blob to.")

  public String getUrl() {
    return url;
  }


  public void setUrl(String url) {
    
    
    
    this.url = url;
  }


  public UploadsInitiateDirectExternalUploadResponse signedHeaders(Object signedHeaders) {
    
    
    
    
    this.signedHeaders = signedHeaders;
    return this;
  }

   /**
   * A map of headers that must be sent with the PUT request.
   * @return signedHeaders
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "{\"x-amz-acl\":\"private\",\"x-amz-meta-sha1-checksum\":\"sha1\"}", value = "A map of headers that must be sent with the PUT request.")

  public Object getSignedHeaders() {
    return signedHeaders;
  }


  public void setSignedHeaders(Object signedHeaders) {
    
    
    
    this.signedHeaders = signedHeaders;
  }


  public UploadsInitiateDirectExternalUploadResponse uniqueIdentifier(String uniqueIdentifier) {
    
    
    
    
    this.uniqueIdentifier = uniqueIdentifier;
    return this;
  }

   /**
   * A unique string that identifies the external upload. This must be stored and then sent in the /complete-external-upload endpoint to complete the direct upload.
   * @return uniqueIdentifier
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "66e86218-80d9-4bda-b4d5-2b6def968705", value = "A unique string that identifies the external upload. This must be stored and then sent in the /complete-external-upload endpoint to complete the direct upload.")

  public String getUniqueIdentifier() {
    return uniqueIdentifier;
  }


  public void setUniqueIdentifier(String uniqueIdentifier) {
    
    
    
    this.uniqueIdentifier = uniqueIdentifier;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UploadsInitiateDirectExternalUploadResponse uploadsInitiateDirectExternalUploadResponse = (UploadsInitiateDirectExternalUploadResponse) o;
    return Objects.equals(this.key, uploadsInitiateDirectExternalUploadResponse.key) &&
        Objects.equals(this.url, uploadsInitiateDirectExternalUploadResponse.url) &&
        Objects.equals(this.signedHeaders, uploadsInitiateDirectExternalUploadResponse.signedHeaders) &&
        Objects.equals(this.uniqueIdentifier, uploadsInitiateDirectExternalUploadResponse.uniqueIdentifier);
  }

  @Override
  public int hashCode() {
    return Objects.hash(key, url, signedHeaders, uniqueIdentifier);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UploadsInitiateDirectExternalUploadResponse {\n");
    sb.append("    key: ").append(toIndentedString(key)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    signedHeaders: ").append(toIndentedString(signedHeaders)).append("\n");
    sb.append("    uniqueIdentifier: ").append(toIndentedString(uniqueIdentifier)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("key");
    openapiFields.add("url");
    openapiFields.add("signed_headers");
    openapiFields.add("unique_identifier");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to UploadsInitiateDirectExternalUploadResponse
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!UploadsInitiateDirectExternalUploadResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UploadsInitiateDirectExternalUploadResponse is not found in the empty JSON string", UploadsInitiateDirectExternalUploadResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!UploadsInitiateDirectExternalUploadResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UploadsInitiateDirectExternalUploadResponse` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("key") != null && !jsonObj.get("key").isJsonNull()) && !jsonObj.get("key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("key").toString()));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      if ((jsonObj.get("unique_identifier") != null && !jsonObj.get("unique_identifier").isJsonNull()) && !jsonObj.get("unique_identifier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `unique_identifier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("unique_identifier").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UploadsInitiateDirectExternalUploadResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UploadsInitiateDirectExternalUploadResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UploadsInitiateDirectExternalUploadResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UploadsInitiateDirectExternalUploadResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<UploadsInitiateDirectExternalUploadResponse>() {
           @Override
           public void write(JsonWriter out, UploadsInitiateDirectExternalUploadResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UploadsInitiateDirectExternalUploadResponse read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of UploadsInitiateDirectExternalUploadResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of UploadsInitiateDirectExternalUploadResponse
  * @throws IOException if the JSON string is invalid with respect to UploadsInitiateDirectExternalUploadResponse
  */
  public static UploadsInitiateDirectExternalUploadResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UploadsInitiateDirectExternalUploadResponse.class);
  }

 /**
  * Convert an instance of UploadsInitiateDirectExternalUploadResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

