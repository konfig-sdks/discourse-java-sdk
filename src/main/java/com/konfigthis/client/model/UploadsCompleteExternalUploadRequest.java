/*
 * Discourse API Documentation
 * This page contains the documentation on how to use Discourse through API calls.  > Note: For any endpoints not listed you can follow the [reverse engineer the Discourse API](https://meta.discourse.org/t/-/20576) guide to figure out how to use an API endpoint.  ### Request Content-Type  The Content-Type for POST and PUT requests can be set to `application/x-www-form-urlencoded`, `multipart/form-data`, or `application/json`.  ### Endpoint Names and Response Content-Type  Most API endpoints provide the same content as their HTML counterparts. For example the URL `/categories` serves a list of categories, the `/categories.json` API provides the same information in JSON format.  Instead of sending API requests to `/categories.json` you may also send them to `/categories` and add an `Accept: application/json` header to the request to get the JSON response. Sending requests with the `Accept` header is necessary if you want to use URLs for related endpoints returned by the API, such as pagination URLs. These URLs are returned without the `.json` prefix so you need to add the header in order to get the correct response format.  ### Authentication  Some endpoints do not require any authentication, pretty much anything else will require you to be authenticated.  To become authenticated you will need to create an API Key from the admin panel.  Once you have your API Key you can pass it in along with your API Username as an HTTP header like this:  ``` curl -X GET \"http://127.0.0.1:3000/admin/users/list/active.json\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" ```  and this is how POST requests will look:  ``` curl -X POST \"http://127.0.0.1:3000/categories\" \\ -H \"Content-Type: multipart/form-data;\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" \\ -F \"name=89853c20-4409-e91a-a8ea-f6cdff96aaaa\" \\ -F \"color=49d9e9\" \\ -F \"text_color=f0fcfd\" ```  ### Boolean values  If an endpoint accepts a boolean be sure to specify it as a lowercase `true` or `false` value unless noted otherwise. 
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * UploadsCompleteExternalUploadRequest
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class UploadsCompleteExternalUploadRequest {
  public static final String SERIALIZED_NAME_UNIQUE_IDENTIFIER = "unique_identifier";
  @SerializedName(SERIALIZED_NAME_UNIQUE_IDENTIFIER)
  private String uniqueIdentifier;

  public static final String SERIALIZED_NAME_FOR_PRIVATE_MESSAGE = "for_private_message";
  @SerializedName(SERIALIZED_NAME_FOR_PRIVATE_MESSAGE)
  private String forPrivateMessage;

  public static final String SERIALIZED_NAME_FOR_SITE_SETTING = "for_site_setting";
  @SerializedName(SERIALIZED_NAME_FOR_SITE_SETTING)
  private String forSiteSetting;

  public static final String SERIALIZED_NAME_PASTED = "pasted";
  @SerializedName(SERIALIZED_NAME_PASTED)
  private String pasted;

  public UploadsCompleteExternalUploadRequest() {
  }

  public UploadsCompleteExternalUploadRequest uniqueIdentifier(String uniqueIdentifier) {
    
    
    
    
    this.uniqueIdentifier = uniqueIdentifier;
    return this;
  }

   /**
   * The unique identifier returned in the original /generate-presigned-put request.
   * @return uniqueIdentifier
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "66e86218-80d9-4bda-b4d5-2b6def968705", required = true, value = "The unique identifier returned in the original /generate-presigned-put request.")

  public String getUniqueIdentifier() {
    return uniqueIdentifier;
  }


  public void setUniqueIdentifier(String uniqueIdentifier) {
    
    
    
    this.uniqueIdentifier = uniqueIdentifier;
  }


  public UploadsCompleteExternalUploadRequest forPrivateMessage(String forPrivateMessage) {
    
    
    
    
    this.forPrivateMessage = forPrivateMessage;
    return this;
  }

   /**
   * Optionally set this to true if the upload is for a private message.
   * @return forPrivateMessage
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Optionally set this to true if the upload is for a private message.")

  public String getForPrivateMessage() {
    return forPrivateMessage;
  }


  public void setForPrivateMessage(String forPrivateMessage) {
    
    
    
    this.forPrivateMessage = forPrivateMessage;
  }


  public UploadsCompleteExternalUploadRequest forSiteSetting(String forSiteSetting) {
    
    
    
    
    this.forSiteSetting = forSiteSetting;
    return this;
  }

   /**
   * Optionally set this to true if the upload is for a site setting.
   * @return forSiteSetting
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Optionally set this to true if the upload is for a site setting.")

  public String getForSiteSetting() {
    return forSiteSetting;
  }


  public void setForSiteSetting(String forSiteSetting) {
    
    
    
    this.forSiteSetting = forSiteSetting;
  }


  public UploadsCompleteExternalUploadRequest pasted(String pasted) {
    
    
    
    
    this.pasted = pasted;
    return this;
  }

   /**
   * Optionally set this to true if the upload was pasted into the upload area. This will convert PNG files to JPEG.
   * @return pasted
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Optionally set this to true if the upload was pasted into the upload area. This will convert PNG files to JPEG.")

  public String getPasted() {
    return pasted;
  }


  public void setPasted(String pasted) {
    
    
    
    this.pasted = pasted;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UploadsCompleteExternalUploadRequest uploadsCompleteExternalUploadRequest = (UploadsCompleteExternalUploadRequest) o;
    return Objects.equals(this.uniqueIdentifier, uploadsCompleteExternalUploadRequest.uniqueIdentifier) &&
        Objects.equals(this.forPrivateMessage, uploadsCompleteExternalUploadRequest.forPrivateMessage) &&
        Objects.equals(this.forSiteSetting, uploadsCompleteExternalUploadRequest.forSiteSetting) &&
        Objects.equals(this.pasted, uploadsCompleteExternalUploadRequest.pasted);
  }

  @Override
  public int hashCode() {
    return Objects.hash(uniqueIdentifier, forPrivateMessage, forSiteSetting, pasted);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UploadsCompleteExternalUploadRequest {\n");
    sb.append("    uniqueIdentifier: ").append(toIndentedString(uniqueIdentifier)).append("\n");
    sb.append("    forPrivateMessage: ").append(toIndentedString(forPrivateMessage)).append("\n");
    sb.append("    forSiteSetting: ").append(toIndentedString(forSiteSetting)).append("\n");
    sb.append("    pasted: ").append(toIndentedString(pasted)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("unique_identifier");
    openapiFields.add("for_private_message");
    openapiFields.add("for_site_setting");
    openapiFields.add("pasted");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("unique_identifier");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to UploadsCompleteExternalUploadRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!UploadsCompleteExternalUploadRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UploadsCompleteExternalUploadRequest is not found in the empty JSON string", UploadsCompleteExternalUploadRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!UploadsCompleteExternalUploadRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UploadsCompleteExternalUploadRequest` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UploadsCompleteExternalUploadRequest.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("unique_identifier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `unique_identifier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("unique_identifier").toString()));
      }
      if ((jsonObj.get("for_private_message") != null && !jsonObj.get("for_private_message").isJsonNull()) && !jsonObj.get("for_private_message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `for_private_message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("for_private_message").toString()));
      }
      if ((jsonObj.get("for_site_setting") != null && !jsonObj.get("for_site_setting").isJsonNull()) && !jsonObj.get("for_site_setting").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `for_site_setting` to be a primitive type in the JSON string but got `%s`", jsonObj.get("for_site_setting").toString()));
      }
      if ((jsonObj.get("pasted") != null && !jsonObj.get("pasted").isJsonNull()) && !jsonObj.get("pasted").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pasted` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pasted").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UploadsCompleteExternalUploadRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UploadsCompleteExternalUploadRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UploadsCompleteExternalUploadRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UploadsCompleteExternalUploadRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UploadsCompleteExternalUploadRequest>() {
           @Override
           public void write(JsonWriter out, UploadsCompleteExternalUploadRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UploadsCompleteExternalUploadRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of UploadsCompleteExternalUploadRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of UploadsCompleteExternalUploadRequest
  * @throws IOException if the JSON string is invalid with respect to UploadsCompleteExternalUploadRequest
  */
  public static UploadsCompleteExternalUploadRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UploadsCompleteExternalUploadRequest.class);
  }

 /**
  * Convert an instance of UploadsCompleteExternalUploadRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

