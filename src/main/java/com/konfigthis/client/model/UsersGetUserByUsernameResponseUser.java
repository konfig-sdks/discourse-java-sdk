/*
 * Discourse API Documentation
 * This page contains the documentation on how to use Discourse through API calls.  > Note: For any endpoints not listed you can follow the [reverse engineer the Discourse API](https://meta.discourse.org/t/-/20576) guide to figure out how to use an API endpoint.  ### Request Content-Type  The Content-Type for POST and PUT requests can be set to `application/x-www-form-urlencoded`, `multipart/form-data`, or `application/json`.  ### Endpoint Names and Response Content-Type  Most API endpoints provide the same content as their HTML counterparts. For example the URL `/categories` serves a list of categories, the `/categories.json` API provides the same information in JSON format.  Instead of sending API requests to `/categories.json` you may also send them to `/categories` and add an `Accept: application/json` header to the request to get the JSON response. Sending requests with the `Accept` header is necessary if you want to use URLs for related endpoints returned by the API, such as pagination URLs. These URLs are returned without the `.json` prefix so you need to add the header in order to get the correct response format.  ### Authentication  Some endpoints do not require any authentication, pretty much anything else will require you to be authenticated.  To become authenticated you will need to create an API Key from the admin panel.  Once you have your API Key you can pass it in along with your API Username as an HTTP header like this:  ``` curl -X GET \"http://127.0.0.1:3000/admin/users/list/active.json\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" ```  and this is how POST requests will look:  ``` curl -X POST \"http://127.0.0.1:3000/categories\" \\ -H \"Content-Type: multipart/form-data;\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" \\ -F \"name=89853c20-4409-e91a-a8ea-f6cdff96aaaa\" \\ -F \"color=49d9e9\" \\ -F \"text_color=f0fcfd\" ```  ### Boolean values  If an endpoint accepts a boolean be sure to specify it as a lowercase `true` or `false` value unless noted otherwise. 
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.UsersGetUserByUsernameResponseUserCustomFields;
import com.konfigthis.client.model.UsersGetUserByUsernameResponseUserGroupUsersInner;
import com.konfigthis.client.model.UsersGetUserByUsernameResponseUserGroupsInner;
import com.konfigthis.client.model.UsersGetUserByUsernameResponseUserUserAuthTokensInner;
import com.konfigthis.client.model.UsersGetUserByUsernameResponseUserUserFields;
import com.konfigthis.client.model.UsersGetUserByUsernameResponseUserUserNotificationSchedule;
import com.konfigthis.client.model.UsersGetUserByUsernameResponseUserUserOption;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * UsersGetUserByUsernameResponseUser
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class UsersGetUserByUsernameResponseUser {
  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private Object title = null;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_USERNAME = "username";
  @SerializedName(SERIALIZED_NAME_USERNAME)
  private String username;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_AVATAR_TEMPLATE = "avatar_template";
  @SerializedName(SERIALIZED_NAME_AVATAR_TEMPLATE)
  private String avatarTemplate;

  public static final String SERIALIZED_NAME_LAST_POSTED_AT = "last_posted_at";
  @SerializedName(SERIALIZED_NAME_LAST_POSTED_AT)
  private Object lastPostedAt = null;

  public static final String SERIALIZED_NAME_LAST_SEEN_AT = "last_seen_at";
  @SerializedName(SERIALIZED_NAME_LAST_SEEN_AT)
  private Object lastSeenAt = null;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private String createdAt;

  public static final String SERIALIZED_NAME_IGNORED = "ignored";
  @SerializedName(SERIALIZED_NAME_IGNORED)
  private Boolean ignored;

  public static final String SERIALIZED_NAME_MUTED = "muted";
  @SerializedName(SERIALIZED_NAME_MUTED)
  private Boolean muted;

  public static final String SERIALIZED_NAME_CAN_IGNORE_USER = "can_ignore_user";
  @SerializedName(SERIALIZED_NAME_CAN_IGNORE_USER)
  private Boolean canIgnoreUser;

  public static final String SERIALIZED_NAME_CAN_MUTE_USER = "can_mute_user";
  @SerializedName(SERIALIZED_NAME_CAN_MUTE_USER)
  private Boolean canMuteUser;

  public static final String SERIALIZED_NAME_CAN_SEND_PRIVATE_MESSAGES = "can_send_private_messages";
  @SerializedName(SERIALIZED_NAME_CAN_SEND_PRIVATE_MESSAGES)
  private Boolean canSendPrivateMessages;

  public static final String SERIALIZED_NAME_CAN_SEND_PRIVATE_MESSAGE_TO_USER = "can_send_private_message_to_user";
  @SerializedName(SERIALIZED_NAME_CAN_SEND_PRIVATE_MESSAGE_TO_USER)
  private Boolean canSendPrivateMessageToUser;

  public static final String SERIALIZED_NAME_TRUST_LEVEL = "trust_level";
  @SerializedName(SERIALIZED_NAME_TRUST_LEVEL)
  private Integer trustLevel;

  public static final String SERIALIZED_NAME_MODERATOR = "moderator";
  @SerializedName(SERIALIZED_NAME_MODERATOR)
  private Boolean moderator;

  public static final String SERIALIZED_NAME_ADMIN = "admin";
  @SerializedName(SERIALIZED_NAME_ADMIN)
  private Boolean admin;

  public static final String SERIALIZED_NAME_BADGE_COUNT = "badge_count";
  @SerializedName(SERIALIZED_NAME_BADGE_COUNT)
  private Integer badgeCount;

  public static final String SERIALIZED_NAME_SECOND_FACTOR_BACKUP_ENABLED = "second_factor_backup_enabled";
  @SerializedName(SERIALIZED_NAME_SECOND_FACTOR_BACKUP_ENABLED)
  private Boolean secondFactorBackupEnabled;

  public static final String SERIALIZED_NAME_USER_FIELDS = "user_fields";
  @SerializedName(SERIALIZED_NAME_USER_FIELDS)
  private UsersGetUserByUsernameResponseUserUserFields userFields;

  public static final String SERIALIZED_NAME_CUSTOM_FIELDS = "custom_fields";
  @SerializedName(SERIALIZED_NAME_CUSTOM_FIELDS)
  private UsersGetUserByUsernameResponseUserCustomFields customFields;

  public static final String SERIALIZED_NAME_TIME_READ = "time_read";
  @SerializedName(SERIALIZED_NAME_TIME_READ)
  private Integer timeRead;

  public static final String SERIALIZED_NAME_RECENT_TIME_READ = "recent_time_read";
  @SerializedName(SERIALIZED_NAME_RECENT_TIME_READ)
  private Integer recentTimeRead;

  public static final String SERIALIZED_NAME_PRIMARY_GROUP_ID = "primary_group_id";
  @SerializedName(SERIALIZED_NAME_PRIMARY_GROUP_ID)
  private Object primaryGroupId = null;

  public static final String SERIALIZED_NAME_PRIMARY_GROUP_NAME = "primary_group_name";
  @SerializedName(SERIALIZED_NAME_PRIMARY_GROUP_NAME)
  private Object primaryGroupName = null;

  public static final String SERIALIZED_NAME_FLAIR_GROUP_ID = "flair_group_id";
  @SerializedName(SERIALIZED_NAME_FLAIR_GROUP_ID)
  private Object flairGroupId = null;

  public static final String SERIALIZED_NAME_FLAIR_NAME = "flair_name";
  @SerializedName(SERIALIZED_NAME_FLAIR_NAME)
  private Object flairName = null;

  public static final String SERIALIZED_NAME_FLAIR_URL = "flair_url";
  @SerializedName(SERIALIZED_NAME_FLAIR_URL)
  private Object flairUrl = null;

  public static final String SERIALIZED_NAME_FLAIR_BG_COLOR = "flair_bg_color";
  @SerializedName(SERIALIZED_NAME_FLAIR_BG_COLOR)
  private Object flairBgColor = null;

  public static final String SERIALIZED_NAME_FLAIR_COLOR = "flair_color";
  @SerializedName(SERIALIZED_NAME_FLAIR_COLOR)
  private Object flairColor = null;

  public static final String SERIALIZED_NAME_FEATURED_TOPIC = "featured_topic";
  @SerializedName(SERIALIZED_NAME_FEATURED_TOPIC)
  private Object featuredTopic = null;

  public static final String SERIALIZED_NAME_STAGED = "staged";
  @SerializedName(SERIALIZED_NAME_STAGED)
  private Boolean staged;

  public static final String SERIALIZED_NAME_CAN_EDIT = "can_edit";
  @SerializedName(SERIALIZED_NAME_CAN_EDIT)
  private Boolean canEdit;

  public static final String SERIALIZED_NAME_CAN_EDIT_USERNAME = "can_edit_username";
  @SerializedName(SERIALIZED_NAME_CAN_EDIT_USERNAME)
  private Boolean canEditUsername;

  public static final String SERIALIZED_NAME_CAN_EDIT_EMAIL = "can_edit_email";
  @SerializedName(SERIALIZED_NAME_CAN_EDIT_EMAIL)
  private Boolean canEditEmail;

  public static final String SERIALIZED_NAME_CAN_EDIT_NAME = "can_edit_name";
  @SerializedName(SERIALIZED_NAME_CAN_EDIT_NAME)
  private Boolean canEditName;

  public static final String SERIALIZED_NAME_UPLOADED_AVATAR_ID = "uploaded_avatar_id";
  @SerializedName(SERIALIZED_NAME_UPLOADED_AVATAR_ID)
  private Object uploadedAvatarId = null;

  public static final String SERIALIZED_NAME_HAS_TITLE_BADGES = "has_title_badges";
  @SerializedName(SERIALIZED_NAME_HAS_TITLE_BADGES)
  private Boolean hasTitleBadges;

  public static final String SERIALIZED_NAME_PENDING_COUNT = "pending_count";
  @SerializedName(SERIALIZED_NAME_PENDING_COUNT)
  private Integer pendingCount;

  public static final String SERIALIZED_NAME_PENDING_POSTS_COUNT = "pending_posts_count";
  @SerializedName(SERIALIZED_NAME_PENDING_POSTS_COUNT)
  private Integer pendingPostsCount;

  public static final String SERIALIZED_NAME_PROFILE_VIEW_COUNT = "profile_view_count";
  @SerializedName(SERIALIZED_NAME_PROFILE_VIEW_COUNT)
  private Integer profileViewCount;

  public static final String SERIALIZED_NAME_SECOND_FACTOR_ENABLED = "second_factor_enabled";
  @SerializedName(SERIALIZED_NAME_SECOND_FACTOR_ENABLED)
  private Boolean secondFactorEnabled;

  public static final String SERIALIZED_NAME_CAN_UPLOAD_PROFILE_HEADER = "can_upload_profile_header";
  @SerializedName(SERIALIZED_NAME_CAN_UPLOAD_PROFILE_HEADER)
  private Boolean canUploadProfileHeader;

  public static final String SERIALIZED_NAME_CAN_UPLOAD_USER_CARD_BACKGROUND = "can_upload_user_card_background";
  @SerializedName(SERIALIZED_NAME_CAN_UPLOAD_USER_CARD_BACKGROUND)
  private Boolean canUploadUserCardBackground;

  public static final String SERIALIZED_NAME_POST_COUNT = "post_count";
  @SerializedName(SERIALIZED_NAME_POST_COUNT)
  private Integer postCount;

  public static final String SERIALIZED_NAME_CAN_BE_DELETED = "can_be_deleted";
  @SerializedName(SERIALIZED_NAME_CAN_BE_DELETED)
  private Boolean canBeDeleted;

  public static final String SERIALIZED_NAME_CAN_DELETE_ALL_POSTS = "can_delete_all_posts";
  @SerializedName(SERIALIZED_NAME_CAN_DELETE_ALL_POSTS)
  private Boolean canDeleteAllPosts;

  public static final String SERIALIZED_NAME_LOCALE = "locale";
  @SerializedName(SERIALIZED_NAME_LOCALE)
  private Object locale = null;

  public static final String SERIALIZED_NAME_MUTED_CATEGORY_IDS = "muted_category_ids";
  @SerializedName(SERIALIZED_NAME_MUTED_CATEGORY_IDS)
  private List<Object> mutedCategoryIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_REGULAR_CATEGORY_IDS = "regular_category_ids";
  @SerializedName(SERIALIZED_NAME_REGULAR_CATEGORY_IDS)
  private List<Object> regularCategoryIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_WATCHED_TAGS = "watched_tags";
  @SerializedName(SERIALIZED_NAME_WATCHED_TAGS)
  private List<Object> watchedTags = new ArrayList<>();

  public static final String SERIALIZED_NAME_WATCHING_FIRST_POST_TAGS = "watching_first_post_tags";
  @SerializedName(SERIALIZED_NAME_WATCHING_FIRST_POST_TAGS)
  private List<Object> watchingFirstPostTags = new ArrayList<>();

  public static final String SERIALIZED_NAME_TRACKED_TAGS = "tracked_tags";
  @SerializedName(SERIALIZED_NAME_TRACKED_TAGS)
  private List<Object> trackedTags = new ArrayList<>();

  public static final String SERIALIZED_NAME_MUTED_TAGS = "muted_tags";
  @SerializedName(SERIALIZED_NAME_MUTED_TAGS)
  private List<Object> mutedTags = new ArrayList<>();

  public static final String SERIALIZED_NAME_TRACKED_CATEGORY_IDS = "tracked_category_ids";
  @SerializedName(SERIALIZED_NAME_TRACKED_CATEGORY_IDS)
  private List<Object> trackedCategoryIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_WATCHED_CATEGORY_IDS = "watched_category_ids";
  @SerializedName(SERIALIZED_NAME_WATCHED_CATEGORY_IDS)
  private List<Object> watchedCategoryIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_WATCHED_FIRST_POST_CATEGORY_IDS = "watched_first_post_category_ids";
  @SerializedName(SERIALIZED_NAME_WATCHED_FIRST_POST_CATEGORY_IDS)
  private List<Object> watchedFirstPostCategoryIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_SYSTEM_AVATAR_UPLOAD_ID = "system_avatar_upload_id";
  @SerializedName(SERIALIZED_NAME_SYSTEM_AVATAR_UPLOAD_ID)
  private Object systemAvatarUploadId = null;

  public static final String SERIALIZED_NAME_SYSTEM_AVATAR_TEMPLATE = "system_avatar_template";
  @SerializedName(SERIALIZED_NAME_SYSTEM_AVATAR_TEMPLATE)
  private String systemAvatarTemplate;

  public static final String SERIALIZED_NAME_MUTED_USERNAMES = "muted_usernames";
  @SerializedName(SERIALIZED_NAME_MUTED_USERNAMES)
  private List<Object> mutedUsernames = new ArrayList<>();

  public static final String SERIALIZED_NAME_IGNORED_USERNAMES = "ignored_usernames";
  @SerializedName(SERIALIZED_NAME_IGNORED_USERNAMES)
  private List<Object> ignoredUsernames = new ArrayList<>();

  public static final String SERIALIZED_NAME_ALLOWED_PM_USERNAMES = "allowed_pm_usernames";
  @SerializedName(SERIALIZED_NAME_ALLOWED_PM_USERNAMES)
  private List<Object> allowedPmUsernames = new ArrayList<>();

  public static final String SERIALIZED_NAME_MAILING_LIST_POSTS_PER_DAY = "mailing_list_posts_per_day";
  @SerializedName(SERIALIZED_NAME_MAILING_LIST_POSTS_PER_DAY)
  private Integer mailingListPostsPerDay;

  public static final String SERIALIZED_NAME_CAN_CHANGE_BIO = "can_change_bio";
  @SerializedName(SERIALIZED_NAME_CAN_CHANGE_BIO)
  private Boolean canChangeBio;

  public static final String SERIALIZED_NAME_CAN_CHANGE_LOCATION = "can_change_location";
  @SerializedName(SERIALIZED_NAME_CAN_CHANGE_LOCATION)
  private Boolean canChangeLocation;

  public static final String SERIALIZED_NAME_CAN_CHANGE_WEBSITE = "can_change_website";
  @SerializedName(SERIALIZED_NAME_CAN_CHANGE_WEBSITE)
  private Boolean canChangeWebsite;

  public static final String SERIALIZED_NAME_CAN_CHANGE_TRACKING_PREFERENCES = "can_change_tracking_preferences";
  @SerializedName(SERIALIZED_NAME_CAN_CHANGE_TRACKING_PREFERENCES)
  private Boolean canChangeTrackingPreferences;

  public static final String SERIALIZED_NAME_USER_API_KEYS = "user_api_keys";
  @SerializedName(SERIALIZED_NAME_USER_API_KEYS)
  private Object userApiKeys = null;

  public static final String SERIALIZED_NAME_USER_PASSKEYS = "user_passkeys";
  @SerializedName(SERIALIZED_NAME_USER_PASSKEYS)
  private List userPasskeys = null;

  public static final String SERIALIZED_NAME_SIDEBAR_TAGS = "sidebar_tags";
  @SerializedName(SERIALIZED_NAME_SIDEBAR_TAGS)
  private List sidebarTags = null;

  public static final String SERIALIZED_NAME_SIDEBAR_CATEGORY_IDS = "sidebar_category_ids";
  @SerializedName(SERIALIZED_NAME_SIDEBAR_CATEGORY_IDS)
  private List sidebarCategoryIds = null;

  public static final String SERIALIZED_NAME_DISPLAY_SIDEBAR_TAGS = "display_sidebar_tags";
  @SerializedName(SERIALIZED_NAME_DISPLAY_SIDEBAR_TAGS)
  private Boolean displaySidebarTags;

  public static final String SERIALIZED_NAME_USER_AUTH_TOKENS = "user_auth_tokens";
  @SerializedName(SERIALIZED_NAME_USER_AUTH_TOKENS)
  private List<UsersGetUserByUsernameResponseUserUserAuthTokensInner> userAuthTokens = new ArrayList<>();

  public static final String SERIALIZED_NAME_USER_NOTIFICATION_SCHEDULE = "user_notification_schedule";
  @SerializedName(SERIALIZED_NAME_USER_NOTIFICATION_SCHEDULE)
  private UsersGetUserByUsernameResponseUserUserNotificationSchedule userNotificationSchedule;

  public static final String SERIALIZED_NAME_USE_LOGO_SMALL_AS_AVATAR = "use_logo_small_as_avatar";
  @SerializedName(SERIALIZED_NAME_USE_LOGO_SMALL_AS_AVATAR)
  private Boolean useLogoSmallAsAvatar;

  public static final String SERIALIZED_NAME_FEATURED_USER_BADGE_IDS = "featured_user_badge_ids";
  @SerializedName(SERIALIZED_NAME_FEATURED_USER_BADGE_IDS)
  private List<Object> featuredUserBadgeIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_INVITED_BY = "invited_by";
  @SerializedName(SERIALIZED_NAME_INVITED_BY)
  private Object invitedBy = null;

  public static final String SERIALIZED_NAME_GROUPS = "groups";
  @SerializedName(SERIALIZED_NAME_GROUPS)
  private List<UsersGetUserByUsernameResponseUserGroupsInner> groups = new ArrayList<>();

  public static final String SERIALIZED_NAME_GROUP_USERS = "group_users";
  @SerializedName(SERIALIZED_NAME_GROUP_USERS)
  private List<UsersGetUserByUsernameResponseUserGroupUsersInner> groupUsers = new ArrayList<>();

  public static final String SERIALIZED_NAME_USER_OPTION = "user_option";
  @SerializedName(SERIALIZED_NAME_USER_OPTION)
  private UsersGetUserByUsernameResponseUserUserOption userOption;

  public UsersGetUserByUsernameResponseUser() {
  }

  public UsersGetUserByUsernameResponseUser title(Object title) {
    
    
    
    
    this.title = title;
    return this;
  }

   /**
   * Get title
   * @return title
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "")

  public Object getTitle() {
    return title;
  }


  public void setTitle(Object title) {
    
    
    
    this.title = title;
  }


  public UsersGetUserByUsernameResponseUser id(Integer id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Integer getId() {
    return id;
  }


  public void setId(Integer id) {
    
    
    
    this.id = id;
  }


  public UsersGetUserByUsernameResponseUser username(String username) {
    
    
    
    
    this.username = username;
    return this;
  }

   /**
   * Get username
   * @return username
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getUsername() {
    return username;
  }


  public void setUsername(String username) {
    
    
    
    this.username = username;
  }


  public UsersGetUserByUsernameResponseUser name(String name) {
    
    
    
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    
    
    
    this.name = name;
  }


  public UsersGetUserByUsernameResponseUser avatarTemplate(String avatarTemplate) {
    
    
    
    
    this.avatarTemplate = avatarTemplate;
    return this;
  }

   /**
   * Get avatarTemplate
   * @return avatarTemplate
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getAvatarTemplate() {
    return avatarTemplate;
  }


  public void setAvatarTemplate(String avatarTemplate) {
    
    
    
    this.avatarTemplate = avatarTemplate;
  }


  public UsersGetUserByUsernameResponseUser lastPostedAt(Object lastPostedAt) {
    
    
    
    
    this.lastPostedAt = lastPostedAt;
    return this;
  }

   /**
   * Get lastPostedAt
   * @return lastPostedAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "")

  public Object getLastPostedAt() {
    return lastPostedAt;
  }


  public void setLastPostedAt(Object lastPostedAt) {
    
    
    
    this.lastPostedAt = lastPostedAt;
  }


  public UsersGetUserByUsernameResponseUser lastSeenAt(Object lastSeenAt) {
    
    
    
    
    this.lastSeenAt = lastSeenAt;
    return this;
  }

   /**
   * Get lastSeenAt
   * @return lastSeenAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "")

  public Object getLastSeenAt() {
    return lastSeenAt;
  }


  public void setLastSeenAt(Object lastSeenAt) {
    
    
    
    this.lastSeenAt = lastSeenAt;
  }


  public UsersGetUserByUsernameResponseUser createdAt(String createdAt) {
    
    
    
    
    this.createdAt = createdAt;
    return this;
  }

   /**
   * Get createdAt
   * @return createdAt
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getCreatedAt() {
    return createdAt;
  }


  public void setCreatedAt(String createdAt) {
    
    
    
    this.createdAt = createdAt;
  }


  public UsersGetUserByUsernameResponseUser ignored(Boolean ignored) {
    
    
    
    
    this.ignored = ignored;
    return this;
  }

   /**
   * Get ignored
   * @return ignored
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Boolean getIgnored() {
    return ignored;
  }


  public void setIgnored(Boolean ignored) {
    
    
    
    this.ignored = ignored;
  }


  public UsersGetUserByUsernameResponseUser muted(Boolean muted) {
    
    
    
    
    this.muted = muted;
    return this;
  }

   /**
   * Get muted
   * @return muted
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Boolean getMuted() {
    return muted;
  }


  public void setMuted(Boolean muted) {
    
    
    
    this.muted = muted;
  }


  public UsersGetUserByUsernameResponseUser canIgnoreUser(Boolean canIgnoreUser) {
    
    
    
    
    this.canIgnoreUser = canIgnoreUser;
    return this;
  }

   /**
   * Get canIgnoreUser
   * @return canIgnoreUser
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Boolean getCanIgnoreUser() {
    return canIgnoreUser;
  }


  public void setCanIgnoreUser(Boolean canIgnoreUser) {
    
    
    
    this.canIgnoreUser = canIgnoreUser;
  }


  public UsersGetUserByUsernameResponseUser canMuteUser(Boolean canMuteUser) {
    
    
    
    
    this.canMuteUser = canMuteUser;
    return this;
  }

   /**
   * Get canMuteUser
   * @return canMuteUser
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Boolean getCanMuteUser() {
    return canMuteUser;
  }


  public void setCanMuteUser(Boolean canMuteUser) {
    
    
    
    this.canMuteUser = canMuteUser;
  }


  public UsersGetUserByUsernameResponseUser canSendPrivateMessages(Boolean canSendPrivateMessages) {
    
    
    
    
    this.canSendPrivateMessages = canSendPrivateMessages;
    return this;
  }

   /**
   * Get canSendPrivateMessages
   * @return canSendPrivateMessages
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Boolean getCanSendPrivateMessages() {
    return canSendPrivateMessages;
  }


  public void setCanSendPrivateMessages(Boolean canSendPrivateMessages) {
    
    
    
    this.canSendPrivateMessages = canSendPrivateMessages;
  }


  public UsersGetUserByUsernameResponseUser canSendPrivateMessageToUser(Boolean canSendPrivateMessageToUser) {
    
    
    
    
    this.canSendPrivateMessageToUser = canSendPrivateMessageToUser;
    return this;
  }

   /**
   * Get canSendPrivateMessageToUser
   * @return canSendPrivateMessageToUser
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Boolean getCanSendPrivateMessageToUser() {
    return canSendPrivateMessageToUser;
  }


  public void setCanSendPrivateMessageToUser(Boolean canSendPrivateMessageToUser) {
    
    
    
    this.canSendPrivateMessageToUser = canSendPrivateMessageToUser;
  }


  public UsersGetUserByUsernameResponseUser trustLevel(Integer trustLevel) {
    
    
    
    
    this.trustLevel = trustLevel;
    return this;
  }

   /**
   * Get trustLevel
   * @return trustLevel
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Integer getTrustLevel() {
    return trustLevel;
  }


  public void setTrustLevel(Integer trustLevel) {
    
    
    
    this.trustLevel = trustLevel;
  }


  public UsersGetUserByUsernameResponseUser moderator(Boolean moderator) {
    
    
    
    
    this.moderator = moderator;
    return this;
  }

   /**
   * Get moderator
   * @return moderator
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Boolean getModerator() {
    return moderator;
  }


  public void setModerator(Boolean moderator) {
    
    
    
    this.moderator = moderator;
  }


  public UsersGetUserByUsernameResponseUser admin(Boolean admin) {
    
    
    
    
    this.admin = admin;
    return this;
  }

   /**
   * Get admin
   * @return admin
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Boolean getAdmin() {
    return admin;
  }


  public void setAdmin(Boolean admin) {
    
    
    
    this.admin = admin;
  }


  public UsersGetUserByUsernameResponseUser badgeCount(Integer badgeCount) {
    
    
    
    
    this.badgeCount = badgeCount;
    return this;
  }

   /**
   * Get badgeCount
   * @return badgeCount
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Integer getBadgeCount() {
    return badgeCount;
  }


  public void setBadgeCount(Integer badgeCount) {
    
    
    
    this.badgeCount = badgeCount;
  }


  public UsersGetUserByUsernameResponseUser secondFactorBackupEnabled(Boolean secondFactorBackupEnabled) {
    
    
    
    
    this.secondFactorBackupEnabled = secondFactorBackupEnabled;
    return this;
  }

   /**
   * Get secondFactorBackupEnabled
   * @return secondFactorBackupEnabled
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getSecondFactorBackupEnabled() {
    return secondFactorBackupEnabled;
  }


  public void setSecondFactorBackupEnabled(Boolean secondFactorBackupEnabled) {
    
    
    
    this.secondFactorBackupEnabled = secondFactorBackupEnabled;
  }


  public UsersGetUserByUsernameResponseUser userFields(UsersGetUserByUsernameResponseUserUserFields userFields) {
    
    
    
    
    this.userFields = userFields;
    return this;
  }

   /**
   * Get userFields
   * @return userFields
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public UsersGetUserByUsernameResponseUserUserFields getUserFields() {
    return userFields;
  }


  public void setUserFields(UsersGetUserByUsernameResponseUserUserFields userFields) {
    
    
    
    this.userFields = userFields;
  }


  public UsersGetUserByUsernameResponseUser customFields(UsersGetUserByUsernameResponseUserCustomFields customFields) {
    
    
    
    
    this.customFields = customFields;
    return this;
  }

   /**
   * Get customFields
   * @return customFields
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public UsersGetUserByUsernameResponseUserCustomFields getCustomFields() {
    return customFields;
  }


  public void setCustomFields(UsersGetUserByUsernameResponseUserCustomFields customFields) {
    
    
    
    this.customFields = customFields;
  }


  public UsersGetUserByUsernameResponseUser timeRead(Integer timeRead) {
    
    
    
    
    this.timeRead = timeRead;
    return this;
  }

   /**
   * Get timeRead
   * @return timeRead
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Integer getTimeRead() {
    return timeRead;
  }


  public void setTimeRead(Integer timeRead) {
    
    
    
    this.timeRead = timeRead;
  }


  public UsersGetUserByUsernameResponseUser recentTimeRead(Integer recentTimeRead) {
    
    
    
    
    this.recentTimeRead = recentTimeRead;
    return this;
  }

   /**
   * Get recentTimeRead
   * @return recentTimeRead
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Integer getRecentTimeRead() {
    return recentTimeRead;
  }


  public void setRecentTimeRead(Integer recentTimeRead) {
    
    
    
    this.recentTimeRead = recentTimeRead;
  }


  public UsersGetUserByUsernameResponseUser primaryGroupId(Object primaryGroupId) {
    
    
    
    
    this.primaryGroupId = primaryGroupId;
    return this;
  }

   /**
   * Get primaryGroupId
   * @return primaryGroupId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "")

  public Object getPrimaryGroupId() {
    return primaryGroupId;
  }


  public void setPrimaryGroupId(Object primaryGroupId) {
    
    
    
    this.primaryGroupId = primaryGroupId;
  }


  public UsersGetUserByUsernameResponseUser primaryGroupName(Object primaryGroupName) {
    
    
    
    
    this.primaryGroupName = primaryGroupName;
    return this;
  }

   /**
   * Get primaryGroupName
   * @return primaryGroupName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "")

  public Object getPrimaryGroupName() {
    return primaryGroupName;
  }


  public void setPrimaryGroupName(Object primaryGroupName) {
    
    
    
    this.primaryGroupName = primaryGroupName;
  }


  public UsersGetUserByUsernameResponseUser flairGroupId(Object flairGroupId) {
    
    
    
    
    this.flairGroupId = flairGroupId;
    return this;
  }

   /**
   * Get flairGroupId
   * @return flairGroupId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "")

  public Object getFlairGroupId() {
    return flairGroupId;
  }


  public void setFlairGroupId(Object flairGroupId) {
    
    
    
    this.flairGroupId = flairGroupId;
  }


  public UsersGetUserByUsernameResponseUser flairName(Object flairName) {
    
    
    
    
    this.flairName = flairName;
    return this;
  }

   /**
   * Get flairName
   * @return flairName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "")

  public Object getFlairName() {
    return flairName;
  }


  public void setFlairName(Object flairName) {
    
    
    
    this.flairName = flairName;
  }


  public UsersGetUserByUsernameResponseUser flairUrl(Object flairUrl) {
    
    
    
    
    this.flairUrl = flairUrl;
    return this;
  }

   /**
   * Get flairUrl
   * @return flairUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "")

  public Object getFlairUrl() {
    return flairUrl;
  }


  public void setFlairUrl(Object flairUrl) {
    
    
    
    this.flairUrl = flairUrl;
  }


  public UsersGetUserByUsernameResponseUser flairBgColor(Object flairBgColor) {
    
    
    
    
    this.flairBgColor = flairBgColor;
    return this;
  }

   /**
   * Get flairBgColor
   * @return flairBgColor
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "")

  public Object getFlairBgColor() {
    return flairBgColor;
  }


  public void setFlairBgColor(Object flairBgColor) {
    
    
    
    this.flairBgColor = flairBgColor;
  }


  public UsersGetUserByUsernameResponseUser flairColor(Object flairColor) {
    
    
    
    
    this.flairColor = flairColor;
    return this;
  }

   /**
   * Get flairColor
   * @return flairColor
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "")

  public Object getFlairColor() {
    return flairColor;
  }


  public void setFlairColor(Object flairColor) {
    
    
    
    this.flairColor = flairColor;
  }


  public UsersGetUserByUsernameResponseUser featuredTopic(Object featuredTopic) {
    
    
    
    
    this.featuredTopic = featuredTopic;
    return this;
  }

   /**
   * Get featuredTopic
   * @return featuredTopic
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "")

  public Object getFeaturedTopic() {
    return featuredTopic;
  }


  public void setFeaturedTopic(Object featuredTopic) {
    
    
    
    this.featuredTopic = featuredTopic;
  }


  public UsersGetUserByUsernameResponseUser staged(Boolean staged) {
    
    
    
    
    this.staged = staged;
    return this;
  }

   /**
   * Get staged
   * @return staged
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Boolean getStaged() {
    return staged;
  }


  public void setStaged(Boolean staged) {
    
    
    
    this.staged = staged;
  }


  public UsersGetUserByUsernameResponseUser canEdit(Boolean canEdit) {
    
    
    
    
    this.canEdit = canEdit;
    return this;
  }

   /**
   * Get canEdit
   * @return canEdit
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Boolean getCanEdit() {
    return canEdit;
  }


  public void setCanEdit(Boolean canEdit) {
    
    
    
    this.canEdit = canEdit;
  }


  public UsersGetUserByUsernameResponseUser canEditUsername(Boolean canEditUsername) {
    
    
    
    
    this.canEditUsername = canEditUsername;
    return this;
  }

   /**
   * Get canEditUsername
   * @return canEditUsername
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Boolean getCanEditUsername() {
    return canEditUsername;
  }


  public void setCanEditUsername(Boolean canEditUsername) {
    
    
    
    this.canEditUsername = canEditUsername;
  }


  public UsersGetUserByUsernameResponseUser canEditEmail(Boolean canEditEmail) {
    
    
    
    
    this.canEditEmail = canEditEmail;
    return this;
  }

   /**
   * Get canEditEmail
   * @return canEditEmail
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Boolean getCanEditEmail() {
    return canEditEmail;
  }


  public void setCanEditEmail(Boolean canEditEmail) {
    
    
    
    this.canEditEmail = canEditEmail;
  }


  public UsersGetUserByUsernameResponseUser canEditName(Boolean canEditName) {
    
    
    
    
    this.canEditName = canEditName;
    return this;
  }

   /**
   * Get canEditName
   * @return canEditName
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Boolean getCanEditName() {
    return canEditName;
  }


  public void setCanEditName(Boolean canEditName) {
    
    
    
    this.canEditName = canEditName;
  }


  public UsersGetUserByUsernameResponseUser uploadedAvatarId(Object uploadedAvatarId) {
    
    
    
    
    this.uploadedAvatarId = uploadedAvatarId;
    return this;
  }

   /**
   * Get uploadedAvatarId
   * @return uploadedAvatarId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "")

  public Object getUploadedAvatarId() {
    return uploadedAvatarId;
  }


  public void setUploadedAvatarId(Object uploadedAvatarId) {
    
    
    
    this.uploadedAvatarId = uploadedAvatarId;
  }


  public UsersGetUserByUsernameResponseUser hasTitleBadges(Boolean hasTitleBadges) {
    
    
    
    
    this.hasTitleBadges = hasTitleBadges;
    return this;
  }

   /**
   * Get hasTitleBadges
   * @return hasTitleBadges
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Boolean getHasTitleBadges() {
    return hasTitleBadges;
  }


  public void setHasTitleBadges(Boolean hasTitleBadges) {
    
    
    
    this.hasTitleBadges = hasTitleBadges;
  }


  public UsersGetUserByUsernameResponseUser pendingCount(Integer pendingCount) {
    
    
    
    
    this.pendingCount = pendingCount;
    return this;
  }

   /**
   * Get pendingCount
   * @return pendingCount
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Integer getPendingCount() {
    return pendingCount;
  }


  public void setPendingCount(Integer pendingCount) {
    
    
    
    this.pendingCount = pendingCount;
  }


  public UsersGetUserByUsernameResponseUser pendingPostsCount(Integer pendingPostsCount) {
    
    
    
    
    this.pendingPostsCount = pendingPostsCount;
    return this;
  }

   /**
   * Get pendingPostsCount
   * @return pendingPostsCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getPendingPostsCount() {
    return pendingPostsCount;
  }


  public void setPendingPostsCount(Integer pendingPostsCount) {
    
    
    
    this.pendingPostsCount = pendingPostsCount;
  }


  public UsersGetUserByUsernameResponseUser profileViewCount(Integer profileViewCount) {
    
    
    
    
    this.profileViewCount = profileViewCount;
    return this;
  }

   /**
   * Get profileViewCount
   * @return profileViewCount
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Integer getProfileViewCount() {
    return profileViewCount;
  }


  public void setProfileViewCount(Integer profileViewCount) {
    
    
    
    this.profileViewCount = profileViewCount;
  }


  public UsersGetUserByUsernameResponseUser secondFactorEnabled(Boolean secondFactorEnabled) {
    
    
    
    
    this.secondFactorEnabled = secondFactorEnabled;
    return this;
  }

   /**
   * Get secondFactorEnabled
   * @return secondFactorEnabled
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Boolean getSecondFactorEnabled() {
    return secondFactorEnabled;
  }


  public void setSecondFactorEnabled(Boolean secondFactorEnabled) {
    
    
    
    this.secondFactorEnabled = secondFactorEnabled;
  }


  public UsersGetUserByUsernameResponseUser canUploadProfileHeader(Boolean canUploadProfileHeader) {
    
    
    
    
    this.canUploadProfileHeader = canUploadProfileHeader;
    return this;
  }

   /**
   * Get canUploadProfileHeader
   * @return canUploadProfileHeader
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Boolean getCanUploadProfileHeader() {
    return canUploadProfileHeader;
  }


  public void setCanUploadProfileHeader(Boolean canUploadProfileHeader) {
    
    
    
    this.canUploadProfileHeader = canUploadProfileHeader;
  }


  public UsersGetUserByUsernameResponseUser canUploadUserCardBackground(Boolean canUploadUserCardBackground) {
    
    
    
    
    this.canUploadUserCardBackground = canUploadUserCardBackground;
    return this;
  }

   /**
   * Get canUploadUserCardBackground
   * @return canUploadUserCardBackground
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Boolean getCanUploadUserCardBackground() {
    return canUploadUserCardBackground;
  }


  public void setCanUploadUserCardBackground(Boolean canUploadUserCardBackground) {
    
    
    
    this.canUploadUserCardBackground = canUploadUserCardBackground;
  }


  public UsersGetUserByUsernameResponseUser postCount(Integer postCount) {
    
    
    
    
    this.postCount = postCount;
    return this;
  }

   /**
   * Get postCount
   * @return postCount
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Integer getPostCount() {
    return postCount;
  }


  public void setPostCount(Integer postCount) {
    
    
    
    this.postCount = postCount;
  }


  public UsersGetUserByUsernameResponseUser canBeDeleted(Boolean canBeDeleted) {
    
    
    
    
    this.canBeDeleted = canBeDeleted;
    return this;
  }

   /**
   * Get canBeDeleted
   * @return canBeDeleted
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Boolean getCanBeDeleted() {
    return canBeDeleted;
  }


  public void setCanBeDeleted(Boolean canBeDeleted) {
    
    
    
    this.canBeDeleted = canBeDeleted;
  }


  public UsersGetUserByUsernameResponseUser canDeleteAllPosts(Boolean canDeleteAllPosts) {
    
    
    
    
    this.canDeleteAllPosts = canDeleteAllPosts;
    return this;
  }

   /**
   * Get canDeleteAllPosts
   * @return canDeleteAllPosts
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Boolean getCanDeleteAllPosts() {
    return canDeleteAllPosts;
  }


  public void setCanDeleteAllPosts(Boolean canDeleteAllPosts) {
    
    
    
    this.canDeleteAllPosts = canDeleteAllPosts;
  }


  public UsersGetUserByUsernameResponseUser locale(Object locale) {
    
    
    
    
    this.locale = locale;
    return this;
  }

   /**
   * Get locale
   * @return locale
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "")

  public Object getLocale() {
    return locale;
  }


  public void setLocale(Object locale) {
    
    
    
    this.locale = locale;
  }


  public UsersGetUserByUsernameResponseUser mutedCategoryIds(List<Object> mutedCategoryIds) {
    
    
    
    
    this.mutedCategoryIds = mutedCategoryIds;
    return this;
  }

  public UsersGetUserByUsernameResponseUser addMutedCategoryIdsItem(Object mutedCategoryIdsItem) {
    this.mutedCategoryIds.add(mutedCategoryIdsItem);
    return this;
  }

   /**
   * Get mutedCategoryIds
   * @return mutedCategoryIds
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<Object> getMutedCategoryIds() {
    return mutedCategoryIds;
  }


  public void setMutedCategoryIds(List<Object> mutedCategoryIds) {
    
    
    
    this.mutedCategoryIds = mutedCategoryIds;
  }


  public UsersGetUserByUsernameResponseUser regularCategoryIds(List<Object> regularCategoryIds) {
    
    
    
    
    this.regularCategoryIds = regularCategoryIds;
    return this;
  }

  public UsersGetUserByUsernameResponseUser addRegularCategoryIdsItem(Object regularCategoryIdsItem) {
    this.regularCategoryIds.add(regularCategoryIdsItem);
    return this;
  }

   /**
   * Get regularCategoryIds
   * @return regularCategoryIds
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<Object> getRegularCategoryIds() {
    return regularCategoryIds;
  }


  public void setRegularCategoryIds(List<Object> regularCategoryIds) {
    
    
    
    this.regularCategoryIds = regularCategoryIds;
  }


  public UsersGetUserByUsernameResponseUser watchedTags(List<Object> watchedTags) {
    
    
    
    
    this.watchedTags = watchedTags;
    return this;
  }

  public UsersGetUserByUsernameResponseUser addWatchedTagsItem(Object watchedTagsItem) {
    this.watchedTags.add(watchedTagsItem);
    return this;
  }

   /**
   * Get watchedTags
   * @return watchedTags
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<Object> getWatchedTags() {
    return watchedTags;
  }


  public void setWatchedTags(List<Object> watchedTags) {
    
    
    
    this.watchedTags = watchedTags;
  }


  public UsersGetUserByUsernameResponseUser watchingFirstPostTags(List<Object> watchingFirstPostTags) {
    
    
    
    
    this.watchingFirstPostTags = watchingFirstPostTags;
    return this;
  }

  public UsersGetUserByUsernameResponseUser addWatchingFirstPostTagsItem(Object watchingFirstPostTagsItem) {
    this.watchingFirstPostTags.add(watchingFirstPostTagsItem);
    return this;
  }

   /**
   * Get watchingFirstPostTags
   * @return watchingFirstPostTags
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<Object> getWatchingFirstPostTags() {
    return watchingFirstPostTags;
  }


  public void setWatchingFirstPostTags(List<Object> watchingFirstPostTags) {
    
    
    
    this.watchingFirstPostTags = watchingFirstPostTags;
  }


  public UsersGetUserByUsernameResponseUser trackedTags(List<Object> trackedTags) {
    
    
    
    
    this.trackedTags = trackedTags;
    return this;
  }

  public UsersGetUserByUsernameResponseUser addTrackedTagsItem(Object trackedTagsItem) {
    this.trackedTags.add(trackedTagsItem);
    return this;
  }

   /**
   * Get trackedTags
   * @return trackedTags
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<Object> getTrackedTags() {
    return trackedTags;
  }


  public void setTrackedTags(List<Object> trackedTags) {
    
    
    
    this.trackedTags = trackedTags;
  }


  public UsersGetUserByUsernameResponseUser mutedTags(List<Object> mutedTags) {
    
    
    
    
    this.mutedTags = mutedTags;
    return this;
  }

  public UsersGetUserByUsernameResponseUser addMutedTagsItem(Object mutedTagsItem) {
    this.mutedTags.add(mutedTagsItem);
    return this;
  }

   /**
   * Get mutedTags
   * @return mutedTags
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<Object> getMutedTags() {
    return mutedTags;
  }


  public void setMutedTags(List<Object> mutedTags) {
    
    
    
    this.mutedTags = mutedTags;
  }


  public UsersGetUserByUsernameResponseUser trackedCategoryIds(List<Object> trackedCategoryIds) {
    
    
    
    
    this.trackedCategoryIds = trackedCategoryIds;
    return this;
  }

  public UsersGetUserByUsernameResponseUser addTrackedCategoryIdsItem(Object trackedCategoryIdsItem) {
    this.trackedCategoryIds.add(trackedCategoryIdsItem);
    return this;
  }

   /**
   * Get trackedCategoryIds
   * @return trackedCategoryIds
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<Object> getTrackedCategoryIds() {
    return trackedCategoryIds;
  }


  public void setTrackedCategoryIds(List<Object> trackedCategoryIds) {
    
    
    
    this.trackedCategoryIds = trackedCategoryIds;
  }


  public UsersGetUserByUsernameResponseUser watchedCategoryIds(List<Object> watchedCategoryIds) {
    
    
    
    
    this.watchedCategoryIds = watchedCategoryIds;
    return this;
  }

  public UsersGetUserByUsernameResponseUser addWatchedCategoryIdsItem(Object watchedCategoryIdsItem) {
    this.watchedCategoryIds.add(watchedCategoryIdsItem);
    return this;
  }

   /**
   * Get watchedCategoryIds
   * @return watchedCategoryIds
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<Object> getWatchedCategoryIds() {
    return watchedCategoryIds;
  }


  public void setWatchedCategoryIds(List<Object> watchedCategoryIds) {
    
    
    
    this.watchedCategoryIds = watchedCategoryIds;
  }


  public UsersGetUserByUsernameResponseUser watchedFirstPostCategoryIds(List<Object> watchedFirstPostCategoryIds) {
    
    
    
    
    this.watchedFirstPostCategoryIds = watchedFirstPostCategoryIds;
    return this;
  }

  public UsersGetUserByUsernameResponseUser addWatchedFirstPostCategoryIdsItem(Object watchedFirstPostCategoryIdsItem) {
    this.watchedFirstPostCategoryIds.add(watchedFirstPostCategoryIdsItem);
    return this;
  }

   /**
   * Get watchedFirstPostCategoryIds
   * @return watchedFirstPostCategoryIds
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<Object> getWatchedFirstPostCategoryIds() {
    return watchedFirstPostCategoryIds;
  }


  public void setWatchedFirstPostCategoryIds(List<Object> watchedFirstPostCategoryIds) {
    
    
    
    this.watchedFirstPostCategoryIds = watchedFirstPostCategoryIds;
  }


  public UsersGetUserByUsernameResponseUser systemAvatarUploadId(Object systemAvatarUploadId) {
    
    
    
    
    this.systemAvatarUploadId = systemAvatarUploadId;
    return this;
  }

   /**
   * Get systemAvatarUploadId
   * @return systemAvatarUploadId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "")

  public Object getSystemAvatarUploadId() {
    return systemAvatarUploadId;
  }


  public void setSystemAvatarUploadId(Object systemAvatarUploadId) {
    
    
    
    this.systemAvatarUploadId = systemAvatarUploadId;
  }


  public UsersGetUserByUsernameResponseUser systemAvatarTemplate(String systemAvatarTemplate) {
    
    
    
    
    this.systemAvatarTemplate = systemAvatarTemplate;
    return this;
  }

   /**
   * Get systemAvatarTemplate
   * @return systemAvatarTemplate
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getSystemAvatarTemplate() {
    return systemAvatarTemplate;
  }


  public void setSystemAvatarTemplate(String systemAvatarTemplate) {
    
    
    
    this.systemAvatarTemplate = systemAvatarTemplate;
  }


  public UsersGetUserByUsernameResponseUser mutedUsernames(List<Object> mutedUsernames) {
    
    
    
    
    this.mutedUsernames = mutedUsernames;
    return this;
  }

  public UsersGetUserByUsernameResponseUser addMutedUsernamesItem(Object mutedUsernamesItem) {
    this.mutedUsernames.add(mutedUsernamesItem);
    return this;
  }

   /**
   * Get mutedUsernames
   * @return mutedUsernames
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<Object> getMutedUsernames() {
    return mutedUsernames;
  }


  public void setMutedUsernames(List<Object> mutedUsernames) {
    
    
    
    this.mutedUsernames = mutedUsernames;
  }


  public UsersGetUserByUsernameResponseUser ignoredUsernames(List<Object> ignoredUsernames) {
    
    
    
    
    this.ignoredUsernames = ignoredUsernames;
    return this;
  }

  public UsersGetUserByUsernameResponseUser addIgnoredUsernamesItem(Object ignoredUsernamesItem) {
    this.ignoredUsernames.add(ignoredUsernamesItem);
    return this;
  }

   /**
   * Get ignoredUsernames
   * @return ignoredUsernames
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<Object> getIgnoredUsernames() {
    return ignoredUsernames;
  }


  public void setIgnoredUsernames(List<Object> ignoredUsernames) {
    
    
    
    this.ignoredUsernames = ignoredUsernames;
  }


  public UsersGetUserByUsernameResponseUser allowedPmUsernames(List<Object> allowedPmUsernames) {
    
    
    
    
    this.allowedPmUsernames = allowedPmUsernames;
    return this;
  }

  public UsersGetUserByUsernameResponseUser addAllowedPmUsernamesItem(Object allowedPmUsernamesItem) {
    this.allowedPmUsernames.add(allowedPmUsernamesItem);
    return this;
  }

   /**
   * Get allowedPmUsernames
   * @return allowedPmUsernames
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<Object> getAllowedPmUsernames() {
    return allowedPmUsernames;
  }


  public void setAllowedPmUsernames(List<Object> allowedPmUsernames) {
    
    
    
    this.allowedPmUsernames = allowedPmUsernames;
  }


  public UsersGetUserByUsernameResponseUser mailingListPostsPerDay(Integer mailingListPostsPerDay) {
    
    
    
    
    this.mailingListPostsPerDay = mailingListPostsPerDay;
    return this;
  }

   /**
   * Get mailingListPostsPerDay
   * @return mailingListPostsPerDay
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Integer getMailingListPostsPerDay() {
    return mailingListPostsPerDay;
  }


  public void setMailingListPostsPerDay(Integer mailingListPostsPerDay) {
    
    
    
    this.mailingListPostsPerDay = mailingListPostsPerDay;
  }


  public UsersGetUserByUsernameResponseUser canChangeBio(Boolean canChangeBio) {
    
    
    
    
    this.canChangeBio = canChangeBio;
    return this;
  }

   /**
   * Get canChangeBio
   * @return canChangeBio
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Boolean getCanChangeBio() {
    return canChangeBio;
  }


  public void setCanChangeBio(Boolean canChangeBio) {
    
    
    
    this.canChangeBio = canChangeBio;
  }


  public UsersGetUserByUsernameResponseUser canChangeLocation(Boolean canChangeLocation) {
    
    
    
    
    this.canChangeLocation = canChangeLocation;
    return this;
  }

   /**
   * Get canChangeLocation
   * @return canChangeLocation
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Boolean getCanChangeLocation() {
    return canChangeLocation;
  }


  public void setCanChangeLocation(Boolean canChangeLocation) {
    
    
    
    this.canChangeLocation = canChangeLocation;
  }


  public UsersGetUserByUsernameResponseUser canChangeWebsite(Boolean canChangeWebsite) {
    
    
    
    
    this.canChangeWebsite = canChangeWebsite;
    return this;
  }

   /**
   * Get canChangeWebsite
   * @return canChangeWebsite
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Boolean getCanChangeWebsite() {
    return canChangeWebsite;
  }


  public void setCanChangeWebsite(Boolean canChangeWebsite) {
    
    
    
    this.canChangeWebsite = canChangeWebsite;
  }


  public UsersGetUserByUsernameResponseUser canChangeTrackingPreferences(Boolean canChangeTrackingPreferences) {
    
    
    
    
    this.canChangeTrackingPreferences = canChangeTrackingPreferences;
    return this;
  }

   /**
   * Get canChangeTrackingPreferences
   * @return canChangeTrackingPreferences
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Boolean getCanChangeTrackingPreferences() {
    return canChangeTrackingPreferences;
  }


  public void setCanChangeTrackingPreferences(Boolean canChangeTrackingPreferences) {
    
    
    
    this.canChangeTrackingPreferences = canChangeTrackingPreferences;
  }


  public UsersGetUserByUsernameResponseUser userApiKeys(Object userApiKeys) {
    
    
    
    
    this.userApiKeys = userApiKeys;
    return this;
  }

   /**
   * Get userApiKeys
   * @return userApiKeys
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "")

  public Object getUserApiKeys() {
    return userApiKeys;
  }


  public void setUserApiKeys(Object userApiKeys) {
    
    
    
    this.userApiKeys = userApiKeys;
  }


  public UsersGetUserByUsernameResponseUser userPasskeys(List userPasskeys) {
    
    
    
    
    this.userPasskeys = userPasskeys;
    return this;
  }

   /**
   * Get userPasskeys
   * @return userPasskeys
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List getUserPasskeys() {
    return userPasskeys;
  }


  public void setUserPasskeys(List userPasskeys) {
    
    
    
    this.userPasskeys = userPasskeys;
  }


  public UsersGetUserByUsernameResponseUser sidebarTags(List sidebarTags) {
    
    
    
    
    this.sidebarTags = sidebarTags;
    return this;
  }

   /**
   * Get sidebarTags
   * @return sidebarTags
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List getSidebarTags() {
    return sidebarTags;
  }


  public void setSidebarTags(List sidebarTags) {
    
    
    
    this.sidebarTags = sidebarTags;
  }


  public UsersGetUserByUsernameResponseUser sidebarCategoryIds(List sidebarCategoryIds) {
    
    
    
    
    this.sidebarCategoryIds = sidebarCategoryIds;
    return this;
  }

   /**
   * Get sidebarCategoryIds
   * @return sidebarCategoryIds
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List getSidebarCategoryIds() {
    return sidebarCategoryIds;
  }


  public void setSidebarCategoryIds(List sidebarCategoryIds) {
    
    
    
    this.sidebarCategoryIds = sidebarCategoryIds;
  }


  public UsersGetUserByUsernameResponseUser displaySidebarTags(Boolean displaySidebarTags) {
    
    
    
    
    this.displaySidebarTags = displaySidebarTags;
    return this;
  }

   /**
   * Get displaySidebarTags
   * @return displaySidebarTags
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getDisplaySidebarTags() {
    return displaySidebarTags;
  }


  public void setDisplaySidebarTags(Boolean displaySidebarTags) {
    
    
    
    this.displaySidebarTags = displaySidebarTags;
  }


  public UsersGetUserByUsernameResponseUser userAuthTokens(List<UsersGetUserByUsernameResponseUserUserAuthTokensInner> userAuthTokens) {
    
    
    
    
    this.userAuthTokens = userAuthTokens;
    return this;
  }

  public UsersGetUserByUsernameResponseUser addUserAuthTokensItem(UsersGetUserByUsernameResponseUserUserAuthTokensInner userAuthTokensItem) {
    this.userAuthTokens.add(userAuthTokensItem);
    return this;
  }

   /**
   * Get userAuthTokens
   * @return userAuthTokens
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<UsersGetUserByUsernameResponseUserUserAuthTokensInner> getUserAuthTokens() {
    return userAuthTokens;
  }


  public void setUserAuthTokens(List<UsersGetUserByUsernameResponseUserUserAuthTokensInner> userAuthTokens) {
    
    
    
    this.userAuthTokens = userAuthTokens;
  }


  public UsersGetUserByUsernameResponseUser userNotificationSchedule(UsersGetUserByUsernameResponseUserUserNotificationSchedule userNotificationSchedule) {
    
    
    
    
    this.userNotificationSchedule = userNotificationSchedule;
    return this;
  }

   /**
   * Get userNotificationSchedule
   * @return userNotificationSchedule
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public UsersGetUserByUsernameResponseUserUserNotificationSchedule getUserNotificationSchedule() {
    return userNotificationSchedule;
  }


  public void setUserNotificationSchedule(UsersGetUserByUsernameResponseUserUserNotificationSchedule userNotificationSchedule) {
    
    
    
    this.userNotificationSchedule = userNotificationSchedule;
  }


  public UsersGetUserByUsernameResponseUser useLogoSmallAsAvatar(Boolean useLogoSmallAsAvatar) {
    
    
    
    
    this.useLogoSmallAsAvatar = useLogoSmallAsAvatar;
    return this;
  }

   /**
   * Get useLogoSmallAsAvatar
   * @return useLogoSmallAsAvatar
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Boolean getUseLogoSmallAsAvatar() {
    return useLogoSmallAsAvatar;
  }


  public void setUseLogoSmallAsAvatar(Boolean useLogoSmallAsAvatar) {
    
    
    
    this.useLogoSmallAsAvatar = useLogoSmallAsAvatar;
  }


  public UsersGetUserByUsernameResponseUser featuredUserBadgeIds(List<Object> featuredUserBadgeIds) {
    
    
    
    
    this.featuredUserBadgeIds = featuredUserBadgeIds;
    return this;
  }

  public UsersGetUserByUsernameResponseUser addFeaturedUserBadgeIdsItem(Object featuredUserBadgeIdsItem) {
    this.featuredUserBadgeIds.add(featuredUserBadgeIdsItem);
    return this;
  }

   /**
   * Get featuredUserBadgeIds
   * @return featuredUserBadgeIds
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<Object> getFeaturedUserBadgeIds() {
    return featuredUserBadgeIds;
  }


  public void setFeaturedUserBadgeIds(List<Object> featuredUserBadgeIds) {
    
    
    
    this.featuredUserBadgeIds = featuredUserBadgeIds;
  }


  public UsersGetUserByUsernameResponseUser invitedBy(Object invitedBy) {
    
    
    
    
    this.invitedBy = invitedBy;
    return this;
  }

   /**
   * Get invitedBy
   * @return invitedBy
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "")

  public Object getInvitedBy() {
    return invitedBy;
  }


  public void setInvitedBy(Object invitedBy) {
    
    
    
    this.invitedBy = invitedBy;
  }


  public UsersGetUserByUsernameResponseUser groups(List<UsersGetUserByUsernameResponseUserGroupsInner> groups) {
    
    
    
    
    this.groups = groups;
    return this;
  }

  public UsersGetUserByUsernameResponseUser addGroupsItem(UsersGetUserByUsernameResponseUserGroupsInner groupsItem) {
    this.groups.add(groupsItem);
    return this;
  }

   /**
   * Get groups
   * @return groups
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<UsersGetUserByUsernameResponseUserGroupsInner> getGroups() {
    return groups;
  }


  public void setGroups(List<UsersGetUserByUsernameResponseUserGroupsInner> groups) {
    
    
    
    this.groups = groups;
  }


  public UsersGetUserByUsernameResponseUser groupUsers(List<UsersGetUserByUsernameResponseUserGroupUsersInner> groupUsers) {
    
    
    
    
    this.groupUsers = groupUsers;
    return this;
  }

  public UsersGetUserByUsernameResponseUser addGroupUsersItem(UsersGetUserByUsernameResponseUserGroupUsersInner groupUsersItem) {
    this.groupUsers.add(groupUsersItem);
    return this;
  }

   /**
   * Get groupUsers
   * @return groupUsers
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<UsersGetUserByUsernameResponseUserGroupUsersInner> getGroupUsers() {
    return groupUsers;
  }


  public void setGroupUsers(List<UsersGetUserByUsernameResponseUserGroupUsersInner> groupUsers) {
    
    
    
    this.groupUsers = groupUsers;
  }


  public UsersGetUserByUsernameResponseUser userOption(UsersGetUserByUsernameResponseUserUserOption userOption) {
    
    
    
    
    this.userOption = userOption;
    return this;
  }

   /**
   * Get userOption
   * @return userOption
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public UsersGetUserByUsernameResponseUserUserOption getUserOption() {
    return userOption;
  }


  public void setUserOption(UsersGetUserByUsernameResponseUserUserOption userOption) {
    
    
    
    this.userOption = userOption;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the UsersGetUserByUsernameResponseUser instance itself
   */
  public UsersGetUserByUsernameResponseUser putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UsersGetUserByUsernameResponseUser usersGetUserByUsernameResponseUser = (UsersGetUserByUsernameResponseUser) o;
    return Objects.equals(this.title, usersGetUserByUsernameResponseUser.title) &&
        Objects.equals(this.id, usersGetUserByUsernameResponseUser.id) &&
        Objects.equals(this.username, usersGetUserByUsernameResponseUser.username) &&
        Objects.equals(this.name, usersGetUserByUsernameResponseUser.name) &&
        Objects.equals(this.avatarTemplate, usersGetUserByUsernameResponseUser.avatarTemplate) &&
        Objects.equals(this.lastPostedAt, usersGetUserByUsernameResponseUser.lastPostedAt) &&
        Objects.equals(this.lastSeenAt, usersGetUserByUsernameResponseUser.lastSeenAt) &&
        Objects.equals(this.createdAt, usersGetUserByUsernameResponseUser.createdAt) &&
        Objects.equals(this.ignored, usersGetUserByUsernameResponseUser.ignored) &&
        Objects.equals(this.muted, usersGetUserByUsernameResponseUser.muted) &&
        Objects.equals(this.canIgnoreUser, usersGetUserByUsernameResponseUser.canIgnoreUser) &&
        Objects.equals(this.canMuteUser, usersGetUserByUsernameResponseUser.canMuteUser) &&
        Objects.equals(this.canSendPrivateMessages, usersGetUserByUsernameResponseUser.canSendPrivateMessages) &&
        Objects.equals(this.canSendPrivateMessageToUser, usersGetUserByUsernameResponseUser.canSendPrivateMessageToUser) &&
        Objects.equals(this.trustLevel, usersGetUserByUsernameResponseUser.trustLevel) &&
        Objects.equals(this.moderator, usersGetUserByUsernameResponseUser.moderator) &&
        Objects.equals(this.admin, usersGetUserByUsernameResponseUser.admin) &&
        Objects.equals(this.badgeCount, usersGetUserByUsernameResponseUser.badgeCount) &&
        Objects.equals(this.secondFactorBackupEnabled, usersGetUserByUsernameResponseUser.secondFactorBackupEnabled) &&
        Objects.equals(this.userFields, usersGetUserByUsernameResponseUser.userFields) &&
        Objects.equals(this.customFields, usersGetUserByUsernameResponseUser.customFields) &&
        Objects.equals(this.timeRead, usersGetUserByUsernameResponseUser.timeRead) &&
        Objects.equals(this.recentTimeRead, usersGetUserByUsernameResponseUser.recentTimeRead) &&
        Objects.equals(this.primaryGroupId, usersGetUserByUsernameResponseUser.primaryGroupId) &&
        Objects.equals(this.primaryGroupName, usersGetUserByUsernameResponseUser.primaryGroupName) &&
        Objects.equals(this.flairGroupId, usersGetUserByUsernameResponseUser.flairGroupId) &&
        Objects.equals(this.flairName, usersGetUserByUsernameResponseUser.flairName) &&
        Objects.equals(this.flairUrl, usersGetUserByUsernameResponseUser.flairUrl) &&
        Objects.equals(this.flairBgColor, usersGetUserByUsernameResponseUser.flairBgColor) &&
        Objects.equals(this.flairColor, usersGetUserByUsernameResponseUser.flairColor) &&
        Objects.equals(this.featuredTopic, usersGetUserByUsernameResponseUser.featuredTopic) &&
        Objects.equals(this.staged, usersGetUserByUsernameResponseUser.staged) &&
        Objects.equals(this.canEdit, usersGetUserByUsernameResponseUser.canEdit) &&
        Objects.equals(this.canEditUsername, usersGetUserByUsernameResponseUser.canEditUsername) &&
        Objects.equals(this.canEditEmail, usersGetUserByUsernameResponseUser.canEditEmail) &&
        Objects.equals(this.canEditName, usersGetUserByUsernameResponseUser.canEditName) &&
        Objects.equals(this.uploadedAvatarId, usersGetUserByUsernameResponseUser.uploadedAvatarId) &&
        Objects.equals(this.hasTitleBadges, usersGetUserByUsernameResponseUser.hasTitleBadges) &&
        Objects.equals(this.pendingCount, usersGetUserByUsernameResponseUser.pendingCount) &&
        Objects.equals(this.pendingPostsCount, usersGetUserByUsernameResponseUser.pendingPostsCount) &&
        Objects.equals(this.profileViewCount, usersGetUserByUsernameResponseUser.profileViewCount) &&
        Objects.equals(this.secondFactorEnabled, usersGetUserByUsernameResponseUser.secondFactorEnabled) &&
        Objects.equals(this.canUploadProfileHeader, usersGetUserByUsernameResponseUser.canUploadProfileHeader) &&
        Objects.equals(this.canUploadUserCardBackground, usersGetUserByUsernameResponseUser.canUploadUserCardBackground) &&
        Objects.equals(this.postCount, usersGetUserByUsernameResponseUser.postCount) &&
        Objects.equals(this.canBeDeleted, usersGetUserByUsernameResponseUser.canBeDeleted) &&
        Objects.equals(this.canDeleteAllPosts, usersGetUserByUsernameResponseUser.canDeleteAllPosts) &&
        Objects.equals(this.locale, usersGetUserByUsernameResponseUser.locale) &&
        Objects.equals(this.mutedCategoryIds, usersGetUserByUsernameResponseUser.mutedCategoryIds) &&
        Objects.equals(this.regularCategoryIds, usersGetUserByUsernameResponseUser.regularCategoryIds) &&
        Objects.equals(this.watchedTags, usersGetUserByUsernameResponseUser.watchedTags) &&
        Objects.equals(this.watchingFirstPostTags, usersGetUserByUsernameResponseUser.watchingFirstPostTags) &&
        Objects.equals(this.trackedTags, usersGetUserByUsernameResponseUser.trackedTags) &&
        Objects.equals(this.mutedTags, usersGetUserByUsernameResponseUser.mutedTags) &&
        Objects.equals(this.trackedCategoryIds, usersGetUserByUsernameResponseUser.trackedCategoryIds) &&
        Objects.equals(this.watchedCategoryIds, usersGetUserByUsernameResponseUser.watchedCategoryIds) &&
        Objects.equals(this.watchedFirstPostCategoryIds, usersGetUserByUsernameResponseUser.watchedFirstPostCategoryIds) &&
        Objects.equals(this.systemAvatarUploadId, usersGetUserByUsernameResponseUser.systemAvatarUploadId) &&
        Objects.equals(this.systemAvatarTemplate, usersGetUserByUsernameResponseUser.systemAvatarTemplate) &&
        Objects.equals(this.mutedUsernames, usersGetUserByUsernameResponseUser.mutedUsernames) &&
        Objects.equals(this.ignoredUsernames, usersGetUserByUsernameResponseUser.ignoredUsernames) &&
        Objects.equals(this.allowedPmUsernames, usersGetUserByUsernameResponseUser.allowedPmUsernames) &&
        Objects.equals(this.mailingListPostsPerDay, usersGetUserByUsernameResponseUser.mailingListPostsPerDay) &&
        Objects.equals(this.canChangeBio, usersGetUserByUsernameResponseUser.canChangeBio) &&
        Objects.equals(this.canChangeLocation, usersGetUserByUsernameResponseUser.canChangeLocation) &&
        Objects.equals(this.canChangeWebsite, usersGetUserByUsernameResponseUser.canChangeWebsite) &&
        Objects.equals(this.canChangeTrackingPreferences, usersGetUserByUsernameResponseUser.canChangeTrackingPreferences) &&
        Objects.equals(this.userApiKeys, usersGetUserByUsernameResponseUser.userApiKeys) &&
        Objects.equals(this.userPasskeys, usersGetUserByUsernameResponseUser.userPasskeys) &&
        Objects.equals(this.sidebarTags, usersGetUserByUsernameResponseUser.sidebarTags) &&
        Objects.equals(this.sidebarCategoryIds, usersGetUserByUsernameResponseUser.sidebarCategoryIds) &&
        Objects.equals(this.displaySidebarTags, usersGetUserByUsernameResponseUser.displaySidebarTags) &&
        Objects.equals(this.userAuthTokens, usersGetUserByUsernameResponseUser.userAuthTokens) &&
        Objects.equals(this.userNotificationSchedule, usersGetUserByUsernameResponseUser.userNotificationSchedule) &&
        Objects.equals(this.useLogoSmallAsAvatar, usersGetUserByUsernameResponseUser.useLogoSmallAsAvatar) &&
        Objects.equals(this.featuredUserBadgeIds, usersGetUserByUsernameResponseUser.featuredUserBadgeIds) &&
        Objects.equals(this.invitedBy, usersGetUserByUsernameResponseUser.invitedBy) &&
        Objects.equals(this.groups, usersGetUserByUsernameResponseUser.groups) &&
        Objects.equals(this.groupUsers, usersGetUserByUsernameResponseUser.groupUsers) &&
        Objects.equals(this.userOption, usersGetUserByUsernameResponseUser.userOption)&&
        Objects.equals(this.additionalProperties, usersGetUserByUsernameResponseUser.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(title, id, username, name, avatarTemplate, lastPostedAt, lastSeenAt, createdAt, ignored, muted, canIgnoreUser, canMuteUser, canSendPrivateMessages, canSendPrivateMessageToUser, trustLevel, moderator, admin, badgeCount, secondFactorBackupEnabled, userFields, customFields, timeRead, recentTimeRead, primaryGroupId, primaryGroupName, flairGroupId, flairName, flairUrl, flairBgColor, flairColor, featuredTopic, staged, canEdit, canEditUsername, canEditEmail, canEditName, uploadedAvatarId, hasTitleBadges, pendingCount, pendingPostsCount, profileViewCount, secondFactorEnabled, canUploadProfileHeader, canUploadUserCardBackground, postCount, canBeDeleted, canDeleteAllPosts, locale, mutedCategoryIds, regularCategoryIds, watchedTags, watchingFirstPostTags, trackedTags, mutedTags, trackedCategoryIds, watchedCategoryIds, watchedFirstPostCategoryIds, systemAvatarUploadId, systemAvatarTemplate, mutedUsernames, ignoredUsernames, allowedPmUsernames, mailingListPostsPerDay, canChangeBio, canChangeLocation, canChangeWebsite, canChangeTrackingPreferences, userApiKeys, userPasskeys, sidebarTags, sidebarCategoryIds, displaySidebarTags, userAuthTokens, userNotificationSchedule, useLogoSmallAsAvatar, featuredUserBadgeIds, invitedBy, groups, groupUsers, userOption, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UsersGetUserByUsernameResponseUser {\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    avatarTemplate: ").append(toIndentedString(avatarTemplate)).append("\n");
    sb.append("    lastPostedAt: ").append(toIndentedString(lastPostedAt)).append("\n");
    sb.append("    lastSeenAt: ").append(toIndentedString(lastSeenAt)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    ignored: ").append(toIndentedString(ignored)).append("\n");
    sb.append("    muted: ").append(toIndentedString(muted)).append("\n");
    sb.append("    canIgnoreUser: ").append(toIndentedString(canIgnoreUser)).append("\n");
    sb.append("    canMuteUser: ").append(toIndentedString(canMuteUser)).append("\n");
    sb.append("    canSendPrivateMessages: ").append(toIndentedString(canSendPrivateMessages)).append("\n");
    sb.append("    canSendPrivateMessageToUser: ").append(toIndentedString(canSendPrivateMessageToUser)).append("\n");
    sb.append("    trustLevel: ").append(toIndentedString(trustLevel)).append("\n");
    sb.append("    moderator: ").append(toIndentedString(moderator)).append("\n");
    sb.append("    admin: ").append(toIndentedString(admin)).append("\n");
    sb.append("    badgeCount: ").append(toIndentedString(badgeCount)).append("\n");
    sb.append("    secondFactorBackupEnabled: ").append(toIndentedString(secondFactorBackupEnabled)).append("\n");
    sb.append("    userFields: ").append(toIndentedString(userFields)).append("\n");
    sb.append("    customFields: ").append(toIndentedString(customFields)).append("\n");
    sb.append("    timeRead: ").append(toIndentedString(timeRead)).append("\n");
    sb.append("    recentTimeRead: ").append(toIndentedString(recentTimeRead)).append("\n");
    sb.append("    primaryGroupId: ").append(toIndentedString(primaryGroupId)).append("\n");
    sb.append("    primaryGroupName: ").append(toIndentedString(primaryGroupName)).append("\n");
    sb.append("    flairGroupId: ").append(toIndentedString(flairGroupId)).append("\n");
    sb.append("    flairName: ").append(toIndentedString(flairName)).append("\n");
    sb.append("    flairUrl: ").append(toIndentedString(flairUrl)).append("\n");
    sb.append("    flairBgColor: ").append(toIndentedString(flairBgColor)).append("\n");
    sb.append("    flairColor: ").append(toIndentedString(flairColor)).append("\n");
    sb.append("    featuredTopic: ").append(toIndentedString(featuredTopic)).append("\n");
    sb.append("    staged: ").append(toIndentedString(staged)).append("\n");
    sb.append("    canEdit: ").append(toIndentedString(canEdit)).append("\n");
    sb.append("    canEditUsername: ").append(toIndentedString(canEditUsername)).append("\n");
    sb.append("    canEditEmail: ").append(toIndentedString(canEditEmail)).append("\n");
    sb.append("    canEditName: ").append(toIndentedString(canEditName)).append("\n");
    sb.append("    uploadedAvatarId: ").append(toIndentedString(uploadedAvatarId)).append("\n");
    sb.append("    hasTitleBadges: ").append(toIndentedString(hasTitleBadges)).append("\n");
    sb.append("    pendingCount: ").append(toIndentedString(pendingCount)).append("\n");
    sb.append("    pendingPostsCount: ").append(toIndentedString(pendingPostsCount)).append("\n");
    sb.append("    profileViewCount: ").append(toIndentedString(profileViewCount)).append("\n");
    sb.append("    secondFactorEnabled: ").append(toIndentedString(secondFactorEnabled)).append("\n");
    sb.append("    canUploadProfileHeader: ").append(toIndentedString(canUploadProfileHeader)).append("\n");
    sb.append("    canUploadUserCardBackground: ").append(toIndentedString(canUploadUserCardBackground)).append("\n");
    sb.append("    postCount: ").append(toIndentedString(postCount)).append("\n");
    sb.append("    canBeDeleted: ").append(toIndentedString(canBeDeleted)).append("\n");
    sb.append("    canDeleteAllPosts: ").append(toIndentedString(canDeleteAllPosts)).append("\n");
    sb.append("    locale: ").append(toIndentedString(locale)).append("\n");
    sb.append("    mutedCategoryIds: ").append(toIndentedString(mutedCategoryIds)).append("\n");
    sb.append("    regularCategoryIds: ").append(toIndentedString(regularCategoryIds)).append("\n");
    sb.append("    watchedTags: ").append(toIndentedString(watchedTags)).append("\n");
    sb.append("    watchingFirstPostTags: ").append(toIndentedString(watchingFirstPostTags)).append("\n");
    sb.append("    trackedTags: ").append(toIndentedString(trackedTags)).append("\n");
    sb.append("    mutedTags: ").append(toIndentedString(mutedTags)).append("\n");
    sb.append("    trackedCategoryIds: ").append(toIndentedString(trackedCategoryIds)).append("\n");
    sb.append("    watchedCategoryIds: ").append(toIndentedString(watchedCategoryIds)).append("\n");
    sb.append("    watchedFirstPostCategoryIds: ").append(toIndentedString(watchedFirstPostCategoryIds)).append("\n");
    sb.append("    systemAvatarUploadId: ").append(toIndentedString(systemAvatarUploadId)).append("\n");
    sb.append("    systemAvatarTemplate: ").append(toIndentedString(systemAvatarTemplate)).append("\n");
    sb.append("    mutedUsernames: ").append(toIndentedString(mutedUsernames)).append("\n");
    sb.append("    ignoredUsernames: ").append(toIndentedString(ignoredUsernames)).append("\n");
    sb.append("    allowedPmUsernames: ").append(toIndentedString(allowedPmUsernames)).append("\n");
    sb.append("    mailingListPostsPerDay: ").append(toIndentedString(mailingListPostsPerDay)).append("\n");
    sb.append("    canChangeBio: ").append(toIndentedString(canChangeBio)).append("\n");
    sb.append("    canChangeLocation: ").append(toIndentedString(canChangeLocation)).append("\n");
    sb.append("    canChangeWebsite: ").append(toIndentedString(canChangeWebsite)).append("\n");
    sb.append("    canChangeTrackingPreferences: ").append(toIndentedString(canChangeTrackingPreferences)).append("\n");
    sb.append("    userApiKeys: ").append(toIndentedString(userApiKeys)).append("\n");
    sb.append("    userPasskeys: ").append(toIndentedString(userPasskeys)).append("\n");
    sb.append("    sidebarTags: ").append(toIndentedString(sidebarTags)).append("\n");
    sb.append("    sidebarCategoryIds: ").append(toIndentedString(sidebarCategoryIds)).append("\n");
    sb.append("    displaySidebarTags: ").append(toIndentedString(displaySidebarTags)).append("\n");
    sb.append("    userAuthTokens: ").append(toIndentedString(userAuthTokens)).append("\n");
    sb.append("    userNotificationSchedule: ").append(toIndentedString(userNotificationSchedule)).append("\n");
    sb.append("    useLogoSmallAsAvatar: ").append(toIndentedString(useLogoSmallAsAvatar)).append("\n");
    sb.append("    featuredUserBadgeIds: ").append(toIndentedString(featuredUserBadgeIds)).append("\n");
    sb.append("    invitedBy: ").append(toIndentedString(invitedBy)).append("\n");
    sb.append("    groups: ").append(toIndentedString(groups)).append("\n");
    sb.append("    groupUsers: ").append(toIndentedString(groupUsers)).append("\n");
    sb.append("    userOption: ").append(toIndentedString(userOption)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("title");
    openapiFields.add("id");
    openapiFields.add("username");
    openapiFields.add("name");
    openapiFields.add("avatar_template");
    openapiFields.add("last_posted_at");
    openapiFields.add("last_seen_at");
    openapiFields.add("created_at");
    openapiFields.add("ignored");
    openapiFields.add("muted");
    openapiFields.add("can_ignore_user");
    openapiFields.add("can_mute_user");
    openapiFields.add("can_send_private_messages");
    openapiFields.add("can_send_private_message_to_user");
    openapiFields.add("trust_level");
    openapiFields.add("moderator");
    openapiFields.add("admin");
    openapiFields.add("badge_count");
    openapiFields.add("second_factor_backup_enabled");
    openapiFields.add("user_fields");
    openapiFields.add("custom_fields");
    openapiFields.add("time_read");
    openapiFields.add("recent_time_read");
    openapiFields.add("primary_group_id");
    openapiFields.add("primary_group_name");
    openapiFields.add("flair_group_id");
    openapiFields.add("flair_name");
    openapiFields.add("flair_url");
    openapiFields.add("flair_bg_color");
    openapiFields.add("flair_color");
    openapiFields.add("featured_topic");
    openapiFields.add("staged");
    openapiFields.add("can_edit");
    openapiFields.add("can_edit_username");
    openapiFields.add("can_edit_email");
    openapiFields.add("can_edit_name");
    openapiFields.add("uploaded_avatar_id");
    openapiFields.add("has_title_badges");
    openapiFields.add("pending_count");
    openapiFields.add("pending_posts_count");
    openapiFields.add("profile_view_count");
    openapiFields.add("second_factor_enabled");
    openapiFields.add("can_upload_profile_header");
    openapiFields.add("can_upload_user_card_background");
    openapiFields.add("post_count");
    openapiFields.add("can_be_deleted");
    openapiFields.add("can_delete_all_posts");
    openapiFields.add("locale");
    openapiFields.add("muted_category_ids");
    openapiFields.add("regular_category_ids");
    openapiFields.add("watched_tags");
    openapiFields.add("watching_first_post_tags");
    openapiFields.add("tracked_tags");
    openapiFields.add("muted_tags");
    openapiFields.add("tracked_category_ids");
    openapiFields.add("watched_category_ids");
    openapiFields.add("watched_first_post_category_ids");
    openapiFields.add("system_avatar_upload_id");
    openapiFields.add("system_avatar_template");
    openapiFields.add("muted_usernames");
    openapiFields.add("ignored_usernames");
    openapiFields.add("allowed_pm_usernames");
    openapiFields.add("mailing_list_posts_per_day");
    openapiFields.add("can_change_bio");
    openapiFields.add("can_change_location");
    openapiFields.add("can_change_website");
    openapiFields.add("can_change_tracking_preferences");
    openapiFields.add("user_api_keys");
    openapiFields.add("user_passkeys");
    openapiFields.add("sidebar_tags");
    openapiFields.add("sidebar_category_ids");
    openapiFields.add("display_sidebar_tags");
    openapiFields.add("user_auth_tokens");
    openapiFields.add("user_notification_schedule");
    openapiFields.add("use_logo_small_as_avatar");
    openapiFields.add("featured_user_badge_ids");
    openapiFields.add("invited_by");
    openapiFields.add("groups");
    openapiFields.add("group_users");
    openapiFields.add("user_option");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("title");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("username");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("avatar_template");
    openapiRequiredFields.add("last_posted_at");
    openapiRequiredFields.add("last_seen_at");
    openapiRequiredFields.add("created_at");
    openapiRequiredFields.add("ignored");
    openapiRequiredFields.add("muted");
    openapiRequiredFields.add("can_ignore_user");
    openapiRequiredFields.add("can_mute_user");
    openapiRequiredFields.add("can_send_private_messages");
    openapiRequiredFields.add("can_send_private_message_to_user");
    openapiRequiredFields.add("trust_level");
    openapiRequiredFields.add("moderator");
    openapiRequiredFields.add("admin");
    openapiRequiredFields.add("badge_count");
    openapiRequiredFields.add("custom_fields");
    openapiRequiredFields.add("time_read");
    openapiRequiredFields.add("recent_time_read");
    openapiRequiredFields.add("primary_group_id");
    openapiRequiredFields.add("primary_group_name");
    openapiRequiredFields.add("flair_group_id");
    openapiRequiredFields.add("flair_name");
    openapiRequiredFields.add("flair_url");
    openapiRequiredFields.add("flair_bg_color");
    openapiRequiredFields.add("flair_color");
    openapiRequiredFields.add("featured_topic");
    openapiRequiredFields.add("staged");
    openapiRequiredFields.add("can_edit");
    openapiRequiredFields.add("can_edit_username");
    openapiRequiredFields.add("can_edit_email");
    openapiRequiredFields.add("can_edit_name");
    openapiRequiredFields.add("uploaded_avatar_id");
    openapiRequiredFields.add("has_title_badges");
    openapiRequiredFields.add("pending_count");
    openapiRequiredFields.add("profile_view_count");
    openapiRequiredFields.add("second_factor_enabled");
    openapiRequiredFields.add("can_upload_profile_header");
    openapiRequiredFields.add("can_upload_user_card_background");
    openapiRequiredFields.add("post_count");
    openapiRequiredFields.add("can_be_deleted");
    openapiRequiredFields.add("can_delete_all_posts");
    openapiRequiredFields.add("locale");
    openapiRequiredFields.add("muted_category_ids");
    openapiRequiredFields.add("regular_category_ids");
    openapiRequiredFields.add("watched_tags");
    openapiRequiredFields.add("watching_first_post_tags");
    openapiRequiredFields.add("tracked_tags");
    openapiRequiredFields.add("muted_tags");
    openapiRequiredFields.add("tracked_category_ids");
    openapiRequiredFields.add("watched_category_ids");
    openapiRequiredFields.add("watched_first_post_category_ids");
    openapiRequiredFields.add("system_avatar_upload_id");
    openapiRequiredFields.add("system_avatar_template");
    openapiRequiredFields.add("muted_usernames");
    openapiRequiredFields.add("ignored_usernames");
    openapiRequiredFields.add("allowed_pm_usernames");
    openapiRequiredFields.add("mailing_list_posts_per_day");
    openapiRequiredFields.add("can_change_bio");
    openapiRequiredFields.add("can_change_location");
    openapiRequiredFields.add("can_change_website");
    openapiRequiredFields.add("can_change_tracking_preferences");
    openapiRequiredFields.add("user_api_keys");
    openapiRequiredFields.add("user_auth_tokens");
    openapiRequiredFields.add("user_notification_schedule");
    openapiRequiredFields.add("use_logo_small_as_avatar");
    openapiRequiredFields.add("featured_user_badge_ids");
    openapiRequiredFields.add("invited_by");
    openapiRequiredFields.add("groups");
    openapiRequiredFields.add("group_users");
    openapiRequiredFields.add("user_option");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to UsersGetUserByUsernameResponseUser
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!UsersGetUserByUsernameResponseUser.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UsersGetUserByUsernameResponseUser is not found in the empty JSON string", UsersGetUserByUsernameResponseUser.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UsersGetUserByUsernameResponseUser.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("username").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `username` to be a primitive type in the JSON string but got `%s`", jsonObj.get("username").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("avatar_template").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `avatar_template` to be a primitive type in the JSON string but got `%s`", jsonObj.get("avatar_template").toString()));
      }
      if (!jsonObj.get("created_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created_at").toString()));
      }
      // validate the optional field `user_fields`
      if (jsonObj.get("user_fields") != null && !jsonObj.get("user_fields").isJsonNull()) {
        UsersGetUserByUsernameResponseUserUserFields.validateJsonObject(jsonObj.getAsJsonObject("user_fields"));
      }
      // validate the required field `custom_fields`
      UsersGetUserByUsernameResponseUserCustomFields.validateJsonObject(jsonObj.getAsJsonObject("custom_fields"));
      // ensure the required json array is present
      if (jsonObj.get("muted_category_ids") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("muted_category_ids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `muted_category_ids` to be an array in the JSON string but got `%s`", jsonObj.get("muted_category_ids").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("regular_category_ids") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("regular_category_ids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `regular_category_ids` to be an array in the JSON string but got `%s`", jsonObj.get("regular_category_ids").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("watched_tags") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("watched_tags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `watched_tags` to be an array in the JSON string but got `%s`", jsonObj.get("watched_tags").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("watching_first_post_tags") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("watching_first_post_tags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `watching_first_post_tags` to be an array in the JSON string but got `%s`", jsonObj.get("watching_first_post_tags").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("tracked_tags") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("tracked_tags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tracked_tags` to be an array in the JSON string but got `%s`", jsonObj.get("tracked_tags").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("muted_tags") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("muted_tags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `muted_tags` to be an array in the JSON string but got `%s`", jsonObj.get("muted_tags").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("tracked_category_ids") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("tracked_category_ids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tracked_category_ids` to be an array in the JSON string but got `%s`", jsonObj.get("tracked_category_ids").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("watched_category_ids") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("watched_category_ids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `watched_category_ids` to be an array in the JSON string but got `%s`", jsonObj.get("watched_category_ids").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("watched_first_post_category_ids") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("watched_first_post_category_ids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `watched_first_post_category_ids` to be an array in the JSON string but got `%s`", jsonObj.get("watched_first_post_category_ids").toString()));
      }
      if (!jsonObj.get("system_avatar_template").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `system_avatar_template` to be a primitive type in the JSON string but got `%s`", jsonObj.get("system_avatar_template").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("muted_usernames") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("muted_usernames").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `muted_usernames` to be an array in the JSON string but got `%s`", jsonObj.get("muted_usernames").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("ignored_usernames") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("ignored_usernames").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `ignored_usernames` to be an array in the JSON string but got `%s`", jsonObj.get("ignored_usernames").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("allowed_pm_usernames") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("allowed_pm_usernames").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `allowed_pm_usernames` to be an array in the JSON string but got `%s`", jsonObj.get("allowed_pm_usernames").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("user_auth_tokens").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `user_auth_tokens` to be an array in the JSON string but got `%s`", jsonObj.get("user_auth_tokens").toString()));
      }

      JsonArray jsonArrayuserAuthTokens = jsonObj.getAsJsonArray("user_auth_tokens");
      // validate the required field `user_auth_tokens` (array)
      for (int i = 0; i < jsonArrayuserAuthTokens.size(); i++) {
        UsersGetUserByUsernameResponseUserUserAuthTokensInner.validateJsonObject(jsonArrayuserAuthTokens.get(i).getAsJsonObject());
      };
      // validate the required field `user_notification_schedule`
      UsersGetUserByUsernameResponseUserUserNotificationSchedule.validateJsonObject(jsonObj.getAsJsonObject("user_notification_schedule"));
      // ensure the required json array is present
      if (jsonObj.get("featured_user_badge_ids") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("featured_user_badge_ids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `featured_user_badge_ids` to be an array in the JSON string but got `%s`", jsonObj.get("featured_user_badge_ids").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("groups").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `groups` to be an array in the JSON string but got `%s`", jsonObj.get("groups").toString()));
      }

      JsonArray jsonArraygroups = jsonObj.getAsJsonArray("groups");
      // validate the required field `groups` (array)
      for (int i = 0; i < jsonArraygroups.size(); i++) {
        UsersGetUserByUsernameResponseUserGroupsInner.validateJsonObject(jsonArraygroups.get(i).getAsJsonObject());
      };
      // ensure the json data is an array
      if (!jsonObj.get("group_users").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `group_users` to be an array in the JSON string but got `%s`", jsonObj.get("group_users").toString()));
      }

      JsonArray jsonArraygroupUsers = jsonObj.getAsJsonArray("group_users");
      // validate the required field `group_users` (array)
      for (int i = 0; i < jsonArraygroupUsers.size(); i++) {
        UsersGetUserByUsernameResponseUserGroupUsersInner.validateJsonObject(jsonArraygroupUsers.get(i).getAsJsonObject());
      };
      // validate the required field `user_option`
      UsersGetUserByUsernameResponseUserUserOption.validateJsonObject(jsonObj.getAsJsonObject("user_option"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UsersGetUserByUsernameResponseUser.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UsersGetUserByUsernameResponseUser' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UsersGetUserByUsernameResponseUser> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UsersGetUserByUsernameResponseUser.class));

       return (TypeAdapter<T>) new TypeAdapter<UsersGetUserByUsernameResponseUser>() {
           @Override
           public void write(JsonWriter out, UsersGetUserByUsernameResponseUser value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public UsersGetUserByUsernameResponseUser read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             UsersGetUserByUsernameResponseUser instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of UsersGetUserByUsernameResponseUser given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of UsersGetUserByUsernameResponseUser
  * @throws IOException if the JSON string is invalid with respect to UsersGetUserByUsernameResponseUser
  */
  public static UsersGetUserByUsernameResponseUser fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UsersGetUserByUsernameResponseUser.class);
  }

 /**
  * Convert an instance of UsersGetUserByUsernameResponseUser to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

