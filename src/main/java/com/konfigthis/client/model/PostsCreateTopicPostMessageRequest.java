/*
 * Discourse API Documentation
 * This page contains the documentation on how to use Discourse through API calls.  > Note: For any endpoints not listed you can follow the [reverse engineer the Discourse API](https://meta.discourse.org/t/-/20576) guide to figure out how to use an API endpoint.  ### Request Content-Type  The Content-Type for POST and PUT requests can be set to `application/x-www-form-urlencoded`, `multipart/form-data`, or `application/json`.  ### Endpoint Names and Response Content-Type  Most API endpoints provide the same content as their HTML counterparts. For example the URL `/categories` serves a list of categories, the `/categories.json` API provides the same information in JSON format.  Instead of sending API requests to `/categories.json` you may also send them to `/categories` and add an `Accept: application/json` header to the request to get the JSON response. Sending requests with the `Accept` header is necessary if you want to use URLs for related endpoints returned by the API, such as pagination URLs. These URLs are returned without the `.json` prefix so you need to add the header in order to get the correct response format.  ### Authentication  Some endpoints do not require any authentication, pretty much anything else will require you to be authenticated.  To become authenticated you will need to create an API Key from the admin panel.  Once you have your API Key you can pass it in along with your API Username as an HTTP header like this:  ``` curl -X GET \"http://127.0.0.1:3000/admin/users/list/active.json\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" ```  and this is how POST requests will look:  ``` curl -X POST \"http://127.0.0.1:3000/categories\" \\ -H \"Content-Type: multipart/form-data;\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" \\ -F \"name=89853c20-4409-e91a-a8ea-f6cdff96aaaa\" \\ -F \"color=49d9e9\" \\ -F \"text_color=f0fcfd\" ```  ### Boolean values  If an endpoint accepts a boolean be sure to specify it as a lowercase `true` or `false` value unless noted otherwise. 
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * PostsCreateTopicPostMessageRequest
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class PostsCreateTopicPostMessageRequest {
  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_RAW = "raw";
  @SerializedName(SERIALIZED_NAME_RAW)
  private String raw;

  public static final String SERIALIZED_NAME_TOPIC_ID = "topic_id";
  @SerializedName(SERIALIZED_NAME_TOPIC_ID)
  private Integer topicId;

  public static final String SERIALIZED_NAME_CATEGORY = "category";
  @SerializedName(SERIALIZED_NAME_CATEGORY)
  private Integer category;

  public static final String SERIALIZED_NAME_TARGET_RECIPIENTS = "target_recipients";
  @SerializedName(SERIALIZED_NAME_TARGET_RECIPIENTS)
  private String targetRecipients;

  public static final String SERIALIZED_NAME_TARGET_USERNAMES = "target_usernames";
  @SerializedName(SERIALIZED_NAME_TARGET_USERNAMES)
  private String targetUsernames;

  public static final String SERIALIZED_NAME_ARCHETYPE = "archetype";
  @SerializedName(SERIALIZED_NAME_ARCHETYPE)
  private String archetype;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private String createdAt;

  public static final String SERIALIZED_NAME_REPLY_TO_POST_NUMBER = "reply_to_post_number";
  @SerializedName(SERIALIZED_NAME_REPLY_TO_POST_NUMBER)
  private Integer replyToPostNumber;

  public static final String SERIALIZED_NAME_EMBED_URL = "embed_url";
  @SerializedName(SERIALIZED_NAME_EMBED_URL)
  private String embedUrl;

  public static final String SERIALIZED_NAME_EXTERNAL_ID = "external_id";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_ID)
  private String externalId;

  public PostsCreateTopicPostMessageRequest() {
  }

  public PostsCreateTopicPostMessageRequest title(String title) {
    
    
    
    
    this.title = title;
    return this;
  }

   /**
   * Required if creating a new topic or new private message.
   * @return title
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Required if creating a new topic or new private message.")

  public String getTitle() {
    return title;
  }


  public void setTitle(String title) {
    
    
    
    this.title = title;
  }


  public PostsCreateTopicPostMessageRequest raw(String raw) {
    
    
    
    
    this.raw = raw;
    return this;
  }

   /**
   * Get raw
   * @return raw
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getRaw() {
    return raw;
  }


  public void setRaw(String raw) {
    
    
    
    this.raw = raw;
  }


  public PostsCreateTopicPostMessageRequest topicId(Integer topicId) {
    
    
    
    
    this.topicId = topicId;
    return this;
  }

   /**
   * Required if creating a new post.
   * @return topicId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Required if creating a new post.")

  public Integer getTopicId() {
    return topicId;
  }


  public void setTopicId(Integer topicId) {
    
    
    
    this.topicId = topicId;
  }


  public PostsCreateTopicPostMessageRequest category(Integer category) {
    
    
    
    
    this.category = category;
    return this;
  }

   /**
   * Optional if creating a new topic, and ignored if creating a new post.
   * @return category
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Optional if creating a new topic, and ignored if creating a new post.")

  public Integer getCategory() {
    return category;
  }


  public void setCategory(Integer category) {
    
    
    
    this.category = category;
  }


  public PostsCreateTopicPostMessageRequest targetRecipients(String targetRecipients) {
    
    
    
    
    this.targetRecipients = targetRecipients;
    return this;
  }

   /**
   * Required for private message, comma separated.
   * @return targetRecipients
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "blake,sam", value = "Required for private message, comma separated.")

  public String getTargetRecipients() {
    return targetRecipients;
  }


  public void setTargetRecipients(String targetRecipients) {
    
    
    
    this.targetRecipients = targetRecipients;
  }


  public PostsCreateTopicPostMessageRequest targetUsernames(String targetUsernames) {
    
    
    
    
    this.targetUsernames = targetUsernames;
    return this;
  }

   /**
   * Deprecated. Use target_recipients instead.
   * @return targetUsernames
   * @deprecated
  **/
  @Deprecated
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Deprecated. Use target_recipients instead.")

  public String getTargetUsernames() {
    return targetUsernames;
  }


  public void setTargetUsernames(String targetUsernames) {
    
    
    
    this.targetUsernames = targetUsernames;
  }


  public PostsCreateTopicPostMessageRequest archetype(String archetype) {
    
    
    
    
    this.archetype = archetype;
    return this;
  }

   /**
   * Required for new private message.
   * @return archetype
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "private_message", value = "Required for new private message.")

  public String getArchetype() {
    return archetype;
  }


  public void setArchetype(String archetype) {
    
    
    
    this.archetype = archetype;
  }


  public PostsCreateTopicPostMessageRequest createdAt(String createdAt) {
    
    
    
    
    this.createdAt = createdAt;
    return this;
  }

   /**
   * Get createdAt
   * @return createdAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getCreatedAt() {
    return createdAt;
  }


  public void setCreatedAt(String createdAt) {
    
    
    
    this.createdAt = createdAt;
  }


  public PostsCreateTopicPostMessageRequest replyToPostNumber(Integer replyToPostNumber) {
    
    
    
    
    this.replyToPostNumber = replyToPostNumber;
    return this;
  }

   /**
   * Optional, the post number to reply to inside a topic.
   * @return replyToPostNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Optional, the post number to reply to inside a topic.")

  public Integer getReplyToPostNumber() {
    return replyToPostNumber;
  }


  public void setReplyToPostNumber(Integer replyToPostNumber) {
    
    
    
    this.replyToPostNumber = replyToPostNumber;
  }


  public PostsCreateTopicPostMessageRequest embedUrl(String embedUrl) {
    
    
    
    
    this.embedUrl = embedUrl;
    return this;
  }

   /**
   * Provide a URL from a remote system to associate a forum topic with that URL, typically for using Discourse as a comments system for an external blog.
   * @return embedUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Provide a URL from a remote system to associate a forum topic with that URL, typically for using Discourse as a comments system for an external blog.")

  public String getEmbedUrl() {
    return embedUrl;
  }


  public void setEmbedUrl(String embedUrl) {
    
    
    
    this.embedUrl = embedUrl;
  }


  public PostsCreateTopicPostMessageRequest externalId(String externalId) {
    
    
    
    
    this.externalId = externalId;
    return this;
  }

   /**
   * Provide an external_id from a remote system to associate a forum topic with that id.
   * @return externalId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Provide an external_id from a remote system to associate a forum topic with that id.")

  public String getExternalId() {
    return externalId;
  }


  public void setExternalId(String externalId) {
    
    
    
    this.externalId = externalId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PostsCreateTopicPostMessageRequest postsCreateTopicPostMessageRequest = (PostsCreateTopicPostMessageRequest) o;
    return Objects.equals(this.title, postsCreateTopicPostMessageRequest.title) &&
        Objects.equals(this.raw, postsCreateTopicPostMessageRequest.raw) &&
        Objects.equals(this.topicId, postsCreateTopicPostMessageRequest.topicId) &&
        Objects.equals(this.category, postsCreateTopicPostMessageRequest.category) &&
        Objects.equals(this.targetRecipients, postsCreateTopicPostMessageRequest.targetRecipients) &&
        Objects.equals(this.targetUsernames, postsCreateTopicPostMessageRequest.targetUsernames) &&
        Objects.equals(this.archetype, postsCreateTopicPostMessageRequest.archetype) &&
        Objects.equals(this.createdAt, postsCreateTopicPostMessageRequest.createdAt) &&
        Objects.equals(this.replyToPostNumber, postsCreateTopicPostMessageRequest.replyToPostNumber) &&
        Objects.equals(this.embedUrl, postsCreateTopicPostMessageRequest.embedUrl) &&
        Objects.equals(this.externalId, postsCreateTopicPostMessageRequest.externalId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(title, raw, topicId, category, targetRecipients, targetUsernames, archetype, createdAt, replyToPostNumber, embedUrl, externalId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PostsCreateTopicPostMessageRequest {\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    raw: ").append(toIndentedString(raw)).append("\n");
    sb.append("    topicId: ").append(toIndentedString(topicId)).append("\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    targetRecipients: ").append(toIndentedString(targetRecipients)).append("\n");
    sb.append("    targetUsernames: ").append(toIndentedString(targetUsernames)).append("\n");
    sb.append("    archetype: ").append(toIndentedString(archetype)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    replyToPostNumber: ").append(toIndentedString(replyToPostNumber)).append("\n");
    sb.append("    embedUrl: ").append(toIndentedString(embedUrl)).append("\n");
    sb.append("    externalId: ").append(toIndentedString(externalId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("title");
    openapiFields.add("raw");
    openapiFields.add("topic_id");
    openapiFields.add("category");
    openapiFields.add("target_recipients");
    openapiFields.add("target_usernames");
    openapiFields.add("archetype");
    openapiFields.add("created_at");
    openapiFields.add("reply_to_post_number");
    openapiFields.add("embed_url");
    openapiFields.add("external_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("raw");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to PostsCreateTopicPostMessageRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!PostsCreateTopicPostMessageRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PostsCreateTopicPostMessageRequest is not found in the empty JSON string", PostsCreateTopicPostMessageRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!PostsCreateTopicPostMessageRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PostsCreateTopicPostMessageRequest` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PostsCreateTopicPostMessageRequest.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if (!jsonObj.get("raw").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `raw` to be a primitive type in the JSON string but got `%s`", jsonObj.get("raw").toString()));
      }
      if ((jsonObj.get("target_recipients") != null && !jsonObj.get("target_recipients").isJsonNull()) && !jsonObj.get("target_recipients").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `target_recipients` to be a primitive type in the JSON string but got `%s`", jsonObj.get("target_recipients").toString()));
      }
      if ((jsonObj.get("target_usernames") != null && !jsonObj.get("target_usernames").isJsonNull()) && !jsonObj.get("target_usernames").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `target_usernames` to be a primitive type in the JSON string but got `%s`", jsonObj.get("target_usernames").toString()));
      }
      if ((jsonObj.get("archetype") != null && !jsonObj.get("archetype").isJsonNull()) && !jsonObj.get("archetype").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `archetype` to be a primitive type in the JSON string but got `%s`", jsonObj.get("archetype").toString()));
      }
      if ((jsonObj.get("created_at") != null && !jsonObj.get("created_at").isJsonNull()) && !jsonObj.get("created_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created_at").toString()));
      }
      if ((jsonObj.get("embed_url") != null && !jsonObj.get("embed_url").isJsonNull()) && !jsonObj.get("embed_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `embed_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("embed_url").toString()));
      }
      if ((jsonObj.get("external_id") != null && !jsonObj.get("external_id").isJsonNull()) && !jsonObj.get("external_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `external_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("external_id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PostsCreateTopicPostMessageRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PostsCreateTopicPostMessageRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PostsCreateTopicPostMessageRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PostsCreateTopicPostMessageRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<PostsCreateTopicPostMessageRequest>() {
           @Override
           public void write(JsonWriter out, PostsCreateTopicPostMessageRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PostsCreateTopicPostMessageRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PostsCreateTopicPostMessageRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PostsCreateTopicPostMessageRequest
  * @throws IOException if the JSON string is invalid with respect to PostsCreateTopicPostMessageRequest
  */
  public static PostsCreateTopicPostMessageRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PostsCreateTopicPostMessageRequest.class);
  }

 /**
  * Convert an instance of PostsCreateTopicPostMessageRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

