/*
 * Discourse API Documentation
 * This page contains the documentation on how to use Discourse through API calls.  > Note: For any endpoints not listed you can follow the [reverse engineer the Discourse API](https://meta.discourse.org/t/-/20576) guide to figure out how to use an API endpoint.  ### Request Content-Type  The Content-Type for POST and PUT requests can be set to `application/x-www-form-urlencoded`, `multipart/form-data`, or `application/json`.  ### Endpoint Names and Response Content-Type  Most API endpoints provide the same content as their HTML counterparts. For example the URL `/categories` serves a list of categories, the `/categories.json` API provides the same information in JSON format.  Instead of sending API requests to `/categories.json` you may also send them to `/categories` and add an `Accept: application/json` header to the request to get the JSON response. Sending requests with the `Accept` header is necessary if you want to use URLs for related endpoints returned by the API, such as pagination URLs. These URLs are returned without the `.json` prefix so you need to add the header in order to get the correct response format.  ### Authentication  Some endpoints do not require any authentication, pretty much anything else will require you to be authenticated.  To become authenticated you will need to create an API Key from the admin panel.  Once you have your API Key you can pass it in along with your API Username as an HTTP header like this:  ``` curl -X GET \"http://127.0.0.1:3000/admin/users/list/active.json\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" ```  and this is how POST requests will look:  ``` curl -X POST \"http://127.0.0.1:3000/categories\" \\ -H \"Content-Type: multipart/form-data;\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" \\ -F \"name=89853c20-4409-e91a-a8ea-f6cdff96aaaa\" \\ -F \"color=49d9e9\" \\ -F \"text_color=f0fcfd\" ```  ### Boolean values  If an endpoint accepts a boolean be sure to specify it as a lowercase `true` or `false` value unless noted otherwise. 
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.CategoriesListTopicsResponseTopicList;
import com.konfigthis.client.model.CategoriesListTopicsResponseUsersInner;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * CategoriesListTopicsResponse
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class CategoriesListTopicsResponse {
  public static final String SERIALIZED_NAME_USERS = "users";
  @SerializedName(SERIALIZED_NAME_USERS)
  private List<CategoriesListTopicsResponseUsersInner> users = null;

  public static final String SERIALIZED_NAME_PRIMARY_GROUPS = "primary_groups";
  @SerializedName(SERIALIZED_NAME_PRIMARY_GROUPS)
  private List<Object> primaryGroups = null;

  public static final String SERIALIZED_NAME_TOPIC_LIST = "topic_list";
  @SerializedName(SERIALIZED_NAME_TOPIC_LIST)
  private CategoriesListTopicsResponseTopicList topicList;

  public CategoriesListTopicsResponse() {
  }

  public CategoriesListTopicsResponse users(List<CategoriesListTopicsResponseUsersInner> users) {
    
    
    
    
    this.users = users;
    return this;
  }

  public CategoriesListTopicsResponse addUsersItem(CategoriesListTopicsResponseUsersInner usersItem) {
    if (this.users == null) {
      this.users = new ArrayList<>();
    }
    this.users.add(usersItem);
    return this;
  }

   /**
   * Get users
   * @return users
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<CategoriesListTopicsResponseUsersInner> getUsers() {
    return users;
  }


  public void setUsers(List<CategoriesListTopicsResponseUsersInner> users) {
    
    
    
    this.users = users;
  }


  public CategoriesListTopicsResponse primaryGroups(List<Object> primaryGroups) {
    
    
    
    
    this.primaryGroups = primaryGroups;
    return this;
  }

  public CategoriesListTopicsResponse addPrimaryGroupsItem(Object primaryGroupsItem) {
    if (this.primaryGroups == null) {
      this.primaryGroups = new ArrayList<>();
    }
    this.primaryGroups.add(primaryGroupsItem);
    return this;
  }

   /**
   * Get primaryGroups
   * @return primaryGroups
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<Object> getPrimaryGroups() {
    return primaryGroups;
  }


  public void setPrimaryGroups(List<Object> primaryGroups) {
    
    
    
    this.primaryGroups = primaryGroups;
  }


  public CategoriesListTopicsResponse topicList(CategoriesListTopicsResponseTopicList topicList) {
    
    
    
    
    this.topicList = topicList;
    return this;
  }

   /**
   * Get topicList
   * @return topicList
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public CategoriesListTopicsResponseTopicList getTopicList() {
    return topicList;
  }


  public void setTopicList(CategoriesListTopicsResponseTopicList topicList) {
    
    
    
    this.topicList = topicList;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CategoriesListTopicsResponse categoriesListTopicsResponse = (CategoriesListTopicsResponse) o;
    return Objects.equals(this.users, categoriesListTopicsResponse.users) &&
        Objects.equals(this.primaryGroups, categoriesListTopicsResponse.primaryGroups) &&
        Objects.equals(this.topicList, categoriesListTopicsResponse.topicList);
  }

  @Override
  public int hashCode() {
    return Objects.hash(users, primaryGroups, topicList);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CategoriesListTopicsResponse {\n");
    sb.append("    users: ").append(toIndentedString(users)).append("\n");
    sb.append("    primaryGroups: ").append(toIndentedString(primaryGroups)).append("\n");
    sb.append("    topicList: ").append(toIndentedString(topicList)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("users");
    openapiFields.add("primary_groups");
    openapiFields.add("topic_list");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("topic_list");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CategoriesListTopicsResponse
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CategoriesListTopicsResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CategoriesListTopicsResponse is not found in the empty JSON string", CategoriesListTopicsResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!CategoriesListTopicsResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CategoriesListTopicsResponse` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CategoriesListTopicsResponse.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (jsonObj.get("users") != null && !jsonObj.get("users").isJsonNull()) {
        JsonArray jsonArrayusers = jsonObj.getAsJsonArray("users");
        if (jsonArrayusers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("users").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `users` to be an array in the JSON string but got `%s`", jsonObj.get("users").toString()));
          }

          // validate the optional field `users` (array)
          for (int i = 0; i < jsonArrayusers.size(); i++) {
            CategoriesListTopicsResponseUsersInner.validateJsonObject(jsonArrayusers.get(i).getAsJsonObject());
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("primary_groups") != null && !jsonObj.get("primary_groups").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `primary_groups` to be an array in the JSON string but got `%s`", jsonObj.get("primary_groups").toString()));
      }
      // validate the required field `topic_list`
      CategoriesListTopicsResponseTopicList.validateJsonObject(jsonObj.getAsJsonObject("topic_list"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CategoriesListTopicsResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CategoriesListTopicsResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CategoriesListTopicsResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CategoriesListTopicsResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<CategoriesListTopicsResponse>() {
           @Override
           public void write(JsonWriter out, CategoriesListTopicsResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CategoriesListTopicsResponse read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CategoriesListTopicsResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CategoriesListTopicsResponse
  * @throws IOException if the JSON string is invalid with respect to CategoriesListTopicsResponse
  */
  public static CategoriesListTopicsResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CategoriesListTopicsResponse.class);
  }

 /**
  * Convert an instance of CategoriesListTopicsResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

