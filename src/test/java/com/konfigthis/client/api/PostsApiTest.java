/*
 * Discourse API Documentation
 * This page contains the documentation on how to use Discourse through API calls.  > Note: For any endpoints not listed you can follow the [reverse engineer the Discourse API](https://meta.discourse.org/t/-/20576) guide to figure out how to use an API endpoint.  ### Request Content-Type  The Content-Type for POST and PUT requests can be set to `application/x-www-form-urlencoded`, `multipart/form-data`, or `application/json`.  ### Endpoint Names and Response Content-Type  Most API endpoints provide the same content as their HTML counterparts. For example the URL `/categories` serves a list of categories, the `/categories.json` API provides the same information in JSON format.  Instead of sending API requests to `/categories.json` you may also send them to `/categories` and add an `Accept: application/json` header to the request to get the JSON response. Sending requests with the `Accept` header is necessary if you want to use URLs for related endpoints returned by the API, such as pagination URLs. These URLs are returned without the `.json` prefix so you need to add the header in order to get the correct response format.  ### Authentication  Some endpoints do not require any authentication, pretty much anything else will require you to be authenticated.  To become authenticated you will need to create an API Key from the admin panel.  Once you have your API Key you can pass it in along with your API Username as an HTTP header like this:  ``` curl -X GET \"http://127.0.0.1:3000/admin/users/list/active.json\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" ```  and this is how POST requests will look:  ``` curl -X POST \"http://127.0.0.1:3000/categories\" \\ -H \"Content-Type: multipart/form-data;\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" \\ -F \"name=89853c20-4409-e91a-a8ea-f6cdff96aaaa\" \\ -F \"color=49d9e9\" \\ -F \"text_color=f0fcfd\" ```  ### Boolean values  If an endpoint accepts a boolean be sure to specify it as a lowercase `true` or `false` value unless noted otherwise. 
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.PostsCreateTopicPostMessageRequest;
import com.konfigthis.client.model.PostsCreateTopicPostMessageResponse;
import com.konfigthis.client.model.PostsDeleteSinglePostRequest;
import com.konfigthis.client.model.PostsGetSinglePostLikesResponse;
import com.konfigthis.client.model.PostsLikePostActionRequest;
import com.konfigthis.client.model.PostsLikePostActionResponse;
import com.konfigthis.client.model.PostsListLatestPostsAcrossTopicsResponse;
import com.konfigthis.client.model.PostsListRepliesToPostResponseInner;
import com.konfigthis.client.model.PostsLockPostActionRequest;
import com.konfigthis.client.model.PostsLockPostActionResponse;
import com.konfigthis.client.model.PostsUpdateSinglePostJsonRequest;
import com.konfigthis.client.model.PostsUpdateSinglePostJsonRequestPost;
import com.konfigthis.client.model.PostsUpdateSinglePostJsonResponse;
import java.util.Set;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PostsApi
 */
@Disabled
public class PostsApiTest {

    private static PostsApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new PostsApi(apiClient);
    }

    /**
     * Creates a new topic, a new post, or a private message
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createTopicPostMessageTest() throws ApiException {
        String raw = null;
        String title = null;
        Integer topicId = null;
        Integer category = null;
        String targetRecipients = null;
        String targetUsernames = null;
        String archetype = null;
        String createdAt = null;
        Integer replyToPostNumber = null;
        String embedUrl = null;
        String externalId = null;
        PostsCreateTopicPostMessageResponse response = api.createTopicPostMessage(raw)
                .title(title)
                .topicId(topicId)
                .category(category)
                .targetRecipients(targetRecipients)
                .targetUsernames(targetUsernames)
                .archetype(archetype)
                .createdAt(createdAt)
                .replyToPostNumber(replyToPostNumber)
                .embedUrl(embedUrl)
                .externalId(externalId)
                .execute();
        // TODO: test validations
    }

    /**
     * delete a single post
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteSinglePostTest() throws ApiException {
        Integer id = null;
        Boolean forceDestroy = null;
        api.deleteSinglePost(id)
                .forceDestroy(forceDestroy)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieve a single post
     *
     * This endpoint can be used to get the number of likes on a post using the &#x60;actions_summary&#x60; property in the response. &#x60;actions_summary&#x60; responses with the id of &#x60;2&#x60; signify a &#x60;like&#x60;. If there are no &#x60;actions_summary&#x60; items with the id of &#x60;2&#x60;, that means there are 0 likes. Other ids likely refer to various different flag types. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSinglePostLikesTest() throws ApiException {
        String id = null;
        PostsGetSinglePostLikesResponse response = api.getSinglePostLikes(id)
                .execute();
        // TODO: test validations
    }

    /**
     * Like a post and other actions
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void likePostActionTest() throws ApiException {
        Integer id = null;
        Integer postActionTypeId = null;
        String apiKey = null;
        String apiUsername = null;
        Boolean flagTopic = null;
        PostsLikePostActionResponse response = api.likePostAction(id, postActionTypeId, apiKey, apiUsername)
                .flagTopic(flagTopic)
                .execute();
        // TODO: test validations
    }

    /**
     * List latest posts across topics
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listLatestPostsAcrossTopicsTest() throws ApiException {
        String apiKey = null;
        String apiUsername = null;
        String before = null;
        PostsListLatestPostsAcrossTopicsResponse response = api.listLatestPostsAcrossTopics(apiKey, apiUsername)
                .before(before)
                .execute();
        // TODO: test validations
    }

    /**
     * List replies to a post
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listRepliesToPostTest() throws ApiException {
        String id = null;
        Set<PostsListRepliesToPostResponseInner> response = api.listRepliesToPost(id)
                .execute();
        // TODO: test validations
    }

    /**
     * Lock a post from being edited
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void lockPostActionTest() throws ApiException {
        String locked = null;
        String apiKey = null;
        String apiUsername = null;
        String id = null;
        PostsLockPostActionResponse response = api.lockPostAction(locked, apiKey, apiUsername, id)
                .execute();
        // TODO: test validations
    }

    /**
     * Update a single post
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateSinglePostJsonTest() throws ApiException {
        String id = null;
        PostsUpdateSinglePostJsonRequestPost post = null;
        PostsUpdateSinglePostJsonResponse response = api.updateSinglePostJson(id)
                .post(post)
                .execute();
        // TODO: test validations
    }

}
