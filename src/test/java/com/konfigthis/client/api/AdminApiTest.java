/*
 * Discourse API Documentation
 * This page contains the documentation on how to use Discourse through API calls.  > Note: For any endpoints not listed you can follow the [reverse engineer the Discourse API](https://meta.discourse.org/t/-/20576) guide to figure out how to use an API endpoint.  ### Request Content-Type  The Content-Type for POST and PUT requests can be set to `application/x-www-form-urlencoded`, `multipart/form-data`, or `application/json`.  ### Endpoint Names and Response Content-Type  Most API endpoints provide the same content as their HTML counterparts. For example the URL `/categories` serves a list of categories, the `/categories.json` API provides the same information in JSON format.  Instead of sending API requests to `/categories.json` you may also send them to `/categories` and add an `Accept: application/json` header to the request to get the JSON response. Sending requests with the `Accept` header is necessary if you want to use URLs for related endpoints returned by the API, such as pagination URLs. These URLs are returned without the `.json` prefix so you need to add the header in order to get the correct response format.  ### Authentication  Some endpoints do not require any authentication, pretty much anything else will require you to be authenticated.  To become authenticated you will need to create an API Key from the admin panel.  Once you have your API Key you can pass it in along with your API Username as an HTTP header like this:  ``` curl -X GET \"http://127.0.0.1:3000/admin/users/list/active.json\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" ```  and this is how POST requests will look:  ``` curl -X POST \"http://127.0.0.1:3000/categories\" \\ -H \"Content-Type: multipart/form-data;\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" \\ -F \"name=89853c20-4409-e91a-a8ea-f6cdff96aaaa\" \\ -F \"color=49d9e9\" \\ -F \"text_color=f0fcfd\" ```  ### Boolean values  If an endpoint accepts a boolean be sure to specify it as a lowercase `true` or `false` value unless noted otherwise. 
 *
 * The version of the OpenAPI document: latest
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import java.util.Set;
import com.konfigthis.client.model.UsersActivateUserResponse;
import com.konfigthis.client.model.UsersAnonymizeByIdJsonResponse;
import com.konfigthis.client.model.UsersDeactivateUserResponse;
import com.konfigthis.client.model.UsersDeleteUserByIdJsonRequest;
import com.konfigthis.client.model.UsersDeleteUserByIdJsonResponse;
import com.konfigthis.client.model.UsersGetListOfUsersResponseInner;
import com.konfigthis.client.model.UsersGetUserByIdJsonResponse;
import com.konfigthis.client.model.UsersLogOutUserActionResponse;
import com.konfigthis.client.model.UsersRefreshGravatarPostResponse;
import com.konfigthis.client.model.UsersSilenceByIdRequest;
import com.konfigthis.client.model.UsersSilenceByIdResponse;
import com.konfigthis.client.model.UsersSuspendByIdJsonRequest;
import com.konfigthis.client.model.UsersSuspendByIdJsonResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AdminApi
 */
@Disabled
public class AdminApiTest {

    private static AdminApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new AdminApi(apiClient);
    }

    /**
     * Activate a user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void activateUserTest() throws ApiException {
        Integer id = null;
        UsersActivateUserResponse response = api.activateUser(id)
                .execute();
        // TODO: test validations
    }

    /**
     * Anonymize a user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void anonymizeByIdJsonTest() throws ApiException {
        Integer id = null;
        UsersAnonymizeByIdJsonResponse response = api.anonymizeByIdJson(id)
                .execute();
        // TODO: test validations
    }

    /**
     * Deactivate a user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deactivateUserTest() throws ApiException {
        Integer id = null;
        UsersDeactivateUserResponse response = api.deactivateUser(id)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete a user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteUserByIdJsonTest() throws ApiException {
        Integer id = null;
        Boolean deletePosts = null;
        Boolean blockEmail = null;
        Boolean blockUrls = null;
        Boolean blockIp = null;
        UsersDeleteUserByIdJsonResponse response = api.deleteUserByIdJson(id)
                .deletePosts(deletePosts)
                .blockEmail(blockEmail)
                .blockUrls(blockUrls)
                .blockIp(blockIp)
                .execute();
        // TODO: test validations
    }

    /**
     * Get a list of users
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getListOfUsersTest() throws ApiException {
        String flag = null;
        String order = null;
        String asc = null;
        Integer page = null;
        Boolean showEmails = null;
        Boolean stats = null;
        String email = null;
        String ip = null;
        Set<UsersGetListOfUsersResponseInner> response = api.getListOfUsers(flag)
                .order(order)
                .asc(asc)
                .page(page)
                .showEmails(showEmails)
                .stats(stats)
                .email(email)
                .ip(ip)
                .execute();
        // TODO: test validations
    }

    /**
     * Get a user by id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUserByIdJsonTest() throws ApiException {
        Integer id = null;
        UsersGetUserByIdJsonResponse response = api.getUserByIdJson(id)
                .execute();
        // TODO: test validations
    }

    /**
     * Log a user out
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void logOutUserActionTest() throws ApiException {
        Integer id = null;
        UsersLogOutUserActionResponse response = api.logOutUserAction(id)
                .execute();
        // TODO: test validations
    }

    /**
     * Refresh gravatar
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void refreshGravatarPostTest() throws ApiException {
        String username = null;
        UsersRefreshGravatarPostResponse response = api.refreshGravatarPost(username)
                .execute();
        // TODO: test validations
    }

    /**
     * Silence a user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void silenceByIdTest() throws ApiException {
        Integer id = null;
        String silencedTill = null;
        String reason = null;
        String message = null;
        String postAction = null;
        UsersSilenceByIdResponse response = api.silenceById(id)
                .silencedTill(silencedTill)
                .reason(reason)
                .message(message)
                .postAction(postAction)
                .execute();
        // TODO: test validations
    }

    /**
     * Suspend a user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void suspendByIdJsonTest() throws ApiException {
        String suspendUntil = null;
        String reason = null;
        Integer id = null;
        String message = null;
        String postAction = null;
        UsersSuspendByIdJsonResponse response = api.suspendByIdJson(suspendUntil, reason, id)
                .message(message)
                .postAction(postAction)
                .execute();
        // TODO: test validations
    }

}
